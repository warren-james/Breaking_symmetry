sigma = sigma))
}
}
}
# tidy
rm(tt, ss, N, ii, sim_acc, mu, sigma, se)
# make some plots
plt_sim <- df_sim %>%
mutate(N = as.factor(N)) %>%
ggplot(aes(mu,
colour = Task_type,
fill = Task_type)) +
# geom_histogram(aes(y = ..density..),
#                position = "dodge",
#                alpha = .5) +
geom_density(alpha = .3) +
see::scale_fill_flat() +
see::scale_color_flat() +
theme_bw() +
theme(legend.position = c(0.5, .96),
legend.direction = "horizontal") +
scale_x_continuous("Average accuracy") +
facet_wrap(~N)
plt_sim
N_diff <- df_sim %>%
select(iter, N, Task_type, mu) %>%
spread(Task_type, mu) %>%
mutate(diff = `Decision + performance` - Decision,
N = as.factor(N),
below0 = ifelse(diff < 0, 1, 0))
# get mean value of how many samples had a difference < 0
# In this case, diff < 0 means the Accuracy group stood closer to the target
N_below <- N_diff %>%
group_by(N) %>%
summarise(value = round(mean(below0), digits = 3))
plt_diff <- N_diff %>%
ggplot(aes(diff,
colour = N,
fill = N)) +
# geom_histogram(position = "dodge",
#                aes(y = ..density..),
#                alpha = .3) +
geom_density(alpha = .3) +
facet_wrap(~N) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
geom_vline(xintercept = 0,
linetype = "dashed") +
geom_text(data = N_below,
aes(-.12, 22,
label = paste("diff = ", value, sep = ""))) +
scale_x_continuous("'Decision' - 'Decision & performance'") +
theme(legend.position = "none")
plt_diff
head(df_overall)
#### Resampling ####
# we want to take random participant's overall accuracy for each task several times then compare...
# we also want to filter out the middle two as they are causing biases in the baseline
df_avg <- df_overall %>%
group_by(Participant, Task) %>%
mutate(sep_factor = as.numeric(as.factor(norm_delta))) %>%
filter(sep_factor == c(1,4)) %>%
summarise(mean_p = mean(p),
mean_acc = mean(Accuracy))
head(df_avg)
t.test(df_avg$mean_p ~ df_avg$Task)
t.test(df_avg$mean_acc ~ df_avg$Task)
# both are "significant"...
# get effext size
effsize::cohen.d(df_avg$mean_p ~ df_avg$Task)
# .85... so that's pretty large
df_avg <- df_avg %>%
mutate(Task_type = ifelse(Task == "Avatar", "Decision", "Decision + performance"))
n_sizes <- c(10, 15, 20, 25, 30, 40, 50)
n_samples <- 2500
df_sim <- tibble(iter = numeric(),
Task_type = character(),
N = numeric(),
mu = numeric(),
se = numeric(),
sigma = numeric())
# start resampling
for(tt in unique(df_avg$Task_type)){
# get subset
ss <- df_avg %>%
filter(Task_type == tt)
# loop N sizes
for(N in n_sizes){
# loop n_samples times
for(ii in 1:n_samples){
# get sim of accuracy
sim_acc <- sample(ss$mean_p, N, replace = T)
# get values
mu <- mean(sim_acc)
sigma <- sd(sim_acc)
se <- sigma/sqrt(N)
# bind to df
df_sim <- rbind(df_sim, tibble(iter = ii,
Task_type = tt,
N = N,
mu = mu,
se = se,
sigma = sigma))
}
}
}
# tidy
rm(tt, ss, N, ii, sim_acc, mu, sigma, se)
# make some plots
plt_sim <- df_sim %>%
mutate(N = as.factor(N)) %>%
ggplot(aes(mu,
colour = Task_type,
fill = Task_type)) +
# geom_histogram(aes(y = ..density..),
#                position = "dodge",
#                alpha = .5) +
geom_density(alpha = .3) +
see::scale_fill_flat() +
see::scale_color_flat() +
theme_bw() +
theme(legend.position = c(0.5, .96),
legend.direction = "horizontal") +
scale_x_continuous("Average accuracy") +
facet_wrap(~N)
plt_sim
N_diff <- df_sim %>%
select(iter, N, Task_type, mu) %>%
spread(Task_type, mu) %>%
mutate(diff = `Decision + performance` - Decision,
N = as.factor(N),
below0 = ifelse(diff < 0, 1, 0))
# get mean value of how many samples had a difference < 0
# In this case, diff < 0 means the Accuracy group stood closer to the target
N_below <- N_diff %>%
group_by(N) %>%
summarise(value = round(mean(below0), digits = 3))
plt_diff <- N_diff %>%
ggplot(aes(diff,
colour = N,
fill = N)) +
# geom_histogram(position = "dodge",
#                aes(y = ..density..),
#                alpha = .3) +
geom_density(alpha = .3) +
facet_wrap(~N) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
geom_vline(xintercept = 0,
linetype = "dashed") +
geom_text(data = N_below,
aes(-.12, 22,
label = paste("diff = ", value, sep = ""))) +
scale_x_continuous("'Decision' - 'Decision & performance'") +
theme(legend.position = "none")
plt_diff
n_sizes <- c(10, 15, 20, 25, 30, 40)
n_samples <- 2500
# setup df
df_sim <- tibble(iter = numeric(),
Task_type = character(),
N = numeric(),
mu = numeric(),
se = numeric(),
sigma = numeric())
# start resampling
for(tt in unique(df_avg$Task_type)){
# get subset
ss <- df_avg %>%
filter(Task_type == tt)
# loop N sizes
for(N in n_sizes){
# loop n_samples times
for(ii in 1:n_samples){
# get sim of accuracy
sim_acc <- sample(ss$mean_p, N, replace = T)
# get values
mu <- mean(sim_acc)
sigma <- sd(sim_acc)
se <- sigma/sqrt(N)
# bind to df
df_sim <- rbind(df_sim, tibble(iter = ii,
Task_type = tt,
N = N,
mu = mu,
se = se,
sigma = sigma))
}
}
}
# tidy
rm(tt, ss, N, ii, sim_acc, mu, sigma, se)
# make some plots
plt_sim <- df_sim %>%
mutate(N = as.factor(N)) %>%
ggplot(aes(mu,
colour = Task_type,
fill = Task_type)) +
# geom_histogram(aes(y = ..density..),
#                position = "dodge",
#                alpha = .5) +
geom_density(alpha = .3) +
see::scale_fill_flat() +
see::scale_color_flat() +
theme_bw() +
theme(legend.position = c(0.5, .96),
legend.direction = "horizontal") +
scale_x_continuous("Average accuracy") +
facet_wrap(~N)
plt_sim
N_diff <- df_sim %>%
select(iter, N, Task_type, mu) %>%
spread(Task_type, mu) %>%
mutate(diff = `Decision + performance` - Decision,
N = as.factor(N),
below0 = ifelse(diff < 0, 1, 0))
# get mean value of how many samples had a difference < 0
# In this case, diff < 0 means the Accuracy group stood closer to the target
N_below <- N_diff %>%
group_by(N) %>%
summarise(value = round(mean(below0), digits = 3))
plt_diff <- N_diff %>%
ggplot(aes(diff,
colour = N,
fill = N)) +
# geom_histogram(position = "dodge",
#                aes(y = ..density..),
#                alpha = .3) +
geom_density(alpha = .3) +
facet_wrap(~N) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
geom_vline(xintercept = 0,
linetype = "dashed") +
geom_text(data = N_below,
aes(-.12, 22,
label = paste("diff = ", value, sep = ""))) +
scale_x_continuous("'Decision' - 'Decision & performance'") +
theme(legend.position = "none")
plt_diff
# plot these together
plt <- gridExtra::arrangeGrob(plt_sim, plt_diff, ncol = 2)
# save this
ggsave(plt, file = "power_plt.png",
height = 6,
width = 10)
rm(list =ls())
setwd("F:/Uni/Github/Breaking_symmetry/power")
library(tidyverse)
library(lme4)
n_conditions <- 2
sigma_person <- 0.2
n_itr <- 2
probs <- c(0.45, 0.55)
sim_data <- function(n_people, n_trial, n_conditions)
{
n_rows <- n_people * n_conditions * n_trial
fake_data <- tibble(
person = rep(1:n_people, each = n_trial, n_conditions),
condition = rep(1:n_conditions, each = n_people*n_trial),
trial  = rep(1:n_trial, each = 1, n_people * n_conditions),
p_person = probs[condition] + rep(rnorm(n_people, 0, sigma_person), each = n_trial, n_conditions),
response = if_else(runif(n_rows) < p_person, 1, 0)) %>%
mutate(
condition = as_factor(condition),
person = as_factor(person))
return(fake_data)
}
library(tidyverse)
library(lme4)
n_conditions <- 2
sigma_person <- 0.2
n_itr <- 2
probs <- c(0.45, 0.55)
sim_data <- function(n_people, n_trial, n_conditions)
{
n_rows <- n_people * n_conditions * n_trial
fake_data <- tibble(
person = rep(1:n_people, each = n_trial, n_conditions),
condition = rep(1:n_conditions, each = n_people*n_trial),
trial  = rep(1:n_trial, each = 1, n_people * n_conditions),
p_person = probs[condition] + rep(rnorm(n_people, 0, sigma_person), each = n_trial, n_conditions),
response = if_else(runif(n_rows) < p_person, 1, 0)) %>%
mutate(
condition = as_factor(condition),
person = as_factor(person))
return(fake_data)
}
plot_fake_data <- function(n_people, n_conditions, n_trial, probs)
{
fake_data <- sim_data(n_people, n_conditions, n_trial)
fake_data %>%
group_by(condition, person) %>%
summarise(proportion = mean(response)) -> fake_data
ggplot() +
geom_boxplot(data = fake_data, aes(x = condition, y = proportion)) +
ggtitle("Some simulated data") +
geom_point(aes(x = c(1,2), y = probs), size = 3, colour = "red")
}
sim_exp <- function(n_people, n_trial)
{
fake_data <- sim_data(n_people, n_trial, n_conditions)
m <- glmer(data = fake_data, response ~ condition + (1|person), family = "binomial")
p <- coefficients(summary(m))[2,4]
return(p)
}
itr_sim <- function (n_people, n_trial, n_itr = NULL, alpha = 0.05)
{
if(is.null(n_itr)){
n_itr = 100
}
p_values <- map_dbl(1:n_itr, ~ sim_exp(n_people=n_people, n_trial=n_trial))
pwr <- tibble(n_people = n_people, n_trial = n_trial, power = mean(p_values < alpha))
return(pwr)
}
n_peeps = seq(2, 10, by = 2)
n_trls = seq(25, 200, by = 25)
d <- tibble()
for (np in n_peeps)
{
print(paste("running simlations for n = ", np, " people", sep = ""))
for (trl in n_trls)
{
d <- bind_rows(d, itr_sim(np, trl))
}
}
library(tidyverse)
d <- tibble()
for (np in n_peeps)
{
print(paste("running simlations for n = ", np, " people", sep = ""))
for (trl in n_trls)
{
d <- bind_rows(d, itr_sim(np, trl))
}
}
library(tidyverse)
library(lme4)
n_conditions <- 2
sigma_person <- 0.2
n_itr <- 2
probs <- c(0.45, 0.55)
sim_data <- function(n_people, n_trial, n_conditions)
{
n_rows <- n_people * n_conditions * n_trial
fake_data <- tibble(
person = rep(1:n_people, each = n_trial, n_conditions),
condition = rep(1:n_conditions, each = n_people*n_trial),
trial  = rep(1:n_trial, each = 1, n_people * n_conditions),
p_person = probs[condition] + rep(rnorm(n_people, 0, sigma_person), each = n_trial, n_conditions),
response = if_else(runif(n_rows) < p_person, 1, 0)) %>%
mutate(
condition = as.factor(condition),
person = as.factor(person))
return(fake_data)
}
plot_fake_data <- function(n_people, n_conditions, n_trial, probs)
{
fake_data <- sim_data(n_people, n_conditions, n_trial)
fake_data %>%
group_by(condition, person) %>%
summarise(proportion = mean(response)) -> fake_data
ggplot() +
geom_boxplot(data = fake_data, aes(x = condition, y = proportion)) +
ggtitle("Some simulated data") +
geom_point(aes(x = c(1,2), y = probs), size = 3, colour = "red")
}
sim_exp <- function(n_people, n_trial)
{
fake_data <- sim_data(n_people, n_trial, n_conditions)
m <- glmer(data = fake_data, response ~ condition + (1|person), family = "binomial")
p <- coefficients(summary(m))[2,4]
return(p)
}
itr_sim <- function (n_people, n_trial, n_itr = NULL, alpha = 0.05)
{
if(is.null(n_itr)){
n_itr = 100
}
p_values <- map_dbl(1:n_itr, ~ sim_exp(n_people=n_people, n_trial=n_trial))
pwr <- tibble(n_people = n_people, n_trial = n_trial, power = mean(p_values < alpha))
return(pwr)
}
# plot_fake_data(n_people, n_conditions, n_trial, probs)
n_peeps = seq(2, 10, by = 2)
n_trls = seq(25, 200, by = 25)
# Loop over various numers of participants and trials
d <- tibble()
for (np in n_peeps)
{
print(paste("running simlations for n = ", np, " people", sep = ""))
for (trl in n_trls)
{
d <- bind_rows(d, itr_sim(np, trl))
}
}
View(d)
itr_sim <- function (n_people, n_trial, n_itr = NULL, alpha = 0.05)
{
if(is.null(n_itr)){
n_itr = 100
}
print(n_itr)
p_values <- map_dbl(1:n_itr, ~ sim_exp(n_people=n_people, n_trial=n_trial))
pwr <- tibble(n_people = n_people, n_trial = n_trial, power = mean(p_values < alpha))
return(pwr)
}
itr_sim(2, 25)
test <- function(a, b = NULL){
print(a)
if(is.null(b)){
print("NULL")
} else {
print(b)
}
}
test(2,3)
test(2)
d <- tibble()
for (np in n_peeps)
{
print(paste("running simlations for n = ", np, " people", sep = ""))
for (trl in n_trls)
{
d <- bind_rows(d, itr_sim(np, trl, n_itr))
}
}
View(d)
library(tidyverse)
library(lme4)
n_conditions <- 2
sigma_person <- 0.2
n_itr <- 10
probs <- c(0.45, 0.55)
sim_data <- function(n_people, n_trial, n_conditions)
{
n_rows <- n_people * n_conditions * n_trial
fake_data <- tibble(
person = rep(1:n_people, each = n_trial, n_conditions),
condition = rep(1:n_conditions, each = n_people*n_trial),
trial  = rep(1:n_trial, each = 1, n_people * n_conditions),
p_person = probs[condition] + rep(rnorm(n_people, 0, sigma_person), each = n_trial, n_conditions),
response = if_else(runif(n_rows) < p_person, 1, 0)) %>%
mutate(
condition = as.factor(condition),
person = as.factor(person))
return(fake_data)
}
plot_fake_data <- function(n_people, n_conditions, n_trial, probs)
{
fake_data <- sim_data(n_people, n_conditions, n_trial)
fake_data %>%
group_by(condition, person) %>%
summarise(proportion = mean(response)) -> fake_data
ggplot() +
geom_boxplot(data = fake_data, aes(x = condition, y = proportion)) +
ggtitle("Some simulated data") +
geom_point(aes(x = c(1,2), y = probs), size = 3, colour = "red")
}
sim_exp <- function(n_people, n_trial)
{
fake_data <- sim_data(n_people, n_trial, n_conditions)
m <- glmer(data = fake_data, response ~ condition + (1|person), family = "binomial")
p <- coefficients(summary(m))[2,4]
return(p)
}
itr_sim <- function (n_people, n_trial, n_itr = NULL, alpha = 0.05)
{
if(is.null(n_itr)){
n_itr = 100
}
p_values <- map_dbl(1:n_itr, ~ sim_exp(n_people=n_people, n_trial=n_trial))
pwr <- tibble(n_people = n_people, n_trial = n_trial, power = mean(p_values < alpha))
return(pwr)
}
# plot_fake_data(n_people, n_conditions, n_trial, probs)
n_peeps = seq(2, 10, by = 2)
n_trls = seq(25, 200, by = 25)
# Loop over various numers of participants and trials
d <- tibble()
for (np in n_peeps)
{
print(paste("running simlations for n = ", np, " people", sep = ""))
for (trl in n_trls)
{
d <- bind_rows(d, itr_sim(np, trl, n_itr))
}
}
ggplot(d, aes(x = n_people, y = power, colour = as.factor(n_trial))) +
geom_point() + geom_smooth()
itr_sim <- function (n_people, n_trial, n_itr = 100, alpha = 0.05)
{
# if(is.null(n_itr)){
#   n_itr = 100
# }
print(n_itr)
p_values <- map_dbl(1:n_itr, ~ sim_exp(n_people=n_people, n_trial=n_trial))
pwr <- tibble(n_people = n_people, n_trial = n_trial, power = mean(p_values < alpha))
return(pwr)
}
d <- tibble()
for (np in n_peeps)
{
print(paste("running simlations for n = ", np, " people", sep = ""))
for (trl in n_trls)
{
d <- bind_rows(d, itr_sim(np, trl, n_itr))
}
}
