df_bias <- rbind(df_bias, d)
}
# tidy
rm(f,d)
colnames(df_bias) <- c("Block",
"Delta",
"Fixated_box",
"Accuracy",
"Target_box",
"Participant",
"Condition")
df_bias <- df_bias %>%
drop_na()
# need a separate loop for orig data since there are more columns... which sucks....
results_files <- c("data/clarke_and_hunt/Part2/")
df_orig <- tibble()
for(f in dir(results_files)){
d <- read.csv(paste(results_files, f, sep = ""), header = F)
subjno <- strsplit(f, '[_.]')
d$participant <- paste(subjno[[1]][1], subjno[[1]][2], sep = "_")
d$condition <- "Symmetric"
# bind
df_orig <- rbind(df_orig, d)
}
# tidy
rm(d, subjno, f, results_files)
# rename
colnames(df_orig) <- c("Block",
"Delta",
"Fixated_box",
"Accuracy",
"Participant",
"Condition")
df_orig <- df_orig %>%
drop_na()
#### PRE-processing ####
# general
# rescale delta so all are divided by 450
# helps us with fitting logistic regression
df_part1_bias <- df_part1_bias %>%
mutate(norm_delta = round(Delta/450, digits = 2))
df_part1_orig <- df_part1_orig %>%
mutate(norm_delta = round(Delta/450, digits = 2))
df_bias <- df_bias %>%
mutate(norm_delta = round(Delta/450, digits = 2))
df_orig <- df_orig %>%
mutate(norm_delta = round(Delta/450, digits = 2))
#### PRE: part 1 ####
# get logistic regression results to setup switch points
deltas <- seq(0,2,0.01)
df_bias_pred_acc <- get_acc(df_part1_bias, deltas)
df_orig_pred_acc <- get_acc(df_part1_orig, deltas)
# work out switch points for participants
df_bias_SP <- get_SP(df_bias_pred_acc, .9)
df_orig_SP <- get_SP(df_orig_pred_acc, .75)
# need to work out the "most likely box" for both the orig data and bias
# probably need switch points as well since we want to know "close" and "far"
# sort out centre vs side accuracy to get optimal
# this will assume they look at the most likely box
# sort out bias first
pred_bias_left <- df_bias_pred_acc %>%
mutate(p_l = p,
left_dist = norm_delta) %>%
select(Participant, p_l, left_dist)
pred_bias_right <- df_bias_pred_acc %>%
mutate(p_r = p,
right_dist = norm_delta) %>%
select(Participant, p_r, right_dist)
# merge it all
df_bias <- df_bias %>%
mutate(left_dist = norm_delta * 2,
right_dist = 0) %>%
merge(df_bias_pred_acc) %>%
merge(pred_bias_right) %>%
merge(pred_bias_left) %>%
mutate(Centre = p,
Side = (p_r * .8) + (p_l * .2)) %>%
select(-Target_box,
-p, - p_r, -p_l,
-left_dist,
-right_dist) %>%
merge(df_bias_SP) %>%
mutate(Dist_type = ifelse(norm_delta < SP, "Close", "Far"))
# tidy
rm(pred_bias_left, pred_bias_right)
# sort out orig
pred_orig_left <- df_orig_pred_acc %>%
mutate(p_l = p,
left_dist = norm_delta) %>%
select(Participant, p_l, left_dist)
pred_orig_right <- df_orig_pred_acc %>%
mutate(p_r = p,
right_dist = norm_delta) %>%
select(Participant, p_r, right_dist)
# merge it all
df_orig <- df_orig %>%
mutate(left_dist = norm_delta * 2,
right_dist = 0) %>%
merge(df_orig_pred_acc) %>%
merge(pred_orig_right) %>%
merge(pred_orig_left) %>%
mutate(Centre = p,
Side = (p_r * .5) + (p_l * .5)) %>%
select(-p, - p_r, -p_l,
-left_dist,
-right_dist) %>%
merge(df_orig_SP) %>%
mutate(Dist_type = ifelse(norm_delta < SP, "Close", "Far"))
# tidy
rm(pred_orig_left, pred_orig_right)
#### PRE: part 2 ####
# just look at the max proportion to one of the sides for the conditions?
df_bias_fix <- df_bias %>%
select(Participant, Condition, Dist_type, Fixated_box)
df_orig_fix <- df_orig %>%
select(Participant, Condition, Dist_type, Fixated_box)
df_fix <- rbind(df_bias_fix, df_orig_fix) %>%
mutate(Fixated_box = as.factor(Fixated_box)) %>%
group_by(Participant, Dist_type, Condition) %>%
mutate(n_total = as.factor(n())) %>%
ungroup() %>%
group_by(Participant, Condition, Dist_type, Fixated_box, n_total, .drop = F) %>%
summarise(n_each = n()) %>%
complete(n_total, fill = list(n_total = 1)) %>%
mutate(prop = n_each/as.numeric(n_total)) %>%
ungroup() %>%
mutate(Side = ifelse(Fixated_box == 1, 0, 1)) %>%
group_by(Participant, Dist_type, Side) %>%
mutate(max_prop = max(prop),
box_type = ifelse(Side == 0, "Centre", ifelse(prop == max_prop, "Most", "Least")))
df_fix %>%
ggplot(aes(Dist_type, prop,
colour = Condition,
fill = Condition)) +
geom_boxplot(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~box_type)
?tidybayes::hdi
setwd("F:/Uni/Github/Breaking_symmetry/power/Hoop_size")
#### Hoop size power ####
# look at how much variation there is and then use this to
# see how small a difference we could detect given various N's
# check this link to increase the speed of the loops
#### Library ####
library(tidyverse)
library(tidybayes)
#### Functions ####
# squash range
squash <- function(y, max, min, squash){
y <- y * ((max-squash) - (min + squash)) + (min + squash)
return(y)
}
# functions for getting parameters from a beta dist
mu_beta <- function(a, b){
a/(a + b)
}
phi_beta <- function(a, b){
1/((a*b)/(((a+b)^2)*(a+b+1)))
}
var_beta <- function(a, b){
(a*b)/(((a+b)^2)*(a+b+1))
}
# get shape parameters
get_shape_beta <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
# need to get the reverse of this
# so specify a and b given mu and phi
# That way I can make adjustments to mu keeping phi the same
# and then look at how much "power" we have to detect a difference
# of size D
#### read in data ####
results_files <- c("data/Part2/")
df_part2 <- tibble()
# loop through
for(f in dir(results_files)){
d <- read.csv(paste(results_files, f, sep = ""), sep = "\t")
subj <- strsplit(f, 'results.txt')[[1]][1]
d$Participant <- subj
# bind
df_part2 <- rbind(df_part2, d)
}
# get hoop pos
df_hoop_pos <- read.csv("data/Hoop_positions/part2hoopPos.txt", sep = "\t") %>%
mutate(Color = ifelse(Hoop == "Red", "R", ifelse(Hoop == "Yellow", "Y", "B"))) %>%
select(-Hoop)
# merge them
df_part2 <- merge(df_part2, df_hoop_pos)
# tidy
rm(d, f, results_files, subj, df_hoop_pos)
#### preprocessing ####
df_part2 <- df_part2 %>%
group_by(Participant) %>%
mutate(norm_pos = (SubjectPosition - 20)/Delta,
temp = as.numeric(as.factor(Delta)),
slab_measures = factor(temp, labels = c("~90%", "~50% - 1", "~50%", "~50% + 1", "~50% + 2", "~10%"))) %>%
select(-temp) %>%
filter(abs(norm_pos) < 1.01) %>%
mutate(beta_pos = (norm_pos + 1)/2,
beta_pos = squash(beta_pos, 1, 0, 1e-4)) %>%
ungroup()
#### make some plots ####
# overall
df_part2 %>%
summarise(mu = mean(norm_pos),
sdev = sd(norm_pos))
# get some descriptives
df_part2 %>%
group_by(slab_measures) %>%
summarise(mu = mean(norm_pos),
sdev = sd(norm_pos))
df_part2 %>%
ggplot(aes(norm_pos,
colour = slab_measures,
fill = slab_measures)) +
geom_histogram(aes(y = ..density..),
alpha = .3,
binwidth = .01) +
geom_density(alpha = .2) +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~slab_measures)
# overall version
df_part2 %>%
ggplot(aes(beta_pos)) +
geom_histogram(aes(y = ..density..),
alpha = .3,
binwidth = 0.05) +
geom_density()
#### run sims ####
# assuming it's a normal distribution overall
# maybe we want to fit a beta dist to our data and use those values
# then model some beta dists?
# set some parameters... and test
# this is the "real" mean for our data
mu1 <- mean(df_part2$beta_pos)
mu2 <- seq(.05, .4, .05)
sdev <- sd(df_part2$beta_pos)
s_sdev <- sdev/2
c_dev <- 0.1
# loop through to check
n_iter <- 100
n_subs <- seq(10, 30, 5)
n_trials <- 60
# setup df
df_sim <- tibble(n_iter = numeric(),
n_subs = numeric(),
difference = numeric(),
mu_baseline = numeric(),
mu_comparison = numeric(),
p_value = numeric())
# loop through
# for(ii in 1:n_iter){
#   print(paste((ii/n_iter)*100, "%", sep = ""))
#   for(diff in mu2){
#     for(subs in n_subs){
#       temp <- tibble(sub = seq(1, subs, 1),
#                      mu_baseline = rnorm(subs, mu1, s_sdev),
#                      mu_comparison = mu_baseline + diff) %>% #(diff + rnorm(1, 0, c_dev))) %>%
#         rowwise() %>%
#         mutate(observed_baseline = mean(rnorm(n_trials, mu_baseline, sdev)),
#                observed_comparison = mean(rnorm(n_trials, mu_comparison, sdev)))
#       p_value <- t.test(temp$mu_comparison, temp$mu_baseline)$p.value
#       df_sim <- rbind(df_sim, tibble(n_iter = ii,
#                                      n_subs = subs,
#                                      difference = diff,
#                                      mu_baseline = mean(temp$observed_baseline),
#                                      mu_comparison = mean(temp$observed_comparison),
#                                      p_value = p_value))
#     }
#   }
# }
# this doesn't quite work because we have thousands of observations here...
# # t.test loop
# for(d in unique(df_sim$difference)){
#   ss <- df_sim %>%
#     filter(difference == d)
#   print(paste("Difference = ", d, "p = ",t.test(ss$mu_baseline, ss$mu_comparison)$p.value, sep = ""))
# }
# df_sim %>%
#   mutate(difference = as.factor(difference)) %>%
#   gather(mu_baseline:mu_comparison,
#          key = "mu_type",
#          value = "value") %>%
#   ggplot(aes(value, colour = mu_type, fill = mu_type)) +
#   geom_density(alpha = .3) +
#   facet_grid(n_subs~difference)
#
# # do the hdi region plot
# df_sim %>%
#   mutate(diff = mu_comparison - mu_baseline) %>%
#   group_by(n_subs, difference) %>%
#   summarise(mu_diff = mean(diff),
#             HDI_upper = hdi(diff)[2],
#             HDI_lower = hdi(diff)[1]) %>%
#   ggplot(aes(n_subs, mu_diff)) +
#   geom_line() +
#   geom_ribbon(aes(ymin = HDI_lower,
#                   ymax = HDI_upper),
#               alpha = .3) +
#   facet_wrap(~difference, scales = "free_y")
#### try something else ####
# try by obtaining parameters to fit a series of beta dists and then sample from these
# because this is what we're doing with the real data
shape_1 <- fitdistrplus::fitdist(df_part2$beta_pos, "beta")
mu1 <- mu_beta(shape_1$estimate[1], shape_1$estimate[2])
var1 <- var_beta(shape_1$estimate[1], shape_1$estimate[2])
# mu1 <- mean(df_part2$beta_pos)
# var1 <- var(df_part2$beta_pos)
shape_1 <- get_shape_beta(mu1, var1)
mu2 <- seq(0.05, .2, 0.05)
x <- seq(0,1,0.01)
# quick plotting
plt_check_dists <- tibble(x_vals = rep(x, length(c(mu2, 0))),
diff = rep(c(mu2, 0), each = length(x)),
base = mu1,
var = var1,
alpha = get_shape_beta(base + diff, var)$alpha,
beta = get_shape_beta(base + diff, var)$beta,
p = dbeta(x_vals, alpha, beta)) %>%
ggplot(aes(x_vals, p,
colour = as.factor(diff))) +
geom_point() +
theme_bw()
plt_check_dists
# looks alright...
# now loop through these distributions taking samples and see how the mean looks
# setup parameters
n_iter <- 5000
n_subs <- seq(3, 24, 1)
n_trials <- 72
refresh <- n_iter/100
# changing this to a data.table for speed
# need to establish the data table filled with 0's
# so how long?
n <- n_iter * length(n_subs) * length(mu2) * length(n_trials)
# df_sample <- data.table::data.table(iter = rep(0, n),
#                                     n_subs = rep(0, n),
#                                     n_trials = rep(0, n),
#                                     difference = rep(0, n),
#                                     baseline = rep(0, n),
#                                     comparison = rep(0, n))
# # setup df
# # df_sample <- tibble(iter = numeric(),
# # n_subs = numeric(),
# # n_trials = numeric(),
# # difference = numeric(),
# # baseline = numeric(),
# # comparison = numeric())
#
# start <- Sys.time()
# # loop
# count <- 0
# for(ii in 1:n_iter){
#   if(ii %% refresh == 0){
#     print(paste((ii/n_iter)*100, "%", sep = ""))
#   }
#   base_shape <- get_shape_beta(mu1, var1)
#   base_alpha <- base_shape$alpha
#   base_beta <- base_shape$beta
#   for(trials in n_trials){
#     for(diff in mu2){
#       comp_shape <- get_shape_beta(mu1 + diff, var1)
#       comp_alpha <- comp_shape$alpha
#       comp_beta <- comp_shape$beta
#       for(sub in n_subs){
#         # up count here
#         count <- count + 1
#         base_sample <- c()
#         comp_sample <- c()
#         for(s in 1:sub){
#           base_sample <- c(base_sample, rbeta(n_trials, base_alpha, base_beta))
#           comp_sample <- c(comp_sample, rbeta(n_trials, comp_alpha, comp_beta))
#         }
#         # df_sample <- rbind(df_sample, tibble(iter = ii,
#         #                                      n_subs = sub,
#         #                                      n_trials = trials,
#         #                                      difference = diff,
#         #                                      baseline = mean(base_sample),
#         #                                      comparison = mean(comp_sample)))
#         # add to table
#         df_sample[count, iter := ii]
#         df_sample[count, n_subs := sub]
#         df_sample[count, n_trials := trials]
#         df_sample[count, difference := diff]
#         df_sample[count, baseline := mean(base_sample)]
#         df_sample[count, comparison := mean(comp_sample)]
#       }
#     }
#   }
# }
# ending <- Sys.time()
# ending - start
# save this
# save(df_sample, file = "scratch/sampled_data")
load("scratch/sampled_data")
# convert to a tibble
df_sample <- as_tibble(df_sample)
# plot this
plt_samples <- df_sample %>%
filter(difference == 0.05) %>%
gather(baseline:comparison,
key = "Mu_type",
value = "value") %>%
ggplot(aes(value,
colour = Mu_type,
fill = Mu_type)) +
geom_density(alpha = .3) +
theme_bw() +
facet_grid(difference~n_subs)
plt_samples
# plot together
gridExtra::grid.arrange(plt_check_dists, plt_samples)
# Do hdi stuff
df_sample %>%
filter(difference == 0.05) %>%
mutate(diff = comparison - baseline) %>%
group_by(n_subs) %>%
summarise(mu_diff = mean(diff),
HDI_lower = hdi(diff)[1],
HDI_upper = hdi(diff)[2]) %>%
ggplot(aes(n_subs, mu_diff)) +
geom_line() +
geom_ribbon(aes(ymin = HDI_lower,
ymax = HDI_upper),
alpha = .3)
plt_hdi <- df_sample %>%
filter(difference == 0.05) %>%
mutate(diff = comparison - baseline) %>%
group_by(n_subs) %>%
summarise(mu_diff = mean(diff),
HDI_lower = hdi(diff)[1],
HDI_upper = hdi(diff)[2]) %>%
ggplot(aes(n_subs, mu_diff)) +
geom_line() +
geom_ribbon(aes(ymin = HDI_lower,
ymax = HDI_upper),
alpha = .3)
plt_hdi
head(plt_hdi[["data"]])
point_interval(plt_hdi[["data"]]$mu_diff)
plt_hdi[["data"]] %>%
group_by(n_subs) %>%
summarise(mu = point_interval(mu_diff)$y,
low = point_interval(mu_diff)$ymin,
upp = point_interval(mu_diff)$ymax)
point_interval(plt_hdi[["data"]]$mu_diff)$y
point_interval(plt_hdi[["data"]]$mu_diff)$ymin
head(plt_hdi[["data"]])
plt_hdi <- df_sample %>%
# filter(difference == 0.05) %>%
mutate(diff = comparison - baseline) %>%
group_by(n_subs) %>%
summarise(mu_diff = mean(diff),
HDI_lower = hdi(diff)[1],
HDI_upper = hdi(diff)[2]) %>%
ggplot(aes(n_subs, mu_diff)) +
geom_line() +
geom_ribbon(aes(ymin = HDI_lower,
ymax = HDI_upper),
alpha = .3) +
facet_wrap(~difference)
plt_hdi
# Do hdi stuff
plt_hdi <- df_sample %>%
# filter(difference == 0.05) %>%
mutate(differnce = as.factor(difference)) %>%
mutate(diff = comparison - baseline) %>%
group_by(n_subs, difference) %>%
summarise(mu_diff = mean(diff),
HDI_lower = hdi(diff)[1],
HDI_upper = hdi(diff)[2]) %>%
ggplot(aes(n_subs, mu_diff)) +
geom_line() +
geom_ribbon(aes(ymin = HDI_lower,
ymax = HDI_upper),
alpha = .3) +
facet_wrap(~difference)
plt_hdi
plt_hdi <- df_sample %>%
filter(difference == 0.05) %>%
mutate(diff = comparison - baseline) %>%
group_by(n_subs) %>%
summarise(mu_diff = mean(diff),
HDI_lower = hdi(diff)[1],
HDI_upper = hdi(diff)[2]) %>%
ggplot(aes(n_subs, mu_diff)) +
geom_line() +
geom_ribbon(aes(ymin = HDI_lower,
ymax = HDI_upper),
alpha = .3)
plt_hdi
plt_check_dists <- tibble(x_vals = rep(x, length(c(mu2, 0))),
diff = rep(c(mu2, 0), each = length(x)),
base = mu1,
var = var1,
alpha = get_shape_beta(base + diff, var)$alpha,
beta = get_shape_beta(base + diff, var)$beta,
p = dbeta(x_vals, alpha, beta)) %>%
ggplot(aes(x_vals*2 - 1, p,
colour = as.factor(diff))) +
geom_point() +
theme_bw()
plt_check_dists
temp <- c(1,2,3,4,5)
mean(temp)
temp <- tibble(n = seq(1,5,1),
mu = c(1,3,4,5,6))
temp %<>% summarise(mu = mean(mu))
