# setup data
df_sample <- tibble(iter = numeric(),
n_subs = numeric(),
n_trials = numeric(),
dist = character(),
baseline = numeric(),
comparison = numeric())
# split dataset for ease of access...
df_Av <- df_all %>%
filter(condition == "Avatar")
df_Th <- df_all %>%
filter(condition == "Throwing")
for(ii in 1:n_iter){
if(ii %% refresh == 0){
print(paste((ii/n_iter)*100, "%", sep = ""))
}
# loop distances
for(dist in dists){
base_ss <- df_Th %>%
filter(standard_sep == dist)
comp_ss <- df_Av %>%
filter(standard_sep == dist)
for(trials in n_trials){
for(subs in n_subs){
# get random subjects
base_subs <- sample(df_Th$participant, subs, replace = T)
comp_subs <- sample(df_Av$participant, subs, replace = T)
# loop through subjects
base_sample <- c()
comp_sample <- c()
for(sub in 1:subs){
base_sample <- sample(base_ss$norm_pos, trials, replace = T)
comp_sample <- sample(comp_ss$norm_pos, trials, replace = T)
if(sub == subs){
# bind to dataframe
df_sample <- rbind(df_sample, tibble(iter = ii,
n_subs = subs,
n_trials = trials,
dist = dist,
baseline = mean(base_sample),
comparison = mean(comp_sample)))
}
}
}
}
}
}
head(df_sample)
df_sample %>%
gather(baseline:comparison,
key = "condition",
value = "value") %>%
ggplot(aes(value,
fill = condition,
colour = condition)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_grid(n_subs~dist)
# now do some HDI stuff...
df_sample %>%
filter(dist == "10%") %>%
mutate(diff = baseline - comparison) %>%
# gather(baseline:comparison,
#        key = "condition",
#        value = "value") %>%
group_by(n_subs, n_trials, dist) %>%
summarise(mu = mean(diff),
HDI_lower = hdi(diff)[1],
HDI_upper = hdi(diff)[2]) %>%
ggplot(aes(n_subs, mu)) +
# colour = n_trials,
# fill = n_trials)) +
geom_line() +
geom_ribbon(aes(ymin = HDI_lower,
ymax = HDI_upper),
alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
facet_grid(dist~n_trials)
sample(df_Th$participant, subs, replace = T)
base_subs[sub]
setwd("F:/Uni/Github/Breaking_symmetry/power/Money_and_two")
#### Two throw ####
# Maybe use something like the power for Justing and Neli?
# we were expecting people to get better with this manipulation
# but that's on expected accuracy...
# I suppose we could look at "placement" for close vs far?
# So maybe that's a good idea?
#### Library ####
library(tidyverse)
library(tidybayes)
#### Load in data ####
# load in data from the power analysis
# all we need is the placement/standing positions and then we can sample from there
# I guess?
load("data/df_Aberdeen_decisions")
load("data/df_part2_Throw")
# sort out data we need
df_Av <- df_Aberdeen_decisions %>%
filter(truck_perf == "Variable") %>%
# select(participant,
#        delta,
#        placed_x) %>%
mutate(condition = "Avatar") %>%
group_by(participant) %>%
mutate(standard_sep = as.numeric(as.factor(delta))) %>%
ungroup() %>%
mutate(norm_pos = abs(placed_x/delta)) %>%
select(participant, condition, standard_sep, norm_pos) %>%
filter(norm_pos <= 1)
df_Th <- df_part2_Throw %>%
mutate(condition = "Throwing",
participant = Participant) %>%
group_by(participant) %>%
mutate(standard_sep = as.numeric(as.factor(HoopDelta))) %>%
ungroup() %>%
mutate(norm_pos = abs(Subject_Position/HoopDelta)) %>%
select(participant, condition, standard_sep, norm_pos) %>%
filter(norm_pos <= 1)
# combine?
df_all <- rbind(df_Th, df_Av) %>%
mutate(standard_sep = factor(standard_sep, labels = c("90%", "~75%", "~25%", "10%")),
participant = paste(participant, condition, sep = "_"))
#### Plots ####
# just a quick plot for the different groups
df_all %>%
filter(standard_sep %in% c("90%", "10%")) %>%
ggplot(aes(norm_pos,
colour = condition,
fill = condition)) +
geom_density(alpha = .3) +
facet_wrap(~standard_sep)
#### Resampling ####
# now we can resmaple this data using
n_iter <- 1000
n_subs <- seq(2, 28, 2)
n_trials <- c(12, 60)
dists <- c("90%", "10%")
refresh <- n_iter/100
# setup data
df_sample <- tibble(iter = numeric(),
n_subs = numeric(),
n_trials = numeric(),
dist = character(),
baseline = numeric(),
comparison = numeric())
df_Av <- df_all %>%
filter(condition == "Avatar")
df_Th <- df_all %>%
filter(condition == "Throwing")
# loop through
for(ii in 1:n_iter){
if(ii %% refresh == 0){
print(paste((ii/n_iter)*100, "%", sep = ""))
}
# loop distances
for(dist in dists){
base_ss <- df_Th %>%
filter(standard_sep == dist)
comp_ss <- df_Av %>%
filter(standard_sep == dist)
for(trials in n_trials){
for(subs in n_subs){
# get random subjects
base_subs <- sample(df_Th$participant, subs, replace = T)
comp_subs <- sample(df_Av$participant, subs, replace = T)
# loop through subjects
base_sample <- c()
comp_sample <- c()
for(sub in 1:subs){
base_temp <- base_ss %>%
filter(participant == base_subs[sub])
comp_temp <- comp_ss %>%
filter(participant == comp_subs[sub])
base_sample <- sample(base_temp$norm_pos, trials, replace = T)
comp_sample <- sample(comp_temp$norm_pos, trials, replace = T)
if(sub == subs){
# bind to dataframe
df_sample <- rbind(df_sample, tibble(iter = ii,
n_subs = subs,
n_trials = trials,
dist = dist,
baseline = mean(base_sample),
comparison = mean(comp_sample)))
}
}
}
}
}
}
df_sample %>%
filter(dist == "10%") %>%
mutate(diff = baseline - comparison) %>%
# gather(baseline:comparison,
#        key = "condition",
#        value = "value") %>%
group_by(n_subs, n_trials, dist) %>%
summarise(mu = mean(diff),
HDI_lower = hdi(diff)[1],
HDI_upper = hdi(diff)[2]) %>%
ggplot(aes(n_subs, mu)) +
# colour = n_trials,
# fill = n_trials)) +
geom_line() +
geom_ribbon(aes(ymin = HDI_lower,
ymax = HDI_upper),
alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
facet_grid(dist~n_trials)
df_sample %>%
gather(baseline:comparison,
key = "condition",
value = "value") %>%
ggplot(aes(value,
fill = condition,
colour = condition)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_grid(n_subs~dist)
df_sample %>%
filter(dist == "10%") %>%
mutate(diff = baseline - comparison) %>%
# gather(baseline:comparison,
#        key = "condition",
#        value = "value") %>%
group_by(n_subs, n_trials, dist) %>%
summarise(mu = mean(diff),
HDI_lower = hdi(diff)[1],
HDI_upper = hdi(diff)[2]) %>%
ggplot(aes(n_subs, mu)) +
# colour = n_trials,
# fill = n_trials)) +
geom_line() +
geom_ribbon(aes(ymin = HDI_lower,
ymax = HDI_upper),
alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
facet_grid(dist~n_trials)
df_sample %>%
filter(n_subs > 10) %>%
gather(baseline:comparison,
key = "condition",
value = "value") %>%
ggplot(aes(value,
fill = condition,
colour = condition)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_grid(n_subs~dist)
# plot to check
df_sample %>%
filter(n_subs > 20) %>%
gather(baseline:comparison,
key = "condition",
value = "value") %>%
ggplot(aes(value,
fill = condition,
colour = condition)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_grid(n_subs~dist)
n_iter <- 500
n_subs <- seq(2, 28, 2)
n_trials <- c(12, 60)
dists <- c("90%", "10%")
refresh <- n_iter/100
# setup data
df_sample <- tibble(iter = numeric(),
n_subs = numeric(),
n_trials = numeric(),
dist = character(),
baseline = numeric(),
comparison = numeric())
# split dataset for ease of access...
df_Av <- df_all %>%
filter(condition == "Avatar")
df_Th <- df_all %>%
filter(condition == "Throwing")
# loop through
for(ii in 1:n_iter){
if(ii %% refresh == 0){
print(paste((ii/n_iter)*100, "%", sep = ""))
}
# loop distances
for(dist in dists){
base_ss <- df_Th %>%
filter(standard_sep == dist)
comp_ss <- df_Av %>%
filter(standard_sep == dist)
for(trials in n_trials){
for(subs in n_subs){
# get random subjects
base_subs <- sample(df_Th$participant, subs, replace = T)
comp_subs <- sample(df_Av$participant, subs, replace = T)
# loop through subjects
base_sample <- c()
comp_sample <- c()
for(sub in 1:subs){
base_temp <- base_ss %>%
filter(participant == base_subs[sub])
comp_temp <- comp_ss %>%
filter(participant == comp_subs[sub])
base_sample <- c(base_sample,
sample(base_temp$norm_pos, trials, replace = T))
comp_sample <- c(comp_sample,
sample(comp_temp$norm_pos, trials, replace = T))
if(sub == subs){
# bind to dataframe
df_sample <- rbind(df_sample, tibble(iter = ii,
n_subs = subs,
n_trials = trials,
dist = dist,
baseline = mean(base_sample),
comparison = mean(comp_sample)))
}
}
}
}
}
}
# plot to check
df_sample %>%
filter(n_subs > 20) %>%
gather(baseline:comparison,
key = "condition",
value = "value") %>%
ggplot(aes(value,
fill = condition,
colour = condition)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_grid(n_subs~dist)
df_sample %>%
filter(dist == "10%") %>%
mutate(diff = baseline - comparison) %>%
# gather(baseline:comparison,
#        key = "condition",
#        value = "value") %>%
group_by(n_subs, n_trials, dist) %>%
summarise(mu = mean(diff),
HDI_lower = hdi(diff)[1],
HDI_upper = hdi(diff)[2]) %>%
ggplot(aes(n_subs, mu)) +
# colour = n_trials,
# fill = n_trials)) +
geom_line() +
geom_ribbon(aes(ymin = HDI_lower,
ymax = HDI_upper),
alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
facet_grid(dist~n_trials)
rm(list = ls())
#### Two throw ####
# Maybe use something like the power for Justing and Neli?
# we were expecting people to get better with this manipulation
# but that's on expected accuracy...
# I suppose we could look at "placement" for close vs far?
# So maybe that's a good idea?
#### Library ####
library(tidyverse)
library(tidybayes)
#### Load in data ####
# load in data from the power analysis
# all we need is the placement/standing positions and then we can sample from there
# I guess?
load("data/df_Aberdeen_decisions")
load("data/df_part2_Throw")
# sort out data we need
df_Av <- df_Aberdeen_decisions %>%
filter(truck_perf == "Variable") %>%
# select(participant,
#        delta,
#        placed_x) %>%
mutate(condition = "Avatar") %>%
group_by(participant) %>%
mutate(standard_sep = as.numeric(as.factor(delta))) %>%
ungroup() %>%
mutate(norm_pos = abs(placed_x/delta)) %>%
select(participant, condition, standard_sep, norm_pos) %>%
filter(norm_pos <= 1)
df_Th <- df_part2_Throw %>%
mutate(condition = "Throwing",
participant = Participant) %>%
group_by(participant) %>%
mutate(standard_sep = as.numeric(as.factor(HoopDelta))) %>%
ungroup() %>%
mutate(norm_pos = abs(Subject_Position/HoopDelta)) %>%
select(participant, condition, standard_sep, norm_pos) %>%
filter(norm_pos <= 1)
# combine?
df_all <- rbind(df_Th, df_Av) %>%
mutate(standard_sep = factor(standard_sep, labels = c("90%", "~75%", "~25%", "10%")),
participant = paste(participant, condition, sep = "_"))
#### Plots ####
# just a quick plot for the different groups
df_all %>%
filter(standard_sep %in% c("90%", "10%")) %>%
ggplot(aes(norm_pos,
colour = condition,
fill = condition)) +
geom_density(alpha = .3) +
facet_wrap(~standard_sep)
#### Resampling ####
# now we can resmaple this data using
n_iter <- 5000
n_subs <- seq(2, 28, 2)
n_trials <- c(12, 60)
dists <- c("90%", "10%")
refresh <- n_iter/100
# setup data
df_sample <- tibble(iter = numeric(),
n_subs = numeric(),
n_trials = numeric(),
dist = character(),
baseline = numeric(),
comparison = numeric())
# split dataset for ease of access...
df_Av <- df_all %>%
filter(condition == "Avatar")
df_Th <- df_all %>%
filter(condition == "Throwing")
# loop through
for(ii in 1:n_iter){
if(ii %% refresh == 0){
print(paste((ii/n_iter)*100, "%", sep = ""))
}
# loop distances
for(dist in dists){
base_ss <- df_Th %>%
filter(standard_sep == dist)
comp_ss <- df_Av %>%
filter(standard_sep == dist)
for(trials in n_trials){
for(subs in n_subs){
# get random subjects
base_subs <- sample(df_Th$participant, subs, replace = T)
comp_subs <- sample(df_Av$participant, subs, replace = T)
# loop through subjects
base_sample <- c()
comp_sample <- c()
for(sub in 1:subs){
base_temp <- base_ss %>%
filter(participant == base_subs[sub])
comp_temp <- comp_ss %>%
filter(participant == comp_subs[sub])
base_sample <- c(base_sample,
sample(base_temp$norm_pos, trials, replace = T))
comp_sample <- c(comp_sample,
sample(comp_temp$norm_pos, trials, replace = T))
if(sub == subs){
# bind to dataframe
df_sample <- rbind(df_sample, tibble(iter = ii,
n_subs = subs,
n_trials = trials,
dist = dist,
baseline = mean(base_sample),
comparison = mean(comp_sample)))
}
}
}
}
}
}
df_sample %>%
filter(n_subs > 20) %>%
gather(baseline:comparison,
key = "condition",
value = "value") %>%
ggplot(aes(value,
fill = condition,
colour = condition)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_grid(n_subs~dist)
df_sample %>%
filter(dist == "10%") %>%
mutate(diff = baseline - comparison) %>%
# gather(baseline:comparison,
#        key = "condition",
#        value = "value") %>%
group_by(n_subs, n_trials, dist) %>%
summarise(mu = mean(diff),
HDI_lower = hdi(diff)[1],
HDI_upper = hdi(diff)[2]) %>%
ggplot(aes(n_subs, mu)) +
# colour = n_trials,
# fill = n_trials)) +
geom_line() +
geom_ribbon(aes(ymin = HDI_lower,
ymax = HDI_upper),
alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
facet_grid(dist~n_trials)
save(df_sample, file = "scratch/df_sample")
dir()
save(df_sample, file = "scratch/df_sample")
unique(df_sample$iter)
