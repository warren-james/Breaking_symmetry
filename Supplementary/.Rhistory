GambleType_Equal.Disttype_Far =  b_f_e,
GambleType_Unequal.Disttype_Far = b_f_un) %>%
select(.iteration,
GambleType_Equal.Disttype_Close,
GambleType_Unequal.Disttype_Close,
GambleType_Equal.Disttype_Far,
GambleType_Unequal.Disttype_Far) %>%
gather(c(GambleType_Equal.Disttype_Close:GambleType_Unequal.Disttype_Far),
key = "parameter",
value = "estimate") %>%
separate(c(parameter),
into = c("temp1", "temp2"),
sep = "\\.") %>%
separate(temp1,
into = c("remove", "Gamble_Type")) %>%
select(-remove) %>%
separate(temp2,
into = c("remove", "Dist_Type")) %>%
select(-remove)
draws_df <- draws_df %>%
mutate(prop = boot::inv.logit(estimate))
plt_bias <- draws_df %>%
ggplot(aes(prop, colour = Gamble_Type, fill = Gamble_Type)) +
geom_density(alpha = .3)
plt_dist <- draws_df %>%
ggplot(aes(prop, colour = Dist_Type, fill = Dist_Type)) +
geom_density(alpha = .3)
plt_int <- draws_df %>%
ggplot(aes(prop, colour = Gamble_Type, fill = Gamble_Type)) +
geom_density(alpha = .3) +
facet_wrap(~Dist_Type)
gridExtra::grid.arrange(plt_dist, plt_bias, plt_int, ncol = 1)
dummy_real <- brm(
Norm_Dist ~ 0 + c_e + c_un + f_e + f_un + (0 + c_e + c_un + f_e + f_un|Participant),
data = dummy_data,
family = "beta",
prior = dummy_prior,
chains = 1,
iter = R_iter,
warmup = R_iter/2,
sample_prior = "only",
control = R_control)
draws_df <- dummy_real %>%
spread_draws(b_c_e,
b_c_un,
b_f_e,
b_f_un) %>%
mutate(GambleType_Equal.Disttype_Close = b_c_e,
GambleType_Unequal.Disttype_Close = b_c_un,
GambleType_Equal.Disttype_Far =  b_f_e,
GambleType_Unequal.Disttype_Far = b_f_un) %>%
select(.iteration,
GambleType_Equal.Disttype_Close,
GambleType_Unequal.Disttype_Close,
GambleType_Equal.Disttype_Far,
GambleType_Unequal.Disttype_Far) %>%
gather(c(GambleType_Equal.Disttype_Close:GambleType_Unequal.Disttype_Far),
key = "parameter",
value = "estimate") %>%
separate(c(parameter),
into = c("temp1", "temp2"),
sep = "\\.") %>%
separate(temp1,
into = c("remove", "Gamble_Type")) %>%
select(-remove) %>%
separate(temp2,
into = c("remove", "Dist_Type")) %>%
select(-remove)
draws_df <- draws_df %>%
mutate(prop = boot::inv.logit(estimate))
plt_bias <- draws_df %>%
ggplot(aes(prop, colour = Gamble_Type, fill = Gamble_Type)) +
geom_density(alpha = .3)
plt_dist <- draws_df %>%
ggplot(aes(prop, colour = Dist_Type, fill = Dist_Type)) +
geom_density(alpha = .3)
plt_int <- draws_df %>%
ggplot(aes(prop, colour = Gamble_Type, fill = Gamble_Type)) +
geom_density(alpha = .3) +
facet_wrap(~Dist_Type)
gridExtra::grid.arrange(plt_dist, plt_bias, plt_int, ncol = 1)
summary(dummy_real)
dummy_real <- brm(
Norm_Dist ~ 0 + c_e + c_un + f_e + f_un + (0 + c_e + c_un + f_e + f_un|Participant),
data = dummy_data,
family = "beta",
prior = dummy_prior,
chains = 1,
iter = R_iter,
warmup = R_iter/2,
# sample_prior = "only",
control = R_control)
summary(dumm_real)
summary(dummy_real)
Rewards_hdi_Dist <- draws_df %>%
group_by(Dist_Type) %>%
summarise(lower = hdi(prop)[,1],
mu = mean(prop),
upper = hdi(prop)[,2])
Rewards_hdi_Gamble <- draws_df %>%
group_by(Gamble_Type) %>%
summarise(lower = hdci(prop)[,1],
mu = mean(prop),
upper = hdci(prop)[,2])
Rewards_hdi_interaction <- draws_df %>%
group_by(Gamble_Type, Dist_Type) %>%
summarise(lower = hdi(prop)[,1],
mu = mean(prop),
upper = hdi(prop)[,2])
Rewards_hdi_Dist
Rewards_hdi_Gamble
Rewards_hdi_interaction
gridExtra::grid.arrange(plt_dist, plt_bias, plt_int, ncol = 1)
draws_df <- dummy_real %>%
spread_draws(b_c_e,
b_c_un,
b_f_e,
b_f_un) %>%
mutate(GambleType_Equal.Disttype_Close = b_c_e,
GambleType_Unequal.Disttype_Close = b_c_un,
GambleType_Equal.Disttype_Far =  b_f_e,
GambleType_Unequal.Disttype_Far = b_f_un) %>%
select(.iteration,
GambleType_Equal.Disttype_Close,
GambleType_Unequal.Disttype_Close,
GambleType_Equal.Disttype_Far,
GambleType_Unequal.Disttype_Far) %>%
gather(c(GambleType_Equal.Disttype_Close:GambleType_Unequal.Disttype_Far),
key = "parameter",
value = "estimate") %>%
separate(c(parameter),
into = c("temp1", "temp2"),
sep = "\\.") %>%
separate(temp1,
into = c("remove", "Gamble_Type")) %>%
select(-remove) %>%
separate(temp2,
into = c("remove", "Dist_Type")) %>%
select(-remove)
draws_df <- draws_df %>%
mutate(prop = boot::inv.logit(estimate))
plt_bias <- draws_df %>%
ggplot(aes(prop, colour = Gamble_Type, fill = Gamble_Type)) +
geom_density(alpha = .3)
plt_dist <- draws_df %>%
ggplot(aes(prop, colour = Dist_Type, fill = Dist_Type)) +
geom_density(alpha = .3)
plt_int <- draws_df %>%
ggplot(aes(prop, colour = Gamble_Type, fill = Gamble_Type)) +
geom_density(alpha = .3) +
facet_wrap(~Dist_Type)
gridExtra::grid.arrange(plt_dist, plt_bias, plt_int, ncol = 1)
Rewards_hdi_Dist <- draws_df %>%
group_by(Dist_Type) %>%
summarise(lower = hdi(prop)[,1],
mu = mean(prop),
upper = hdi(prop)[,2])
Rewards_hdi_Gamble <- draws_df %>%
group_by(Gamble_Type) %>%
summarise(lower = hdci(prop)[,1],
mu = mean(prop),
upper = hdci(prop)[,2])
Rewards_hdi_interaction <- draws_df %>%
group_by(Gamble_Type, Dist_Type) %>%
summarise(lower = hdi(prop)[,1],
mu = mean(prop),
upper = hdi(prop)[,2])
Rewards_hdi_Dist
Rewards_hdi_Gamble
Rewards_hdi_interaction
rm(list = ls())
dev.off()
# library
library(tidybayes)
library(tidyverse)
library(brms)
library(png)
library(grid)
library(gridExtra)
# functions
# function to extract a legend that is shared accross plots
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
load("../Analyses/Experiment_5_Unequal_Reward/scratch/data/model_data")
source("extract_draws_functions/Reward_draws_noint.R")
df_Rewards <- model_data %>%
group_by(Participant) %>%
mutate(temp = as.numeric(as.factor(Norm_Delta)),
slab_measures = factor(temp, labels = c("90%", "75%", "25%", "10%"))) %>%
select(-temp) %>%
ungroup() %>%
group_by(slab_measures) %>%
mutate(overall_hoop_pos = mean(Norm_Delta))
df_Rewards %>%
ggplot(aes(overall_hoop_pos, Norm_Dist,
colour = Gamble_Type)) +
geom_jitter(alpha = .3,
width = .05,
height = .05) +
facet_wrap(~Participant, ncol = 4) +
scale_x_continuous(expression(paste("Hoop Delta (", Delta, ")")),
breaks = unique(df_Rewards$overall_hoop_pos),
labels = unique(df_Rewards$slab_measures)) +
scale_y_continuous("",
breaks = c(0,1),
labels = c("Centre", "Side")) +
see::scale_color_flat() +
theme_bw() +
theme(
strip.text.x = element_blank(),
legend.position = "bottom",
axis.text.x = element_text(size = 8),
panel.grid.minor.x = element_blank()
)
model_data <- model_data %>%
mutate(close_equal = ifelse(dist_type == "close" & Gamble_Type == "Equal", 1, 0),
close_unequal = ifelse(dist_type == "close" & Gamble_Type == "Unequal", 1, 0),
far_equal = ifelse(dist_type == "far" & Gamble_Type == "Equal", 1, 0),
far_unequal = ifelse(dist_type == "far" & Gamble_Type == "Unequal", 1, 0))
head(model_data)
R_prior <- c(set_prior("student_t(3,0,1)",
class = "b",
coef = "close_equal"),
set_prior("student_t(3,0,1)",
class = "b",
coef = "far_equal"),
set_prior("student_t(3,0,1)",
class = "b",
coef = "close_unequal"),
set_prior("student_t(3,0,1)",
class = "b",
coef = "far_unequal"))
R_iter = 10000
R_control = list(adapt_delta = .99, max_treedepth = 15)
R_iter = 100
Reward_priors <- brm(
Norm_Dist ~ 0 +
close_equal +
close_unequal +
far_equal +
far_unequal +
(0 +
close_equal +
close_unequal +
far_equal +
far_unequal|Participant),
data = model_data,
family = "beta",
prior = R_prior,
chains = 1,
iter = R_iter,
warmup = R_iter/2,
sample_prior = "only",
control = R_control)
summary(Reward_priors)
draws_df <- draws_factor(Rewards_prior)
draws_df <- draws_factor(Reward_priors)
head(draws_df)
draws_df <- draws_df %>%
mutate(prop = boot::inv.logit(estimate))
draws_df %>%
ggplot(aes(prop, colour = Gamble_Type, fill = Gamble_Type)) +
geom_density(alpha = .3) +
facet_wrap(~Dist_Type)
plt_dist <- draws_df %>%
ggplot(aes(prop,
colour = Dist_Type,
fill = Dist_Type)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
guides(colour = guide_legend(title = "Distance Type"),
fill = guide_legend(title = "Distance Type")) +
scale_x_continuous(expression(paste("Normalised ", Delta)))
plt_gamble <- draws_df %>%
ggplot(aes(prop,
colour = Gamble_Type,
fill = Gamble_Type)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
guides(colour = guide_legend(title = "Gamble Type"),
fill = guide_legend(title = "Gamble Type")) +
scale_x_continuous(expression(paste("Normalised ", Delta)))
plt_inter <- draws_df %>%
ggplot(aes(prop,
colour = Gamble_Type,
fill = Gamble_Type)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
guides(colour = guide_legend(title = "Gamble Type"),
fill = guide_legend(title = "Gamble Type")) +
scale_x_continuous("Normalised Position") +
facet_wrap(~Dist_Type)
gridExtra::grid.arrange(plt_dist, plt_gamble, plt_inter)
draws_factor(Reward_priors) %>%
mutate(prop = boot::inv.logit(estimate)) %>%
ggplot(aes(prop,
colour = Gamble_Type,
fill = Gamble_Type)) +
see::scale_color_flat() +
see::scale_fill_flat() +
geom_density(alpha = .3,
kernel = "biweight") +
scale_x_continuous(expression(paste("Normalised ", Delta))) +
guides(colour = guide_legend(title = "Gamble Type"),
fill = guide_legend(title = "Gamble Type")) +
facet_wrap(~Dist_Type) +
theme_bw()
library(bayesplot)
rhat_vals = rhat(Reward_priors)
mcmc_rhat(rhat_vals)
mcmc_rhat_data(rhat_vals)
R_iter = 10000
Reward_m1 <- brm(
Norm_Dist ~ 0 +
close_equal +
close_unequal +
far_equal +
far_unequal +
(0 + close_equal +
close_unequal +
far_equal +
far_unequal|Participant),
data = model_data,
family = "beta",
prior = R_prior,
chains = 1,
iter = R_iter,
warmup = R_iter/2,
control = R_control)
rhat_vals(Reward_m1)
rhat_vals = rhat(Reward_m1)
head(rhat_vals)
mcmc_rhat_data(rhat_vals)
mcmc_rhat(rhat_vals)
rhat_vals = rhat(Reward_m1)
mcmc_rhat(rhat_vals)
check <- mcmc_rhat_data(rhat_vals)
View(check)
mcmc_rhat(rhat_vals) + theme_bw()
x11()
mcmc_rhat(rhat_vals) + theme_bw()
model_data %>%
add_predicted_draws(Reward_m1) %>%
ggplot() +
stat_pointinterval(aes(x = .row, y = ,prediction))
model_data %>%
add_predicted_draws(Reward_m1) %>%
ggplot() +
stat_pointinterval(aes(x = .row, y = .prediction))
x11()
model_data %>%
add_predicted_draws(Reward_m1) %>%
ggplot() +
stat_pointinterval(aes(x = .row, y = .prediction)) +
geom_point(aes(x = .row, y = Norm_dist), colour = "red")
model_data %>%
add_predicted_draws(Reward_m1)
model_data %>%
add_predicted_draws(Reward_m1) %>%
ggplot() +
stat_pointinterval(aes(x = .row, y = .prediction)) +
geom_point(aes(x = .row, y = Norm_Dist), colour = "red")
dev.off()
```{r RewardsParameters, echo = F, include = F}
R_prior <- c(set_prior("student_t(3,0,2)",
class = "b",
coef = "close_equal"),
set_prior("student_t(3,0,2)",
class = "b",
coef = "far_equal"),
set_prior("student_t(3,0,2)",
class = "b",
coef = "close_unequal"),
set_prior("student_t(3,0,2)",
class = "b",
coef = "far_unequal"))
R_iter = 10000
R_control = list(adapt_delta = .99, max_treedepth = 15)
Reward_priors <- brm(
Norm_Dist ~ 0 +
close_equal +
close_unequal +
far_equal +
far_unequal +
(0 + close_equal +
close_unequal +
far_equal +
far_unequal|Participant),
data = model_data,
family = "beta",
prior = R_prior,
chains = 1,
iter = R_iter,
warmup = R_iter/2,
sample_prior = "only",
control = R_control)
draws_factor(Reward_priors) %>%
mutate(prop = boot::inv.logit(estimate)) %>%
ggplot(aes(prop,
colour = Gamble_Type,
fill = Gamble_Type)) +
see::scale_color_flat() +
see::scale_fill_flat() +
geom_density(alpha = .3,
kernel = "biweight") +
scale_x_continuous(expression(paste("Normalised ", Delta))) +
guides(colour = guide_legend(title = "Gamble Type"),
fill = guide_legend(title = "Gamble Type")) +
facet_wrap(~Dist_Type) +
theme_bw()
boot::inv.logit(3)
boot::inv.logit(4)
x <- seq(-4,4,0.1)
plot(x, dstudent_t(x, 3, 0, 1.5))
plot(boot::inv.logit(x), dstudent_t(x, 3, 0, 1.5))
plot(boot::inv.logit(x), dstudent_t(x, 3, 0, 2))
R_prior <- c(set_prior("student_t(3,0,1.5)",
class = "b",
coef = "close_equal"),
set_prior("student_t(3,0,1.5)",
class = "b",
coef = "far_equal"),
set_prior("student_t(3,0,1.5)",
class = "b",
coef = "close_unequal"),
set_prior("student_t(3,0,1.5)",
class = "b",
coef = "far_unequal"))
R_iter = 10000
R_control = list(adapt_delta = .99, max_treedepth = 15)
Reward_priors <- brm(
Norm_Dist ~ 0 +
close_equal +
close_unequal +
far_equal +
far_unequal +
(0 + close_equal +
close_unequal +
far_equal +
far_unequal|Participant),
data = model_data,
family = "beta",
prior = R_prior,
chains = 1,
iter = R_iter,
warmup = R_iter/2,
sample_prior = "only",
control = R_control)
draws_factor(Reward_priors) %>%
mutate(prop = boot::inv.logit(estimate)) %>%
ggplot(aes(prop,
colour = Gamble_Type,
fill = Gamble_Type)) +
see::scale_color_flat() +
see::scale_fill_flat() +
geom_density(alpha = .3,
kernel = "biweight") +
scale_x_continuous(expression(paste("Normalised ", Delta))) +
guides(colour = guide_legend(title = "Gamble Type"),
fill = guide_legend(title = "Gamble Type")) +
facet_wrap(~Dist_Type) +
theme_bw()
R_prior <- c(set_prior("student_t(3,0,1.35)",
class = "b",
coef = "close_equal"),
set_prior("student_t(3,0,1.35)",
class = "b",
coef = "far_equal"),
set_prior("student_t(3,0,1.35)",
class = "b",
coef = "close_unequal"),
set_prior("student_t(3,0,1.35)",
class = "b",
coef = "far_unequal"))
Reward_priors <- brm(
Norm_Dist ~ 0 + close_equal + close_unequal + far_equal + far_unequal +
(0 + close_equal + close_unequal + far_equal + far_unequal|Participant),
data = model_data,
family = "beta",
prior = R_prior,
chains = 1,
iter = R_iter,
warmup = R_iter/2,
sample_prior = "only",
control = R_control)
draws_factor(Reward_priors) %>%
mutate(prop = boot::inv.logit(estimate)) %>%
ggplot(aes(prop,
colour = Gamble_Type,
fill = Gamble_Type)) +
see::scale_color_flat() +
see::scale_fill_flat() +
geom_density(alpha = .3,
kernel = "biweight") +
scale_x_continuous(expression(paste("Normalised ", Delta))) +
guides(colour = guide_legend(title = "Gamble Type"),
fill = guide_legend(title = "Gamble Type")) +
facet_wrap(~Dist_Type) +
theme_bw()
plot(boot::inv.logit(x), dstudent_t(x, 3, 0, 2))
plot(boot::inv.logit(seq(-10,10,0.1)), dstudent_t(seq(-10,10,0.1), 3, 0, 2))
plot(boot::inv.logit(seq(-10,10,0.1)), dstudent_t(seq(-10,10,0.1), 3, 0, 5))
plot(boot::inv.logit(seq(-10,10,0.1)), dstudent_t(seq(-10,10,0.1), 10, 0, 10))
