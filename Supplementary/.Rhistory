d$condition <- "Bias"
# bind
df_part1_bias <- rbind(df_part1_bias, d)
}
colnames(df_part1_bias) <- c("Block",
"Delta",
"Accuracy",
"Participant",
"Condition")
df_part1_bias <- df_part1_bias %>%
drop_na()
results_files <- c("data/clarke_and_hunt/Part1/")
df_part1_orig <- tibble()
# loop
for(f in dir(results_files)){
d <- read.csv(paste(results_files, f, sep = ""), header = F)
subjno <- strsplit(f, '[_.]')
d$participant <- paste(subjno[[1]][1], subjno[[1]][2], sep = "_")
d$condition <- "Symmetric"
# bind
df_part1_orig <- rbind(df_part1_orig, d)
}
colnames(df_part1_orig) <- c("Block",
"Delta",
"Accuracy",
"Participant",
"Condition")
df_part1_orig <- df_part1_orig %>%
drop_na()
# tidy
rm(d, results_files, f, subjno)
#### Load: Part 2 ####
results_files <- c("data/4th_year_prob/Part2/")
df_bias <- tibble()
for(f in dir(results_files)){
d <- read.csv(paste(results_files, f, sep = ""), header = F)
d$participant <- strsplit(f, '[_.]')[[1]][2]
d$condition <- "Bias"
# bind
df_bias <- rbind(df_bias, d)
}
# tidy
rm(f,d)
colnames(df_bias) <- c("Block",
"Delta",
"Fixated_box",
"Accuracy",
"Target_box",
"Participant",
"Condition")
df_bias <- df_bias %>%
drop_na()
# need a separate loop for orig data since there are more columns... which sucks....
results_files <- c("data/clarke_and_hunt/Part2/")
df_orig <- tibble()
for(f in dir(results_files)){
d <- read.csv(paste(results_files, f, sep = ""), header = F)
subjno <- strsplit(f, '[_.]')
d$participant <- paste(subjno[[1]][1], subjno[[1]][2], sep = "_")
d$condition <- "Symmetric"
# bind
df_orig <- rbind(df_orig, d)
}
# tidy
rm(d, subjno, f, results_files)
# rename
colnames(df_orig) <- c("Block",
"Delta",
"Fixated_box",
"Accuracy",
"Participant",
"Condition")
df_orig <- df_orig %>%
drop_na()
#### PRE-processing ####
# general
# rescale delta so all are divided by 450
# helps us with fitting logistic regression
df_part1_bias <- df_part1_bias %>%
mutate(norm_delta = round(Delta/450, digits = 2))
df_part1_orig <- df_part1_orig %>%
mutate(norm_delta = round(Delta/450, digits = 2))
df_bias <- df_bias %>%
mutate(norm_delta = round(Delta/450, digits = 2))
df_orig <- df_orig %>%
mutate(norm_delta = round(Delta/450, digits = 2))
#### PRE: part 1 ####
# get logistic regression results to setup switch points
deltas <- seq(0,2,0.01)
df_bias_pred_acc <- get_acc(df_part1_bias, deltas)
df_orig_pred_acc <- get_acc(df_part1_orig, deltas)
# work out switch points for participants
df_bias_SP <- get_SP(df_bias_pred_acc, .9)
df_orig_SP <- get_SP(df_orig_pred_acc, .75)
# need to work out the "most likely box" for both the orig data and bias
# probably need switch points as well since we want to know "close" and "far"
# sort out centre vs side accuracy to get optimal
# this will assume they look at the most likely box
# sort out bias first
pred_bias_left <- df_bias_pred_acc %>%
mutate(p_l = p,
left_dist = norm_delta) %>%
select(Participant, p_l, left_dist)
pred_bias_right <- df_bias_pred_acc %>%
mutate(p_r = p,
right_dist = norm_delta) %>%
select(Participant, p_r, right_dist)
# merge it all
df_bias <- df_bias %>%
mutate(left_dist = norm_delta * 2,
right_dist = 0) %>%
merge(df_bias_pred_acc) %>%
merge(pred_bias_right) %>%
merge(pred_bias_left) %>%
mutate(Centre = p,
Side = (p_r * .8) + (p_l * .2)) %>%
select(-Target_box,
-p, - p_r, -p_l,
-left_dist,
-right_dist) %>%
merge(df_bias_SP) %>%
mutate(Dist_type = ifelse(norm_delta < SP, "Close", "Far"))
# tidy
rm(pred_bias_left, pred_bias_right)
# sort out orig
pred_orig_left <- df_orig_pred_acc %>%
mutate(p_l = p,
left_dist = norm_delta) %>%
select(Participant, p_l, left_dist)
pred_orig_right <- df_orig_pred_acc %>%
mutate(p_r = p,
right_dist = norm_delta) %>%
select(Participant, p_r, right_dist)
# merge it all
df_orig <- df_orig %>%
mutate(left_dist = norm_delta * 2,
right_dist = 0) %>%
merge(df_orig_pred_acc) %>%
merge(pred_orig_right) %>%
merge(pred_orig_left) %>%
mutate(Centre = p,
Side = (p_r * .5) + (p_l * .5)) %>%
select(-p, - p_r, -p_l,
-left_dist,
-right_dist) %>%
merge(df_orig_SP) %>%
mutate(Dist_type = ifelse(norm_delta < SP, "Close", "Far"))
# tidy
rm(pred_orig_left, pred_orig_right)
#### PRE: part 2 ####
# just look at the max proportion to one of the sides for the conditions?
df_bias_fix <- df_bias %>%
select(Participant, Condition, Dist_type, Fixated_box)
df_orig_fix <- df_orig %>%
select(Participant, Condition, Dist_type, Fixated_box)
df_fix <- rbind(df_bias_fix, df_orig_fix) %>%
mutate(Fixated_box = as.factor(Fixated_box)) %>%
group_by(Participant, Dist_type, Condition) %>%
mutate(n_total = as.factor(n())) %>%
ungroup() %>%
group_by(Participant, Condition, Dist_type, Fixated_box, n_total, .drop = F) %>%
summarise(n_each = n()) %>%
complete(n_total, fill = list(n_total = 1)) %>%
mutate(prop = n_each/as.numeric(n_total)) %>%
ungroup() %>%
mutate(Side = ifelse(Fixated_box == 1, 0, 1)) %>%
group_by(Participant, Dist_type, Side) %>%
mutate(max_prop = max(prop),
box_type = ifelse(Side == 0, "Centre", ifelse(prop == max_prop, "Most", "Least")))
# make a plot of this
df_fix %>%
ggplot(aes(Dist_type, prop,
colour = Condition,
fill = Condition)) +
geom_boxplot(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~box_type)
#### Setup data for resampling ####
sample_bias <- df_bias %>%
select(Participant, Condition, Dist_type, Fixated_box) %>%
mutate(Fixated_box = as.factor(Fixated_box)) %>%
merge(df_fix)
sample_orig <- df_orig %>%
select(Participant, Condition, Dist_type, Fixated_box) %>%
mutate(Fixated_box = as.factor(Fixated_box)) %>%
merge(df_fix)
df_resample <- rbind(sample_orig, sample_bias) %>%
mutate(Most = ifelse(box_type == "Most", 1, 0))
df_resample %>%
group_by(Participant, Condition, Dist_type) %>%
summarise(prop = mean(Most)) %>%
ggplot(aes(prop,
colour = Condition,
fill = Condition)) +
geom_density(alpha = .3) +
facet_wrap(~Dist_type)
save(df_resample, file = "scratch/df_resample")
setwd("F:/Uni/Github/Breaking_symmetry/Supplementary")
load("../power/Prob_match/scratch/df_resample")
head(df_reasmple)
head(df_resample)
unique(df_resample$box_type)
df_resample %>%
mutate(box_type = factor(prop_type, c("Centre", "Most", "Least"))) %>%
ggplot(aes(Dist_type, prop,
fill = Condition,
colour = Condition)) +
geom_boxplot()
df_resample %>%
mutate(box_type = factor(box_type, c("Centre", "Most", "Least"))) %>%
ggplot(aes(Dist_type, prop,
fill = Condition,
colour = Condition)) +
geom_boxplot() +
facet_wrap(~box_type)
df_resample %>%
mutate(box_type = factor(box_type, c("Centre", "Most", "Least"))) %>%
ggplot(aes(Dist_type, prop,
fill = Condition,
colour = Condition)) +
geom_boxplot(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
theme(axis.title.x = element_text("Distance Type")) +
facet_wrap(~box_type)
df_resample %>%
mutate(box_type = factor(box_type, c("Centre", "Most", "Least"))) %>%
ggplot(aes(Dist_type, prop,
fill = Condition,
colour = Condition)) +
geom_boxplot(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
scale_y_continuous("") +
theme(axis.title.y = element_blank()) +
facet_wrap(~box_type)
df_resample %>%
mutate(box_type = factor(box_type, c("Centre", "Most", "Least"))) %>%
ggplot(aes(Dist_type, prop,
fill = Condition,
colour = Condition)) +
geom_boxplot(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
scale_x_discrete("Distance Type") +
theme(axis.title.y = element_blank()) +
facet_wrap(~box_type)
head(df_resample)
head(df_resample)
unique(df_resample$box_type)
# library
library(tidybayes)
library(tidyverse)
df_resample %>%
ungroup() %>%
group_by(Participant, Bias_type, Dist_type) %>%
mutate(centre = ifelse(st_box == "Centre", 1, 0),
ML = ifelse(st_box == "Most", 1, 0),
LL = ifelse(st_box == "Least", 1, 0),
n = n()) %>%
summarise(centre = mean(centre),
ML = mean(ML),
LL = mean(LL)) %>%
gather(centre:LL,
key = "prop_type",
value = "proportion") %>%
mutate(prop_type = factor(prop_type, c("centre", "ML", "LL"),
labels = c("Centre", "Most Likely", "Least Likely")))
head(df_resample)
df_resample %>%
ungroup() %>%
group_by(Participant, Condition, Dist_type) %>%
mutate(centre = ifelse(st_box == "Centre", 1, 0),
ML = ifelse(st_box == "Most", 1, 0),
LL = ifelse(st_box == "Least", 1, 0),
n = n()) %>%
summarise(centre = mean(centre),
ML = mean(ML),
LL = mean(LL)) %>%
gather(centre:LL,
key = "prop_type",
value = "proportion") %>%
mutate(prop_type = factor(prop_type, c("centre", "ML", "LL"),
labels = c("Centre", "Most Likely", "Least Likely")))
f_resample %>%
ungroup() %>%
group_by(Participant, Condition, Dist_type) %>%
mutate(centre = ifelse(box_type == "Centre", 1, 0),
ML = ifelse(box_type == "Most", 1, 0),
LL = ifelse(box_type == "Least", 1, 0),
n = n()) %>%
summarise(centre = mean(centre),
ML = mean(ML),
LL = mean(LL)) %>%
gather(centre:LL,
key = "prop_type",
value = "proportion") %>%
mutate(prop_type = factor(prop_type, c("centre", "ML", "LL"),
labels = c("Centre", "Most Likely", "Least Likely")))
df_resample %>%
ungroup() %>%
group_by(Participant, Condition, Dist_type) %>%
mutate(centre = ifelse(box_type == "Centre", 1, 0),
ML = ifelse(box_type == "Most", 1, 0),
LL = ifelse(box_type == "Least", 1, 0),
n = n()) %>%
summarise(centre = mean(centre),
ML = mean(ML),
LL = mean(LL)) %>%
gather(centre:LL,
key = "prop_type",
value = "proportion") %>%
mutate(prop_type = factor(prop_type, c("centre", "ML", "LL"),
labels = c("Centre", "Most Likely", "Least Likely")))
plt_data <- df_resample %>%
ungroup() %>%
group_by(Participant, Condition, Dist_type) %>%
mutate(centre = ifelse(box_type == "Centre", 1, 0),
ML = ifelse(box_type == "Most", 1, 0),
LL = ifelse(box_type == "Least", 1, 0),
n = n()) %>%
summarise(centre = mean(centre),
ML = mean(ML),
LL = mean(LL)) %>%
gather(centre:LL,
key = "prop_type",
value = "proportion") %>%
mutate(prop_type = factor(prop_type, c("centre", "ML", "LL"),
labels = c("Centre", "Most Likely", "Least Likely")))
head(plt_data)
df_resample %>%
ungroup() %>%
group_by(Participant, Condition, Dist_type) %>%
mutate(centre = ifelse(box_type == "Centre", 1, 0),
ML = ifelse(box_type == "Most", 1, 0),
LL = ifelse(box_type == "Least", 1, 0),
n = n()) %>%
summarise(centre = mean(centre),
ML = mean(ML),
LL = mean(LL)) %>%
gather(centre:LL,
key = "prop_type",
value = "proportion") %>%
mutate(prop_type = factor(prop_type, c("centre", "ML", "LL"),
labels = c("Centre", "Most Likely", "Least Likely"))) %>%
ggplot(aes(Dist_type, proportion,
fill = Condition,
colour = Condition)) +
geom_boxplot(alpha = .3) +
facet_wrap(~Dist_type)
df_resample %>%
ungroup() %>%
group_by(Participant, Condition, Dist_type) %>%
mutate(centre = ifelse(box_type == "Centre", 1, 0),
ML = ifelse(box_type == "Most", 1, 0),
LL = ifelse(box_type == "Least", 1, 0),
n = n()) %>%
summarise(centre = mean(centre),
ML = mean(ML),
LL = mean(LL)) %>%
gather(centre:LL,
key = "prop_type",
value = "proportion") %>%
mutate(prop_type = factor(prop_type, c("centre", "ML", "LL"),
labels = c("Centre", "Most Likely", "Least Likely"))) %>%
ggplot(aes(Dist_type, proportion,
fill = Condition,
colour = Condition)) +
geom_boxplot(alpha = .3) +
facet_wrap(~prop_type)
df_resample %>%
ungroup() %>%
group_by(Participant, Condition, Dist_type) %>%
mutate(centre = ifelse(box_type == "Centre", 1, 0),
ML = ifelse(box_type == "Most", 1, 0),
LL = ifelse(box_type == "Least", 1, 0),
n = n()) %>%
summarise(centre = mean(centre),
ML = mean(ML),
LL = mean(LL)) %>%
gather(centre:LL,
key = "prop_type",
value = "proportion") %>%
mutate(prop_type = factor(prop_type, c("centre", "ML", "LL"),
labels = c("Centre", "Most Likely", "Least Likely"))) %>%
ggplot(aes(Dist_type, proportion,
fill = Condition,
colour = Condition)) +
geom_boxplot(alpha = .3) +
facet_wrap(~prop_type) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
scale_x_discrete("Distance Type") +
theme(axis.title.y = element_blank())
load("../power/Prob_match/scratch/df_sample")
head(df_sample)
df_sample %>%
spread(Condition,
Most)
range(df_sample$n_trials)
library(tidybayes)
library(tidyverse)
library(brms)
df_sample %>%
spread(Condition,
Most) %>%
mutate(diff = Bias - Symmetric) %>%
group_by(n_subs) %>%
summarise(mu = mean(diff),
lower = hdi(diff)[1],
upper = hdi(diff)[2])
head(df_sample)
df_sample %>%
spread(Condition,
Most) %>%
mutate(diff = Bias - Symmetric) %>%
group_by(n_sub) %>%
summarise(mu = mean(diff),
lower = hdi(diff)[1],
upper = hdi(diff)[2])
df_sample %>%
spread(Condition,
Most) %>%
mutate(diff = Bias - Symmetric) %>%
group_by(n_sub) %>%
summarise(mu = mean(diff),
lower = hdi(diff)[1],
upper = hdi(diff)[2]) %>%
ggplot(aes(n_sub, mu)) +
geom_line() +
geom_ribbon(aes(ymin = lower,
ymax = upper),
alpha = .3)
df_resample %>%
ungroup() %>%
group_by(Participant, Condition, Dist_type) %>%
mutate(centre = ifelse(box_type == "Centre", 1, 0),
ML = ifelse(box_type == "Most", 1, 0),
LL = ifelse(box_type == "Least", 1, 0),
n = n()) %>%
summarise(centre = mean(centre),
ML = mean(ML),
LL = mean(LL)) %>%
gather(centre:LL,
key = "prop_type",
value = "proportion") %>%
mutate(prop_type = factor(prop_type, c("centre", "ML", "LL"),
labels = c("Centre", "Most Likely", "Least Likely"))) %>%
ggplot(aes(Dist_type, proportion,
fill = Condition,
colour = Condition)) +
geom_boxplot(alpha = .3) +
facet_wrap(~prop_type) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
scale_x_discrete("Distance Type") +
theme(axis.title.y = element_blank())
range(df_sample$n_sub)
# library
library(tidybayes)
library(tidyverse)
library(brms)
plt_data <- df_resample %>%
ungroup() %>%
group_by(Participant, Condition, Dist_type) %>%
mutate(centre = ifelse(box_type == "Centre", 1, 0),
ML = ifelse(box_type == "Most", 1, 0),
LL = ifelse(box_type == "Least", 1, 0),
n = n()) %>%
summarise(centre = mean(centre),
ML = mean(ML),
LL = mean(LL)) %>%
gather(centre:LL,
key = "prop_type",
value = "proportion") %>%
mutate(prop_type = factor(prop_type, c("centre", "ML", "LL"),
labels = c("Centre", "Most Likely", "Least Likely"))) %>%
ggplot(aes(Dist_type, proportion,
fill = Condition,
colour = Condition)) +
geom_boxplot(alpha = .3) +
facet_wrap(~prop_type) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
scale_x_discrete("Distance Type") +
theme(axis.title.y = element_blank())
# maybe just the hdi stuff?
# do I want to rerun the sim with dist type added in?
plt_resampling <- df_sample %>%
spread(Condition,
Most) %>%
mutate(diff = Bias - Symmetric) %>%
group_by(n_sub) %>%
summarise(mu = mean(diff),
lower = hdi(diff)[1],
upper = hdi(diff)[2]) %>%
ggplot(aes(n_sub, mu)) +
geom_line() +
geom_ribbon(aes(ymin = lower,
ymax = upper),
alpha = .3) +
theme_bw() +
scale_x_continuous("Sample Size") +
scale_y_continuous("Differenc in fixations to more \n likely side (Bias - Symmetric)")
gridExtra::grid.arrange(plt_data, plt_resampling)
