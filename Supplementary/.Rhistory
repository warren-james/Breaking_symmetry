guides(fill = F,
colour = F) +
see::scale_color_flat() +
see::scale_fill_flat()
plt_lines_region <- df_regions %>%
ungroup() %>%
mutate(sep_factor = as.numeric(sep_factor)/as.numeric(max(sep_factor)),
sep_factor = sep_factor/max(sep_factor)) %>%
ggplot(aes(sep_factor, Expected)) +
geom_ribbon(aes(ymin = ymin,
ymax = ymax,
fill = type),
alpha = .3) +
geom_line(aes(group = participant),
alpha = .5) +
geom_line(aes(sep_factor, mu,
colour = type),
linetype = "dashed") +
facet_wrap(~bias_type) +
theme_bw()+
scale_y_continuous("Expected Accuracy") +
scale_x_continuous(expression(Delta[N])) + #"Normalised Delta") +
guides(fill = F,
colour = F) +
see::scale_color_flat() +
see::scale_fill_flat()
plt_lines_region
ggsave("../../Figures/Experiment_4_Prob/region_performance.png",
width = 5.6,
heigh = 3.5)
install.packages("ggsci")
setwd("F:/Uni/Github/Breaking_symmetry/Supplementary")
dir("")
dir()
dir("../")
dir("../power/Money_and_two/scratch/")
load("../power/Money_and_two/scratch/df_sample")
setwd("F:/Uni/Github/Breaking_symmetry/power/Money_and_two")
#### Two throw ####
# Maybe use something like the power for Justing and Neli?
# we were expecting people to get better with this manipulation
# but that's on expected accuracy...
# I suppose we could look at "placement" for close vs far?
# So maybe that's a good idea?
# or we can do something with expected accuracy?
#### Library ####
library(tidyverse)
library(tidybayes)
#### Load in data ####
# load in data from the power analysis
# all we need is the placement/standing positions and then we can sample from there
# I guess?
load("data/df_Aberdeen_decisions")
load("data/df_part2_Throw")
# sort out data we need
df_Av <- df_Aberdeen_decisions %>%
filter(truck_perf == "Variable") %>%
# select(participant,
#        delta,
#        placed_x) %>%
mutate(condition = "Avatar") %>%
group_by(participant) %>%
mutate(standard_sep = as.numeric(as.factor(delta))) %>%
ungroup() %>%
mutate(norm_pos = abs(placed_x/delta)) %>%
select(participant, condition, standard_sep, norm_pos) %>%
filter(norm_pos <= 1)
df_Th <- df_part2_Throw %>%
mutate(condition = "Throwing",
participant = Participant) %>%
group_by(participant) %>%
mutate(standard_sep = as.numeric(as.factor(HoopDelta))) %>%
ungroup() %>%
mutate(norm_pos = abs(Subject_Position/HoopDelta)) %>%
select(participant, condition, standard_sep, norm_pos) %>%
filter(norm_pos <= 1)
# combine?
df_all <- rbind(df_Th, df_Av) %>%
mutate(standard_lab = factor(standard_sep, labels = c("90%", "~75%", "~25%", "10%")),
participant = paste(participant, condition, sep = "_"))
#### Plots ####
# just a quick plot for the different groups
df_all %>%
filter(standard_lab %in% c("90%", "10%")) %>%
ggplot(aes(norm_pos,
colour = condition,
fill = condition)) +
geom_density(alpha = .3) +
facet_wrap(~standard_lab)
# save this
save(df_all, file = "scratch/df_all")
#### Resampling ####
# now we can resmaple this data using
n_iter <- 5000
n_subs <- seq(2, 28, 2)
n_trials <- c(12, 60)
dists <- c("90%", "10%")#c(1, 4)
refresh <- n_iter/100
# setup data
# df_sample <- tibble(iter = numeric(),
#                     n_subs = numeric(),
#                     n_trials = numeric(),
#                     dist = character(),
#                     baseline = numeric(),
#                     comparison = numeric())
# make this a data.table instead
n <- n_iter * length(n_subs) * length(n_trials) * length(dists)
df_sample <- data.table::data.table(iter = rep(0, n),
n_subs = rep(0, n),
n_trials = rep(0, n),
dist_type = rep("", n),
baseline = rep(0, n),
comparison = rep(0, n))
#
# # TODO make this loop quicker by using data.table()
# # split dataset for ease of access...
df_Av <- df_all %>%
filter(condition == "Avatar")
df_Th <- df_all %>%
filter(condition == "Throwing")
# start counter
count <- 0
# loop through
for(ii in 1:n_iter){
if(ii %% refresh == 0){
print(paste((ii/n_iter)*100, "%", sep = ""))
}
# loop distances
for(dist in dists){
base_ss <- df_Th %>%
filter(standard_lab == dist)
comp_ss <- df_Av %>%
filter(standard_lab == dist)
for(trials in n_trials){
for(subs in n_subs){
# get random subjects
base_subs <- sample(df_Th$participant, subs, replace = T)
comp_subs <- sample(df_Av$participant, subs, replace = T)
# loop through subjects
base_sample <- c()
comp_sample <- c()
for(sub in 1:subs){
base_temp <- base_ss %>%
filter(participant == base_subs[sub])
comp_temp <- comp_ss %>%
filter(participant == comp_subs[sub])
base_sample <- c(base_sample,
sample(base_temp$norm_pos, trials, replace = T))
comp_sample <- c(comp_sample,
sample(comp_temp$norm_pos, trials, replace = T))
if(sub == subs){
count <- count + 1
# bind to dataframe
# df_sample <- rbind(df_sample, tibble(iter = ii,
#                                      n_subs = subs,
#                                      n_trials = trials,
#                                      dist = dist,
#                                      baseline = mean(base_sample),
#                                      comparison = mean(comp_sample)))
# input into table
df_sample[count, iter := ii]
df_sample[count, n_subs := subs]
df_sample[count, n_trials := trials]
df_sample[count, dist_type := dist]
df_sample[count, baseline := mean(base_sample)]
df_sample[count, comparison := mean(comp_sample)]
}
}
}
}
}
}
df_sample <- as_tibble(df_sample)
save(df_sample, file = "scratch/df_sample")
rm(list = ls())
setwd("F:/Uni/Github/Breaking_symmetry/Supplementary")
dev.off()
setwd("F:/Uni/Github/Breaking_symmetry/Supplementary")
# library
library(tidybayes)
library(tidyverse)
library(brms)
load("../power/Hoop_size/scratch/sampled_data")
load("../power/Hoop_size/scratch/df_part2")
# functions for getting parameters from a beta dist
mu_beta <- function(a, b){
a/(a + b)
}
phi_beta <- function(a, b){
1/((a*b)/(((a+b)^2)*(a+b+1)))
}
var_beta <- function(a, b){
(a*b)/(((a+b)^2)*(a+b+1))
}
# get shape parameters
get_shape_beta <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
# sort out beta shape
shape_1 <- fitdistrplus::fitdist(df_part2$beta_pos, "beta")
mu1 <- mu_beta(shape_1$estimate[1], shape_1$estimate[2])
var1 <- var_beta(shape_1$estimate[1], shape_1$estimate[2])
shape_1 <- get_shape_beta(mu1, var1)
mu2 <- seq(0.05, .2, 0.05)
x <- seq(0,1,0.0005)
# draw these
df_distributions <- tibble(x_vals = rep(x, length(c(0,mu2))),
base = mu1,
diff = rep(c(0,mu2), each = length(x)),
var = var1,
alpha = get_shape_beta(base + diff, var)$alpha,
beta = get_shape_beta(base + diff, var)$beta,
est_mu = mu_beta(alpha, beta),
est_var = var_beta(alpha, beta),
p = dbeta(x_vals, alpha, beta))
df_distributions %>%
mutate(diff = as.factor(diff)) %>%
ggplot(aes(x_vals, p,
colour = diff)) +
geom_line() +
theme_bw() +
see::scale_color_flat() +
guides(colour = guide_legend("Difference")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom")
View(df_part2)
shape_1
View(df_distributions)
head(df_part2)
df_part2 %>%
ggplot(aes(norm_pos)) +
geom_histogram()
df_part2 %>%
ggplot(aes(norm_pos)) +
geom_histogram(binwidth = 10)
df_part2 %>%
ggplot(aes(norm_pos)) +
geom_histogram(binwidth = .1)
df_part2 %>%
ggplot(aes(norm_pos)) +
geom_histogram(binwidth = .2)
df_part2 %>%
ggplot(aes(norm_pos)) +
geom_histogram(aes(y = ..density..),
binwidth = .2)
df_part2 %>%
mutate(norm_pos = (norm_pos + 1)/2) %>%
ggplot(aes(norm_pos)) +
geom_histogram(aes(y = ..density..),
binwidth = .2)
df_part2 %>%
mutate(norm_pos = (norm_pos + 1)/2) %>%
ggplot(aes(norm_pos)) +
geom_histogram(aes(y = ..density..),
binwidth = .1)
df_distributions %>%
mutate(diff = as.factor(diff)) %>%
ggplot(aes(x_vals, p,
colour = diff)) +
geom_line() +
theme_bw() +
geom_histogram(data = df_part2,
aes(x = (norm_pos + 1)/2,
y = ..density..)) +
see::scale_color_flat() +
guides(colour = guide_legend("Difference")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom")
df_distributions %>%
mutate(diff = as.factor(diff)) %>%
ggplot(aes(x_vals, p)) +
geom_line(aes(colour = diff)) +
theme_bw() +
geom_histogram(data = df_part2,
aes(x = (norm_pos + 1)/2,
y = ..density..)) +
see::scale_color_flat() +
guides(colour = guide_legend("Difference")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom")
df_distributions %>%
mutate(diff = as.factor(diff)) %>%
ggplot(aes(x_vals, p)) +
geom_line(aes(colour = diff)) +
theme_bw() +
geom_histogram(data = df_part2,
aes(x = (norm_pos + 1)/2,
y = ..density..),
binwidth = .1) +
see::scale_color_flat() +
guides(colour = guide_legend("Difference")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom")
df_distributions %>%
mutate(diff = as.factor(diff)) %>%
ggplot(aes(x_vals, p)) +
geom_histogram(data = df_part2,
aes(x = (norm_pos + 1)/2,
y = ..density..),
binwidth = .1,
colour = "blue",
fill = "blue",
alpha = .2) +
geom_line(aes(colour = diff)) +
theme_bw() +
see::scale_color_flat() +
guides(colour = guide_legend("Difference")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom")
df_distributions %>%
mutate(diff = as.factor(diff)) %>%
ggplot(aes(x_vals, p)) +
geom_histogram(data = df_part2,
aes(x = (norm_pos + 1)/2,
y = ..density..),
binwidth = .05,
colour = "blue",
fill = "blue",
alpha = .2) +
geom_line(aes(colour = diff)) +
theme_bw() +
see::scale_color_flat() +
guides(colour = guide_legend("Difference")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom")
df_distributions %>%
mutate(diff = as.factor(diff)) %>%
ggplot(aes(x_vals, p)) +
geom_histogram(data = df_part2,
aes(x = (norm_pos + 1)/2,
y = ..density..),
binwidth = .01,
colour = "blue",
fill = "blue",
alpha = .2) +
geom_line(aes(colour = diff)) +
theme_bw() +
see::scale_color_flat() +
guides(colour = guide_legend("Difference")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom")
df_distributions %>%
mutate(diff = as.factor(diff)) %>%
ggplot(aes(x_vals, p)) +
geom_histogram(data = df_part2,
aes(x = (norm_pos + 1)/2,
y = ..density..),
binwidth = .5,
colour = "blue",
fill = "blue",
alpha = .2) +
geom_line(aes(colour = diff)) +
theme_bw() +
see::scale_color_flat() +
guides(colour = guide_legend("Difference")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom")
df_distributions %>%
mutate(diff = as.factor(diff)) %>%
ggplot(aes(x_vals, p)) +
geom_histogram(data = df_part2,
aes(x = (norm_pos + 1)/2,
y = ..density..),
binwidth = .25,
colour = "blue",
fill = "blue",
alpha = .2) +
geom_line(aes(colour = diff)) +
theme_bw() +
see::scale_color_flat() +
guides(colour = guide_legend("Difference")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom")
df_distributions %>%
mutate(diff = as.factor(diff)) %>%
ggplot(aes(x_vals, p)) +
geom_histogram(data = df_part2,
aes(x = (norm_pos + 1)/2,
y = ..density..),
binwidth = .1,
colour = "blue",
fill = "blue",
alpha = .2) +
geom_line(aes(colour = diff)) +
theme_bw() +
see::scale_color_flat() +
guides(colour = guide_legend("Difference")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom")
load("../power/Hoop_size/scratch/sampled_data")
load("../power/Hoop_size/scratch/df_part2")
# functions for getting parameters from a beta dist
mu_beta <- function(a, b){
a/(a + b)
}
phi_beta <- function(a, b){
1/((a*b)/(((a+b)^2)*(a+b+1)))
}
var_beta <- function(a, b){
(a*b)/(((a+b)^2)*(a+b+1))
}
# get shape parameters
get_shape_beta <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
# sort out beta shape
shape_1 <- fitdistrplus::fitdist(df_part2$beta_pos, "beta")
mu1 <- mu_beta(shape_1$estimate[1], shape_1$estimate[2])
var1 <- var_beta(shape_1$estimate[1], shape_1$estimate[2])
shape_1 <- get_shape_beta(mu1, var1)
mu2 <- seq(0.05, .2, 0.05)
x <- seq(0,1,0.0005)
# draw these
df_distributions <- tibble(x_vals = rep(x, length(c(0,mu2))),
base = mu1,
diff = rep(c(0,mu2), each = length(x)),
var = var1,
alpha = get_shape_beta(base + diff, var)$alpha,
beta = get_shape_beta(base + diff, var)$beta,
est_mu = mu_beta(alpha, beta),
est_var = var_beta(alpha, beta),
p = dbeta(x_vals, alpha, beta))
df_distributions %>%
mutate(diff = as.factor(diff)) %>%
ggplot(aes(x_vals, p)) +
geom_histogram(data = df_part2,
aes(x = (norm_pos + 1)/2,
y = ..density..),
binwidth = .1,
colour = "blue",
fill = "blue",
alpha = .2) +
geom_line(aes(colour = diff)) +
theme_bw() +
see::scale_color_flat() +
guides(colour = guide_legend("Difference")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom")
load("../power/Hoop_size/scratch/sampled_data")
load("../power/Hoop_size/scratch/df_part2")
# functions for getting parameters from a beta dist
mu_beta <- function(a, b){
a/(a + b)
}
phi_beta <- function(a, b){
1/((a*b)/(((a+b)^2)*(a+b+1)))
}
var_beta <- function(a, b){
(a*b)/(((a+b)^2)*(a+b+1))
}
# get shape parameters
get_shape_beta <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
# sort out beta shape
shape_1 <- fitdistrplus::fitdist(df_part2$beta_pos, "beta")
mu1 <- mu_beta(shape_1$estimate[1], shape_1$estimate[2])
var1 <- var_beta(shape_1$estimate[1], shape_1$estimate[2])
shape_1 <- get_shape_beta(mu1, var1)
mu2 <- seq(0.05, .2, 0.05)
x <- seq(0,1,0.0005)
# draw these
df_distributions <- tibble(x_vals = rep(x, length(c(0,mu2))),
base = mu1,
diff = rep(c(0,mu2), each = length(x)),
var = var1,
alpha = get_shape_beta(base + diff, var)$alpha,
beta = get_shape_beta(base + diff, var)$beta,
est_mu = mu_beta(alpha, beta),
est_var = var_beta(alpha, beta),
p = dbeta(x_vals, alpha, beta))
df_distributions %>%
mutate(diff = as.factor(diff)) %>%
ggplot(aes(x_vals, p)) +
geom_histogram(data = df_part2,
aes(x = (norm_pos + 1)/2,
y = ..density..),
binwidth = .1,
colour = "blue",
fill = "blue",
alpha = .2) +
geom_line(aes(colour = diff)) +
theme_bw() +
see::scale_color_flat() +
guides(colour = guide_legend("Difference")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom")
install.packages("png")
plot(seq(1, 100), seq(1,100)^1.5)
points(seq(1, 100), seq(1,100)^1.6)
plot(seq(1, 40), seq(1,100)^1.5, "red")
plot(seq(1, 40), seq(1,40)^1.5, "red")
plot(seq(1, 40), seq(1,40)^1.5)
points(seq(1, 40), seq(1,40)^1.6)
