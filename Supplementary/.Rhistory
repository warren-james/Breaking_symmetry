library(survival)   # survival analysis tools
library(gridExtra)  # arranging plots
# set the theme of plots
theme_set(theme_bw())
# get legend function
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
df_cohorts %>%
group_by(Type) %>%
mutate(n = n()) %>%
ungroup() %>%
group_by(Type, Board, n) %>%
summarise(n2 = n()) %>%
mutate(prop = (n2/n)) %>%
ggplot(aes(
prop,
Board,
colour = Type,
fill = Type)
) +
geom_col(position = "dodge",
alpha = .3) +
scale_x_continuous("Proportion in each Board",
labels = scales::percent_format(accuracy = 1),
breaks = seq(0, .08, .02),
limits = c(0, .08)) +
geom_text(aes(label = paste("= ", round(prop * 100, digits = 1), "%", sep = ""),
hjust = -.1),
position = position_dodge(.9),
size = 2.5) +
see::scale_color_flat() +
see::scale_fill_flat() +
plot_layout(height = unit(c(8), units = c("cm")))
library(tidyverse)  # for data processing
library(xlsx)       # dealing with excel files
library(see)        # colour scheme for figures
library(kableExtra) # for making tables
library(lubridate)  # for dealing with dates
library(rstanarm)   # potential modelling
library(brms)       # potential modelling
library(tidybayes)  # visualising models
library(patchwork)  # Sorting plots
library(survival)   # survival analysis tools
library(gridExtra)  # arranging plots
# set the theme of plots
theme_set(theme_bw())
# get legend function
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
tibble(Variable = c("chi",
"dob",
"uid",
"casenumber",
"sex",
"IndexDate",
"NHSBoard"),
Type = c("Integer",
"Date",
"Integer",
"Integer",
"Integer",
"Date",
"String"),
Description = c("Unique healthcare ID",
"Date of Birth",
"Unique identifier",
"Case number to match with control",
"Sex (0: male, 1: female)",
"Date of first recorded diagnosis",
"NHS board of residency")) %>%
kbl() %>%
kable_material(bootstrap_options = "striped") %>%
kable_styling(font_size = 14,
full_width = F) %>%
# add_header_above(c("Raw Data" = 4, "Model Estimates" = 3)) %>%
row_spec(0, color = "#ECF0F1", background = "#2C3E50") %>%
row_spec(1:6, color = "#2C3E50", background = "#95A5A6") %>%
row_spec(6:7, color = "#2C3E50", background = "#ECF0F1") %>%
column_spec(1, width = "3cm") %>%
column_spec(2, width = "3cm")
tibble(Variable = c("DoD",
"mdeath",
"NHSBoard"),
Type = c("Date",
"String",
"String"),
Description = c("Date of Death",
"Main cause of Death",
"NHS board at time of death")) -> temp
temp %>%
kbl() %>%
kable_material(bootstrap_options = "striped") %>%
kable_styling(font_size = 14,
full_width = F) %>%
# add_header_above(c("Raw Data" = 4, "Model Estimates" = 3)) %>%
row_spec(0, color = "#ECF0F1", background = "#2C3E50") %>%
row_spec(1:nrow(temp), color = "#2C3E50", background = "#ECF0F1") %>%
column_spec(1, width = "3cm") %>%
column_spec(2, width = "3cm")
tibble(Variable = c("cdate",
"clintype",
"cattend",
"op1a",
"dop1a",
"sigfac",
"simdec"),
Type = c("Date",
"Integer",
"Integer",
"String",
"Date",
"Integer",
"Integer"),
Description = c("Date of attendance",
"Attendance type (1:Consultant, 2:Dentist, 3:Nurse, 5:health proffesional)",
"Clinic attendance status (1:Was seen, 2:attend but unseen, 3:did not attend)",
"Main operation",
"Date of main operation",
"significant facility",
"SIMD decile (1 is least deprived)")) %>%
kbl() %>%
kable_material(bootstrap_options = "striped") %>%
kable_styling(font_size = 14,
full_width = F) %>%
# add_header_above(c("Raw Data" = 4, "Model Estimates" = 3)) %>%
row_spec(0, color = "#ECF0F1", background = "#2C3E50") %>%
row_spec(1:7, color = "#2C3E50", background = "#ECF0F1") %>%
column_spec(1, width = "3cm") %>%
column_spec(2, width = "3cm")
tibble(Variable = c("dadmis",
"ddisch",
"conststay",
"admistype",
"admisreas",
"mcon"),
Type = c("Date",
"Date",
"Integer",
"Integer",
"Integer",
"String"),
Description = c("Date of admission",
"Date of Discharge",
"Continuous Stay Marker",
"Admission Type",
"Admission Reason (general reason they were admitted)",
"Main Condition")) -> temp
temp %>%
kbl() %>%
kable_material(bootstrap_options = "striped") %>%
kable_styling(font_size = 14,
full_width = F) %>%
# add_header_above(c("Raw Data" = 4, "Model Estimates" = 3)) %>%
row_spec(0, color = "#ECF0F1", background = "#2C3E50") %>%
row_spec(1:nrow(temp), color = "#2C3E50", background = "#ECF0F1") %>%
column_spec(1, width = "3cm") %>%
column_spec(2, width = "3cm")
tibble(Variable = c("dadmis",
"ddisch",
"conststay",
"admistype",
"admisreas",
"mcon"),
Type = c("Date",
"Date",
"Integer",
"Integer",
"Integer",
"String"),
Description = c("Date of admission",
"Date of Discharge",
"Continuous Stay Marker",
"Admission Type",
"Admission Reason (general reason they were admitted",
"Main Condition")) -> temp
temp %>%
kbl() %>%
kable_material(bootstrap_options = "striped") %>%
kable_styling(font_size = 14,
full_width = F) %>%
# add_header_above(c("Raw Data" = 4, "Model Estimates" = 3)) %>%
row_spec(0, color = "#ECF0F1", background = "#2C3E50") %>%
row_spec(1:nrow(temp), color = "#2C3E50", background = "#ECF0F1") %>%
column_spec(1, width = "3cm") %>%
column_spec(2, width = "3cm")
tibble(Variable = c("dod",
"vital",
"datareg"),
Type = c("Date",
"Integer",
"Date"),
Description = c("Date of Death (as recorded on the SOCRATES system)",
"Living status (1:Alive, 2:Dead, 3:Moved to England/Wales/NI, 4:Moved abroad, 9:Immortal?/not known)",
"Date of registration")) -> temp
temp %>%
kbl() %>%
kable_material(bootstrap_options = "striped") %>%
kable_styling(font_size = 14,
full_width = F) %>%
# add_header_above(c("Raw Data" = 4, "Model Estimates" = 3)) %>%
row_spec(0, color = "#ECF0F1", background = "#2C3E50") %>%
row_spec(1:nrow(temp), color = "#2C3E50", background = "#ECF0F1") %>%
column_spec(1, width = "3cm") %>%
column_spec(2, width = "3cm")
tibble(Variable = c("darrival",
"dtreat",
"dleave",
"attendcat"),
Type = c("Date",
"Date",
"Date",
"Integer"),
Description = c("Date of Arrival",
"Date of Treatment",
"Date of discharge/transfer",
"Attendance categor (1:New, 2:return-planned, 3:return-unplanned, 4:recall)")) -> temp
temp %>%
kbl() %>%
kable_material(bootstrap_options = "striped") %>%
kable_styling(font_size = 14,
full_width = F) %>%
# add_header_above(c("Raw Data" = 4, "Model Estimates" = 3)) %>%
row_spec(0, color = "#ECF0F1", background = "#2C3E50") %>%
row_spec(1:nrow(temp), color = "#2C3E50", background = "#ECF0F1") %>%
column_spec(1, width = "3cm") %>%
column_spec(2, width = "3cm")
tibble(Variable = c("presciptionid",
"dateprescribe",
"drugname"),
Type = c("integer",
"Date",
"String"),
Description = c("Prescription ID...",
"Date of prescription...",
"Drug Name as if appears in the BNF")) -> temp
temp %>%
kbl() %>%
kable_material(bootstrap_options = "striped") %>%
kable_styling(font_size = 14,
full_width = F) %>%
# add_header_above(c("Raw Data" = 4, "Model Estimates" = 3)) %>%
row_spec(0, color = "#ECF0F1", background = "#2C3E50") %>%
row_spec(1:nrow(temp), color = "#2C3E50", background = "#ECF0F1") %>%
column_spec(1, width = "3cm") %>%
column_spec(2, width = "3cm")
# tibble(Variable = c("",
#                     ""),
#        Type = c("",
#                 ""),
#        Description = c("",
#                        "")) -> temp
# temp %>%
#   kbl() %>%
#   kable_material(bootstrap_options = "striped") %>%
#   kable_styling(font_size = 14,
#                 full_width = F) %>%
#   # add_header_above(c("Raw Data" = 4, "Model Estimates" = 3)) %>%
#   row_spec(0, color = "#ECF0F1", background = "#2C3E50") %>%
#   row_spec(1:nrow(temp), color = "#2C3E50", background = "#ECF0F1") %>%
#   column_spec(1, width = "3cm") %>%
#   column_spec(2, width = "3cm")
tibble(Variable = c("drec",
"drep",
"specorig",
"patcat"),
Type = c("Date",
"Date",
"String",
"String"),
Description = c("Date Specimen was received",
"Date results reported",
"Origin of request (GP, hospital, etc.)",
"Patient Category (in-patient, out-patient")) -> temp
temp %>%
kbl() %>%
kable_material(bootstrap_options = "striped") %>%
kable_styling(font_size = 14,
full_width = F) %>%
# add_header_above(c("Raw Data" = 4, "Model Estimates" = 3)) %>%
row_spec(0, color = "#ECF0F1", background = "#2C3E50") %>%
row_spec(1:nrow(temp), color = "#2C3E50", background = "#ECF0F1") %>%
column_spec(1, width = "3cm") %>%
column_spec(2, width = "3cm")
tibble(Variable = c("Date on to CHI Register",
"Date leaves CHI Register"),
Type = c("Date",
"Date"),
Description = c("Registration Date",
"Deregistration Date")) -> temp
temp %>%
kbl() %>%
kable_material(bootstrap_options = "striped") %>%
kable_styling(font_size = 14,
full_width = F) %>%
# add_header_above(c("Raw Data" = 4, "Model Estimates" = 3)) %>%
row_spec(0, color = "#ECF0F1", background = "#2C3E50") %>%
row_spec(1:nrow(temp), color = "#2C3E50", background = "#ECF0F1") %>%
column_spec(1, width = "3cm") %>%
column_spec(2, width = "3cm")
# tidy up
rm(temp)
df_packages <- tibble(Package = c("tidyverse",
"see",
"kableExtra",
"lubridate",
"rstanarm",
"brms",
"tidybayes",
"patchwork",
"survival"),
Use = c("General data processing",
"A nice colour pallette",
"Making Tables",
"Dealing with dates",
"Making models",
"Making models",
"Visualising model outputs",
"Arranging Figures",
"Useful tools for working with survival analysis")) %>%
rowwise() %>%
mutate(Version = packageVersion(Package)) %>%
select(Package, Version, Use) %>%
arrange(Package)
df_packages %>%
kbl() %>%
kable_material(bootstrap_options = "striped") %>%
kable_styling(font_size = 14,
full_width = F) %>%
# add_header_above(c("Raw Data" = 4, "Model Estimates" = 3)) %>%
row_spec(0, color = "#ECF0F1", background = "#2C3E50") %>%
row_spec(1:nrow(df_packages), color = "#2C3E50", background = "#ECF0F1") %>%
column_spec(1, width = "3cm") %>%
column_spec(2, width = "3cm")
rm(df_packages)
# all cohort data
df_cohorts <- read_csv(
"scratch/df_cohorts.csv",
col_types = cols()
)
# visit data
df_visits <- read_csv(
"scratch/df_visits.csv",
col_types = cols()
)
head(df_cohorts)
head(df_visits)
df_excluded <- tibble(
uID = numeric(),     # keep track of the id
Reason = character() # Reason for exclusion
)
plt_age <- df_cohorts %>%
ggplot(aes(Age,
colour = Type,
fill = Type)) +
geom_histogram(aes(y = ..density..),
position = "dodge",
alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat()
df_age_exclude <- df_cohorts %>%
merge(df_cohorts %>%
filter(Type == "Exposed") %>%
select(CaseN, Age) %>%
rename(constAge = Age)) %>%
filter(Type == "Control") %>%
mutate(diffAge = round(constAge - Age, digits = 1),
outOfRange = ifelse(abs(diffAge) > 2, 1, 0)) %>%
select(uID, diffAge, outOfRange)
plt_diff <- df_age_exclude %>%
select(diffAge, outOfRange) %>%
mutate(outOfRange = as.factor(outOfRange)) %>%
ggplot(aes(
diffAge,
colour = outOfRange,
fill = outOfRange
)) +
scale_fill_social_d() +
scale_colour_social_d() +
geom_histogram(alpha = .3,
binwidth = .1) +
scale_x_continuous("Difference in Age",
breaks = c(-2, 0, 2)) +
theme(legend.position = "none")
layout <- c(area(1,1), area(1,2))
plt_age + plt_diff + plot_layout(design = layout,
heights = unit(c(6), c("cm")))
# now the plots are made, add to out exlusion list
df_excluded <- df_excluded %>% rbind(df_age_exclude %>%
filter(outOfRange == 1) %>%
mutate(Reason = "Age") %>%
select(uID, Reason))
Age_excluded <- sum(df_age_exclude$outOfRange) / nrow(df_cohorts %>% filter(Type == "Control"))
df_cohorts %>%
group_by(Type) %>%
summarise(propF = sum(Female/n()))
df_sex_exclude <- df_cohorts %>%
merge(df_cohorts %>%
filter(Type == "Exposed") %>%
select(CaseN, Female) %>%
rename(compSex = Female)) %>%
filter(Type == "Control") %>%
mutate(mismatch = ifelse(Female != compSex, 1, 0)) %>%
select(uID, Female, compSex, mismatch)
df_excluded <- df_excluded %>%
rbind(df_sex_exclude %>%
filter(mismatch == 1) %>%
mutate(Reason = "Sex") %>%
select(uID, Reason))
Sex_excluded <- sum(df_sex_exclude$mismatch)/nrow(df_sex_exclude)
df_cohorts %>%
group_by(Type) %>%
mutate(n = n()) %>%
ungroup() %>%
group_by(Type, Board, n) %>%
summarise(n2 = n()) %>%
mutate(prop = (n2/n)) %>%
ggplot(aes(
prop,
Board,
colour = Type,
fill = Type)
) +
geom_col(position = "dodge",
alpha = .3) +
scale_x_continuous("Proportion in each Board",
labels = scales::percent_format(accuracy = 1),
breaks = seq(0, .08, .02),
limits = c(0, .08)) +
geom_text(aes(label = paste("= ", round(prop * 100, digits = 1), "%", sep = ""),
hjust = -.1),
position = position_dodge(.9),
size = 2.5) +
see::scale_color_flat() +
see::scale_fill_flat() +
plot_layout(height = unit(c(8), units = c("cm")))
setwd("E:/Github/Breaking_symmetry/Supplementary")
knitr::opts_chunk$set(fig.align = "center")
# library
library(tidybayes)
library(tidyverse)
library(brms)
library(png)
library(grid)
library(gridExtra)
library(psyphy)
# functions
# function to extract a legend that is shared accross plots
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
load("../Analyses/Experiment_2_Two_throw/scratch/model_data_pos")
# rename some variables for legibility
model_data_pos <- model_data_pos %>%
mutate(Num_throws = ifelse(Num_throws == "One-Throw", "One", "Two"))
load("../Analyses/Experiment_2_Two_throw/scratch/df_part1")
source("extract_draws_functions/Two_throw_draws_noint.R")
TT_prior <- c(
set_prior("student_t(4,0,.8)", class = "b", coef = "norm_delta"),
set_prior("student_t(4,0,.8)", class = "b", coef = "norm_delta:Num_throwsTwo"),
set_prior("student_t(4,0,.8)", class = "b", coef = "Num_throwsTwo"),
set_prior("student_t(4,0,.8)", class = "b", coef = "Num_throwsOne"))
TT_iter = 10000
TT_control = list(adapt_delta = .99, max_treedepth = 15)
Two_throw_priors <- brm(
abspos ~ 0 + norm_delta * Num_throws + (0 + norm_delta * Num_throws|Participant),
family = "beta",
data = model_data_pos,
prior = TT_prior,
cores = 1,
chains = 1,
iter = TT_iter,
warmup = TT_iter/2,
control = TT_control,
sample_prior = "only")
dir()
save(Two_throw_priors, "TTpriormodel")
save(Two_throw_priors, file = "TTpriormodel")
# get draws
draws_df <- draw_post_delta(Two_throw_priors, model_data_pos)
priors_plt <- draws_df$Draws_df %>%
mutate(prop = boot::inv.logit(estimate),
Dist_type = factor(Dist_type, c("Close", "Mid", "Far"))) %>%
ggplot(aes(prop,colour = Num_throws, fill = Num_throws)) +
see::scale_color_flat() +
see::scale_fill_flat() +
scale_x_continuous(expression(Phi),
limits = c(-.1,1.1),
breaks = seq(0,1,.25)) +
geom_density(kernel = "biweight", alpha = .3) +
facet_wrap(~Dist_type) +
theme_bw() +
guides(fill = guide_legend(title = "No. Throws"),
colour = guide_legend(title = "No. Throws")) +
theme(legend.position = "bottom")
Two_throw_m1 <- brm(
abspos ~ 0 + norm_delta * Num_throws + (0 + norm_delta * Num_throws|Participant),
family = "beta",
data = model_data_pos,
prior = TT_prior,
cores = 1,
chains = 1,
iter = TT_iter,
warmup = TT_iter/2,
control = TT_control)
