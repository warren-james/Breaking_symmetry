ggplot(aes(end_pos, colour = delta,
fill = delta)) +
geom_histogram(alpha = .3) +
geom_vline(aes(xintercept = upper),
linetype = "dashed") +
geom_vline(aes(xintercept = lower),
linetype = "dashed") +
facet_wrap(~delta, scales = "free") +
theme_bw() +
theme(legend.position = "none")
# put together
library(patchwork)
plts <- plt_curve + plt_dist
plts
df_sim %>%
filter(delta > 1) %>%
mutate(lower = delta - target_size,
upper = delta + target_size,
delta = as.factor(delta)) %>%
ggplot(aes(end_pos, colour = delta,
fill = delta)) +
geom_histogram(alpha = .3) +
geom_vline(aes(xintercept = upper),
linetype = "dashed") +
geom_vline(aes(xintercept = lower),
linetype = "dashed") +
facet_wrap(~delta, scales = "free") +
theme_bw() +
theme(legend.position = "none")
plts <- plt_curve + plt_dist
plts
plt_dist <- df_sim %>%
filter(delta > 1) %>%
mutate(lower = delta - target_size,
upper = delta + target_size,
delta = as.factor(delta)) %>%
ggplot(aes(end_pos, colour = delta,
fill = delta)) +
geom_histogram(alpha = .3) +
geom_vline(aes(xintercept = upper),
linetype = "dashed") +
geom_vline(aes(xintercept = lower),
linetype = "dashed") +
facet_wrap(~delta) +#, scales = "free") +
theme_bw() +
theme(legend.position = "none")
# put together
library(patchwork)
plts <- plt_curve + plt_dist
plts
((1*805) + (5 * 1264) + (10 * 106))
((1*805) + (5 * 1264) + (10 * 106)) * 12
((1 * 820) + (5 * 1296) + (10 * 116) + (20 * 223) + (50 * 46))
((1 * 820) + (5 * 1296) + (10 * 116) + (20 * 223) + (50 * 46)) * 12
R.version
cat_base_surv = .5
human_base_surv = .9
human_treatment_surv = .9
cat_treatment_surv = .3
iter = 1000
df_sample <- tibble(indiv_type = character(),
treatment = numeric(),
survive = numeric())
library(tidyverse)
cat_base_surv = .5
human_base_surv = .9
human_treatment_surv = .9
cat_treatment_surv = .3
iter = 1000
df_sample <- tibble(indiv_type = character(),
treatment = numeric(),
survive = numeric())
types <- c("cat", "human")
for(i in 1:iter){
for(type in unique(types)){
for(treat in seq(0,1,1)){
print(treat)
}
}
}
cat_base_surv = .5
human_base_surv = .9
human_treatment_surv = .9
cat_treatment_surv = .3
iter = 1000
df_sample <- tibble(indiv_type = character(),
treatment = numeric(),
survive = numeric())
types <- c("cat", "human")
for(i in 1:iter){
for(type in unique(types)){
for(treat in seq(0,1,1)){
if(treat == 0 & type == "human"){
surv = rbinom(1, 1, human_base_surv)
} else if(treat == 1 & type == "human"){
surv = rbinom(1, 1, human_treatment_surv)
} else if(treat == 0 & type == "cat") {
surv = rbinom(1, 1, cat_base_surv)
} else if(treat == 1 & type == "cat") {
surv = rbinom(1, 1, cat_treatment_surv)
}
df_sample <- rbind(df_sample, tibble(idiv_type = type,
treatment = treat,
survive = surv))
}
}
}
head(df_sample)
df_sample %>%
group_by(treatment) %>%
summarise(mean_surv = mean(survive)) %>%
ggplot(aes(treatment, mean_surv)) +
geom_point()
df_sample %>%
group_by(treatment) %>%
summarise(mean_surv = mean(survive)) %>%
ggplot(aes(treatment, mean_surv)) +
geom_point() +
geom_line()
df_sample %>%
group_by(treatment, indiv_type) %>%
summarise(mean_surv = mean(survive)) +
geom_point() +
geom_line()
head(df_sample)
df_sample %>%
group_by(treatment, idiv_type) %>%
summarise(mean_surv = mean(survive)) +
geom_point() +
geom_line()
df_sample %>%
group_by(treatment, idiv_type) %>%
summarise(mean_surv = mean(survive)) %>%
geom_point() +
geom_line()
df_sample %>%
group_by(treatment, idiv_type) %>%
summarise(mean_surv = mean(survive)) %>%
ggplot(aes(treatment, mean_surv)) +
geom_point() +
geom_line()
df_sample %>%
group_by(treatment, idiv_type) %>%
summarise(mean_surv = mean(survive)) %>%
ungroup() %>%
mutate(idiv_type = as.factor(idiv_type)) %>%
ggplot(aes(treatment, mean_surv)) +
geom_point() +
geom_line()
df_sample %>%
group_by(treatment, idiv_type) %>%
summarise(mean_surv = mean(survive)) %>%
ungroup() %>%
mutate(idiv_type = as.factor(idiv_type)) %>%
ggplot(aes(treatment, mean_surv,
colour = idiv_type)) +
geom_point() +
geom_line()
cat_base_surv = .5
human_base_surv = .5
human_treatment_surv = .9
cat_treatment_surv = .3
iter = 1000
df_sample <- tibble(indiv_type = character(),
treatment = numeric(),
survive = numeric())
types <- c("cat", "human")
for(i in 1:iter){
for(type in unique(types)){
for(treat in seq(0,1,1)){
if(treat == 0 & type == "human"){
surv = rbinom(1, 1, human_base_surv)
} else if(treat == 1 & type == "human"){
surv = rbinom(1, 1, human_treatment_surv)
} else if(treat == 0 & type == "cat") {
surv = rbinom(1, 1, cat_base_surv)
} else if(treat == 1 & type == "cat") {
surv = rbinom(1, 1, cat_treatment_surv)
}
df_sample <- rbind(df_sample, tibble(idiv_type = type,
treatment = treat,
survive = surv))
}
}
}
plt_main <- df_sample %>%
group_by(treatment) %>%
summarise(mean_surv = mean(survive)) %>%
ggplot(aes(treatment, mean_surv)) +
geom_point() +
geom_line()
plt_int <- df_sample %>%
group_by(treatment, idiv_type) %>%
summarise(mean_surv = mean(survive)) %>%
ungroup() %>%
mutate(idiv_type = as.factor(idiv_type)) %>%
ggplot(aes(treatment, mean_surv,
colour = idiv_type)) +
geom_point() +
geom_line()
gridExtra::grid.arrange(plt_main, plt_int)
cat_base_surv = .5
plt_main <- df_sample %>%
group_by(treatment) %>%
summarise(mean_surv = mean(survive)) %>%
ggplot(aes(treatment, mean_surv)) +
geom_point() +
geom_line() +
scale_y_continuous("chance of survival", limits = c(0,1), lables = scales::percent_format(accuracy = 1))
plt_int <- df_sample %>%
group_by(treatment, idiv_type) %>%
summarise(mean_surv = mean(survive)) %>%
ungroup() %>%
mutate(idiv_type = as.factor(idiv_type)) %>%
ggplot(aes(treatment, mean_surv,
colour = idiv_type)) +
geom_point() +
geom_line() +
scale_y_continuous("chance of survival", limits = c(0,1), lables = scales::percent_format(accuracy = 1))
gridExtra::grid.arrange(plt_main, plt_int, ncol = 2)
plt_main <- df_sample %>%
group_by(treatment) %>%
summarise(mean_surv = mean(survive)) %>%
ggplot(aes(treatment, mean_surv)) +
geom_point() +
geom_line() +
scale_y_continuous("chance of survival", limits = c(0,1), labels = scales::percent_format(accuracy = 1))
plt_int <- df_sample %>%
group_by(treatment, idiv_type) %>%
summarise(mean_surv = mean(survive)) %>%
ungroup() %>%
mutate(idiv_type = as.factor(idiv_type)) %>%
ggplot(aes(treatment, mean_surv,
colour = idiv_type)) +
geom_point() +
geom_line() +
scale_y_continuous("chance of survival", limits = c(0,1), labels = scales::percent_format(accuracy = 1))
gridExtra::grid.arrange(plt_main, plt_int, ncol = 2)
plt_main
plt_int
setwd("F:/Uni/Github/Breaking_symmetry/Supplementary")
library(tidyverse)
library(tidybayes)
library(brms)
load("../Analyses/Experiment_5_Unequal_Reward/scratch/data/model_data")
source("extract_draws_functions/Reward_draws_noint.R")
# setup priors
R_prior <- c(set_prior("student_t(3,0,1)",
class = "b",
coef = "dist_typefar"),
set_prior("student_t(3,0,1)",
class = "b",
coef = "dist_typefar:Gamble_TypeUnequal"),
set_prior("student_t(3,0,1)",
class = "b",
coef = "Gamble_TypeUnequal"),
set_prior("student_t(3,0,1)",
class = "b",
coef = "dist_typeclose"))
R_iter = 1000
R_control = list(adapt_delta = .99, max_treedepth = 15)
Reward_priors <- brm(
Norm_Dist ~ 0 + dist_type + Gamble_Type + (Gamble_Type * dist_type) + (0 + dist_type + Gamble_Type + (Gamble_Type * dist_type) | Participant),
data = model_data,
family = "beta",
prior = R_prior,
chains = 1,
iter = R_iter,
warmup = R_iter/2,
sample_prior = "only",
control = R_control)
summary(Reward_priors)$fixed
draws_priors <- draws_factor(Reward_priors) %>%
mutate(prop = boot::inv.logit(estimate))
draws_priors %>%
ggplot(aes(prop,
colour = Gamble_Type,
fill = Gamble_Type)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
guides(colour = guide_legend(title = "Gamble Type"),
fill = guide_legend(title = "Gamble Type")) +
scale_x_continuous("Normalised Position") +
facet_wrap(~Dist_Type)
Reward_priors <- brm(
Norm_Dist ~ 0 + (dist_type + Gamble_Type)^2 + (0 + (dist_type + Gamble_Type)^2 | Participant),
data = model_data,
family = "beta",
prior = R_prior,
chains = 1,
iter = R_iter,
warmup = R_iter/2,
sample_prior = "only",
control = R_control)
summary(Reward_priors)$fixed
draws_priors <- draws_factor(Reward_priors) %>%
mutate(prop = boot::inv.logit(estimate))
draws_priors %>%
ggplot(aes(prop,
colour = Gamble_Type,
fill = Gamble_Type)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
guides(colour = guide_legend(title = "Gamble Type"),
fill = guide_legend(title = "Gamble Type")) +
scale_x_continuous("Normalised Position") +
facet_wrap(~Dist_Type)
rm(list = ls())
dev.off()
setwd("F:/Uni/Github/Breaking_symmetry/Supplementary")
# library
library(tidybayes)
library(tidyverse)
library(brms)
library(png)
library(grid)
library(gridExtra)
# functions
# function to extract a legend that is shared accross plots
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
load("../Analyses/Experiment_2_Two_throw/scratch/model_data_pos")
# rename some variables for legibility
model_data_pos <- model_data_pos %>%
mutate(Num_throws = ifelse(Num_throws == "One-Throw", "One", "Two"))
source("extract_draws_functions/Two_throw_draws_noint.R")
# process
df_TwoThrow <- model_data_pos %>%
group_by(Participant) %>%
mutate(temp = as.numeric(as.factor(HoopDelta)),
slab_measures = factor(temp, labels = c("~90%", "~50% - 1", "~50%", "~50% + 1", "~50% + 2", "~10%"))) %>%
select(-temp) %>%
ungroup() %>%
group_by(slab_measures) %>%
mutate(overall_hoop_pos = mean(HoopDelta))
# make plot
df_TwoThrow %>%
ggplot(aes(overall_hoop_pos, abspos,
colour = Num_throws)) +
geom_jitter(alpha = .2,
width = .2) +
facet_wrap(~Participant, ncol = 6) +
scale_x_continuous(expression(paste("Hoop Delta (", Delta, ")")),
breaks = unique(df_TwoThrow$overall_hoop_pos),
labels = c("C", "+1","-1", "+2", "0", "F")) +
scale_y_continuous("",
breaks = c(0,1),
labels = c("Centre", "Side")) +
see::scale_color_flat() +
theme_bw() +
guides(fill = guide_legend("No. Throws")) +
theme(strip.text.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.text.x = element_text(size = 8),
legend.position = "bottom")
TT_prior <- c(
set_prior("student_t(4,0,.8)", class = "b", coef = "norm_delta"),
set_prior("student_t(4,0,.8)", class = "b", coef = "norm_delta:Num_throwsTwo"),
set_prior("student_t(4,0,.8)", class = "b", coef = "Num_throwsTwo"),
set_prior("student_t(4,0,.8)", class = "b", coef = "Num_throwsOne"))
TT_iter = 100
TT_control = list(adapt_delta = .99, max_treedepth = 15)
Two_throw_priors <- brm(
abspos ~ 0 + norm_delta * Num_throws + (0 + norm_delta * Num_throws|Participant),
family = "beta",
data = model_data_pos,
prior = TT_prior,
cores = 1,
chains = 1,
iter = TT_iter,
warmup = TT_iter/2,
control = TT_control,
sample_prior = "only")
# get draws
draws_df <- draw_post_delta(Two_throw_priors, model_data_pos)
priors_plt <- draws_df$Draws_df %>%
mutate(prop = boot::inv.logit(estimate),
Dist_type = factor(Dist_type, c("Close", "Mid", "Far"))) %>%
ggplot(aes(prop,colour = Num_throws, fill = Num_throws)) +
see::scale_color_flat() +
see::scale_fill_flat() +
scale_x_continuous(expression(paste("Normalised ", Delta))) +
geom_density(kernel = "biweight", alpha = .3) +
facet_wrap(~Dist_type) +
theme_bw() +
guides(fill = guide_legend(title = "No. Throws"),
colour = guide_legend(title = "No. Throws")) +
theme(legend.position = "bottom")
Two_throw_m1 <- brm(
abspos ~ 0 + norm_delta * Num_throws + (0 + norm_delta * Num_throws|Participant),
family = "beta",
data = model_data_pos,
prior = TT_prior,
cores = 1,
chains = 1,
iter = TT_iter,
warmup = TT_iter/2,
control = TT_control,)
summary(Two_throw_m1)$fixed
# get draws
draws <- draw_post_delta(Two_throw_m1, model_data_pos)
# example distributions
plt_examples <- draws$Plots[1][[1]][["data"]] %>%
mutate(Dist_Type = factor(Dist_type, c("Close", "Mid", "Far"))) %>%
ggplot(aes(prop,
colour = Num_Throws,
fill = Num_Throws)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~Dist_Type) +
theme_bw() +
scale_x_continuous(expression(paste("Normalised ", Delta))) +
coord_cartesian(expand = F) +
guides(fill = guide_legend(title = "No. Throws"),
colour = guide_legend(title = "No. Throws")) +
theme(legend.position = "bottom")
# plt_difference
plt_difference <- draws$Plots[3][[1]] +
theme_bw() +
see::scale_color_flat() +
see::scale_fill_flat() +
scale_x_continuous("Difference: One throw - Two throw") +
guides(fill = guide_legend(title = "Distance"),
colour = guide_legend(title = "Distance"))
# show this
# gridExtra::grid.arrange(plt_examples, plt_difference)
TwoThrowLegend <- g_legend(priors_plt)
test <- grid.arrange(arrangeGrob(priors_plt + theme(legend.position = "none"), plt_examples + theme(legend.position = "none")),
TwoThrowLegend, heights=c(10, 1))
priors_plt <- draws_df$Draws_df %>%
mutate(prop = boot::inv.logit(estimate),
Dist_type = factor(Dist_type, c("Close", "Mid", "Far"))) %>%
ggplot(aes(prop,colour = Num_throws, fill = Num_throws)) +
see::scale_color_flat() +
see::scale_fill_flat() +
scale_x_continuous(expression(paste("Normalised ", Delta))) +
geom_density(kernel = "biweight", alpha = .3) +
facet_wrap(~Dist_type) +
theme_bw() +
# guides(fill = guide_legend(title = "No. Throws"),
#        colour = guide_legend(title = "No. Throws")) +
theme(legend.position = "bottom")
plt_examples <- draws$Plots[1][[1]][["data"]] %>%
mutate(Dist_Type = factor(Dist_type, c("Close", "Mid", "Far"))) %>%
ggplot(aes(prop,
colour = Num_Throws,
fill = Num_Throws)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~Dist_Type) +
theme_bw() +
scale_x_continuous(expression(paste("Normalised ", Delta))) +
coord_cartesian(expand = F) +
# guides(fill = guide_legend(title = "No. Throws"),
#        colour = guide_legend(title = "No. Throws")) +
theme(legend.position = "bottom")
test <- grid.arrange(arrangeGrob(priors_plt + theme(legend.position = "none"), plt_examples + theme(legend.position = "none")),
TwoThrowLegend, heights=c(10, 1))
plt_examples
prior_plt
priors_plt
draws$Plots[1][[1]][["data"]] %>%
mutate(Dist_Type = factor(Dist_type, c("Close", "Mid", "Far")))
draws$Plots[1][[1]][["data"]] %>%
mutate(Dist_Type = factor(Dist_type, c("Close", "Mid", "Far"))) %>%
ggplot(aes(prop,
colour = Num_Throws,
fill = Num_Throws)) +
geom_density(alpha = .3)
priors_plt <- draws_df$Draws_df %>%
mutate(prop = boot::inv.logit(estimate),
Dist_type = factor(Dist_type, c("Close", "Mid", "Far"))) %>%
ggplot(aes(prop,colour = Num_throws, fill = Num_throws)) +
see::scale_color_flat() +
see::scale_fill_flat() +
scale_x_continuous(expression(paste("Normalised ", Delta))) +
geom_density(kernel = "biweight", alpha = .3) +
facet_wrap(~Dist_type) +
theme_bw() +
guides(fill = guide_legend(title = "No. Throws"),
colour = guide_legend(title = "No. Throws")) +
theme(legend.position = "bottom")
plt_examples <- draws$Plots[1][[1]][["data"]] %>%
mutate(Dist_Type = factor(Dist_type, c("Close", "Mid", "Far"))) %>%
ggplot(aes(prop,
colour = Num_throws,
fill = Num_throws)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~Dist_Type) +
theme_bw() +
scale_x_continuous(expression(paste("Normalised ", Delta))) +
coord_cartesian(expand = F) +
guides(fill = guide_legend(title = "No. Throws"),
colour = guide_legend(title = "No. Throws")) +
theme(legend.position = "bottom")
test <- grid.arrange(arrangeGrob(priors_plt + theme(legend.position = "none"), plt_examples + theme(legend.position = "none")),
TwoThrowLegend, heights=c(10, 1))
test
grid.arrange(arrangeGrob(priors_plt + theme(legend.position = "none"), plt_examples + theme(legend.position = "none")),
TwoThrowLegend, heights=c(10, 1))
summary(Two_throw_m1)
