cores = 1,
chains = 1
iter = 1000,
warmup = 500)
library(tidyverse)
library(tidybayes)
library(brms)
# Try making a version of the models without the intercept
# First, let's make the Hoop size version
# load in data
load("../Analyses/Experiment_3_Hoop_size/data/model_data")
# set some priors?
HS_m1 <- brm(norm_dist2 ~ 0 + norm_hoop_pos + (norm_hoop_pos|participant),
data = model_data,
family = "beta",
cores = 1,
chains = 1
iter = 1000,
warmup = 500)
HS_m1 <- brm(norm_dist2 ~ 0 + norm_hoop_pos + (norm_hoop_pos|participant),
data = model_data,
family = "beta",
cores = 1,
chains = 1,
iter = 1000,
warmup = 500)
summary(HS_m1)
plot(marginal_effects(HS_m1))
get_prior(HS_m1)
prior_summary(HS_m1)
HS_draw_post <- function(model, data){
close <- min(data$norm_hoop_pos)
mid <- median(data$norm_hoop_pos)
far <- max(data$norm_hoop_pos)
draws_df <- model %>%
spread_draws(b_norm_hoop_pos) %>%
mutate(hoop_Close = close * b_norm_hoop_pos,
hoop_Mid = mid * b_norm_hoop_pos,
hoop_Far = far * b_norm_hoop_pos) %>%
select(.iteration,
hoop_Close,
hoop_Mid,
hoop_Far) %>%
gather(c(hoop_Close:hoop_Far),
key = "parameter",
value = "estimate") %>%
separate(parameter,
into = c("remove", "Distance Type")) %>%
select(-remove)
# estimates
plt_estimates <- draws_df %>%
mutate(prop = boot::inv.logit(estimate),
`Distance Type` = factor(`Distance Type`, c("Close", "Mid", "Far"))) %>%
ggplot(aes(prop,
colour = `Distance Type`,
fill = `Distance Type`)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
scale_x_continuous(expression(paste("Normalised ", Delta))) +
theme_bw()
# amount above .5
prop_above.5 <- draws_df %>%
mutate(above0_5 = ifelse(boot::inv.logit(estimate) > .5, 1, 0)) %>%
summarise(above0_5 = mean(above0_5))
# get hdi
draws_hdi <- draws_df %>%
group_by(`Distance Type`) %>%
mutate(prop = boot::inv.logit(estimate)) %>%
summarise(lower = hdi(prop)[,1],
mean = mean(prop),
upper = hdi(prop)[,2],
med = median(prop))
# overall hdi
draws_hdi_overall <- draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
summarise(lower = hdi(prop)[,1],
mean = mean(prop),
upper = hdi(prop)[,2],
med = median(prop))
Hdi_pos <- list(draws_hdi,
draws_hdi_overall)
output <- list(draws_df,
plt_estimates,
prop_above.5,
Hdi_pos)
names(output) <- c("draws_df",
"plt_estimates",
"Prop_above.5",
"draws_HDI")
return(output)
}
HS_draw_post(HS_m1, model_data)
summary(HS_m1)
get_prior(norm_dist2 ~ 0 + norm_hoop_pos + (norm_hoop_pos|participant),
data = model_data,
family = "beta")
HS_m1 <- brm(norm_dist2 ~ 0 + norm_hoop_pos + (norm_hoop_pos|participant),
data = model_data,
family = "beta",
prior = c(set_prior("student_t(3, 0, 1)",
coef = "norm_hoop_pos",
class = "b")),
cores = 1,
chains = 1,
iter = 1000,
warmup = 500,
sample_prior = "only")
summary(HS_m1)
HS_draw_post(HS_m1, model_data)
close <- min(data$norm_hoop_pos)
mid <- median(data$norm_hoop_pos)
far <- max(data$norm_hoop_pos)
data = model_data
close <- min(data$norm_hoop_pos)
mid <- median(data$norm_hoop_pos)
far <- max(data$norm_hoop_pos)
model_data %>%
group_by(norm_hoop_pos) %>%
summarise(n=n())
check <- model_data %>%
group_by(norm_hoop_pos) %>%
summarise(n=n())
View(check)
load("../Analyses/Experiment_2_Two_throw/scratch/model_data_pos")
rm(list = ls())
load("../Analyses/Experiment_2_Two_throw/scratch/model_data_pos")
head(model_data_pos)
get(
abspos ~ norm_delta * 0 + Num_throws + (norm_delta * Num_throws|Participant),
family = "beta",
data = model_data_pos)
get_prior(
abspos ~ norm_delta * 0 + Num_throws + (norm_delta * Num_throws|Participant),
family = "beta",
data = model_data_pos)
get_prior(
abspos ~ 0 + norm_delta * Num_throws + (norm_delta * Num_throws|Participant),
family = "beta",
data = model_data_pos)
Two_throw_priors <- brm(
abspos ~ 0 + norm_delta * Num_throws + (norm_delta * Num_throws|Participant),
family = "beta",
data = model_data_pos,
prior = my_prior,
cores = 1,
chains = 1,
iter = 1000,
warmup = 500,
# control = list(adapt_delta = .99, max_treedepth = 15),
sample_prior = "only")
my_prior <- c(
set_prior("student_t(4,0,.8)", class = "b", coef = "norm_delta"),
set_prior("student_t(4,0,.8)", class = "b", coef = "norm_delta:Num_throwsTwoMThrows"),
set_prior("student_t(4,0,.8)", class = "b", coef = "Num_throwsTwoMThrows"),
set_prior("student_t(4,0,.8)", class = "b", coef = "Num_throwsOneMThrows")
Two_throw_priors <- brm(
abspos ~ 0 + norm_delta * Num_throws + (norm_delta * Num_throws|Participant),
family = "beta",
data = model_data_pos,
prior = my_prior,
cores = 1,
chains = 1,
iter = 1000,
warmup = 500,
# control = list(adapt_delta = .99, max_treedepth = 15),
sample_prior = "only")
my_prior <- c(
set_prior("student_t(4,0,.8)", class = "b", coef = "norm_delta"),
set_prior("student_t(4,0,.8)", class = "b", coef = "norm_delta:Num_throwsTwoMThrows"),
set_prior("student_t(4,0,.8)", class = "b", coef = "Num_throwsTwoMThrows"),
set_prior("student_t(4,0,.8)", class = "b", coef = "Num_throwsOneMThrows"))
Two_throw_priors <- brm(
abspos ~ 0 + norm_delta * Num_throws + (norm_delta * Num_throws|Participant),
family = "beta",
data = model_data_pos,
prior = my_prior,
cores = 1,
chains = 1,
iter = 1000,
warmup = 500,
# control = list(adapt_delta = .99, max_treedepth = 15),
sample_prior = "only")
get_prior(
abspos ~ 0 + norm_delta * Num_throws + (norm_delta * Num_throws|Participant),
family = "beta",
data = model_data_pos)
my_prior <- c(
set_prior("student_t(4,0,.8)", class = "b", coef = "norm_delta"),
set_prior("student_t(4,0,.8)", class = "b", coef = "norm_delta:Num_throwsTwoMThrows"),
set_prior("student_t(4,0,.8)", class = "b", coef = "Num_throwsTwoMThrows"),
set_prior("student_t(4,0,.8)", class = "b", coef = "Num_throwsOneMThrow"))
Two_throw_priors <- brm(
abspos ~ 0 + norm_delta * Num_throws + (norm_delta * Num_throws|Participant),
family = "beta",
data = model_data_pos,
prior = my_prior,
cores = 1,
chains = 1,
iter = 1000,
warmup = 500,
# control = list(adapt_delta = .99, max_treedepth = 15),
sample_prior = "only")
draw_post_delta <- function(model, data){
close <- min(data$norm_delta)
mid <- median(data$norm_delta)
far <- max(data$norm_delta)
draws_df <- model %>%
spread_draws(b_Num_throwsOneMThrow,
b_norm_delta,
b_Num_throwsTwoMThrows,
`b_norm_delta:Num_throwsTwoMThrows`) %>%
mutate(One_throw = b_Num_throwsOneMThrow,
Norm_delta_OT = b_norm_delta,
Two_throw = b_Num_throwsTwoMThrows,
Norm_delta_TT = `b_norm_delta:Num_throwsTwoMThrows`) %>%
select(-b_Num_throwsOneMThrow,
-b_norm_delta,
-b_Num_throwsTwoMThrows,
-`b_norm_delta:Num_throwsTwoMThrows`) %>%
mutate(hoop_Close.One_throw = One_throw + (close * Norm_delta_OT),
hoop_Mid.One_throw = One_throw + (mid * Norm_delta_OT),
hoop_Far.One_throw = One_throw + (far * Norm_delta_OT),
hoop_Close.Two_throw = One_throw + Two_throw + (close * Norm_delta_TT),
hoop_Mid.Two_throw = One_throw + Two_throw + (mid * Norm_delta_TT),
hoop_Far.Two_throw = One_throw + Two_throw + (far * Norm_delta_TT)) %>%
select(.iteration,
hoop_Close.One_throw,
hoop_Mid.One_throw,
hoop_Far.One_throw,
hoop_Close.Two_throw,
hoop_Mid.Two_throw,
hoop_Far.Two_throw) %>%
gather(c(hoop_Close.One_throw:hoop_Far.Two_throw),
key = "parameter",
value = "estimate") %>%
separate(parameter,
into= c("Dist_type", "Num_throws"),
sep = "\\.") %>%
separate(Dist_type,
into = c("remove", "Dist_type"),
sep = "_") %>%
select(-remove)
# mean_vals
mu_vals <- draws_df %>%
group_by(Dist_type, Num_throws) %>%
summarise(mu = mean(estimate),
med = median(estimate)) %>%
mutate(mu = boot::inv.logit(mu),
med = boot::inv.logit(med))
# estimates
plt_estimates <- draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
ggplot(aes(prop,
colour = Num_throws,
fill = Num_throws)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
scale_x_continuous("Normalised Delta") +
theme_bw() +
coord_cartesian(expand = 0) +
geom_vline(data = mu_vals,
aes(xintercept = mu,
colour = Num_throws),
linetype = "dashed") +
facet_wrap(~Dist_type)
# get diff
# overall
diff_overall <- draws_df %>%
group_by(.iteration, Num_throws) %>%
summarise(estimate = boot::inv.logit(mean(estimate))) %>%
spread(Num_throws, estimate) %>%
ungroup() %>%
mutate(diff = One_throw - Two_throw)
above0_overall <- diff_overall %>%
mutate(above0 = ifelse(diff > 0,1,0)) %>%
summarise(above0 = mean(above0))
plt_diff_over <- diff_overall %>%
ggplot(aes(diff)) +
geom_density(colour = "blue",
fill = "blue",
alpha = .3)
# by dist_type
diff_dist_type <- draws_df %>%
mutate(estimate = boot::inv.logit(estimate)) %>%
spread(Num_throws, estimate) %>%
ungroup() %>%
mutate(diff = One_throw - Two_throw)
plt_diff_dist <- diff_dist_type %>%
ggplot(aes(diff,
colour = Dist_type,
fill = Dist_type)) +
geom_density(alpha = .3)
above0_dist <- diff_dist_type %>%
group_by(Dist_type) %>%
mutate(above0 = ifelse(diff > 0,1,0)) %>%
summarise(above0 = mean(above0))
# get hdi of diff
# overall
draws_hdi_overall <- draws_df %>%
group_by(Num_throws) %>%
mutate(prop = boot::inv.logit(estimate)) %>%
summarise(lower = hdi(prop)[,1],
mean = mean(prop),
upper = hdi(prop)[,2],
med = median(prop))
draws_hdi_diff_overall <- diff_overall %>%
summarise(lower = hdi(diff)[,1],
mean = mean(diff),
upper = hdi(diff)[,2])
# dist_type
draws_hdi_dist <- draws_df %>%
group_by(Num_throws, Dist_type) %>%
mutate(prop = boot::inv.logit(estimate)) %>%
summarise(lower = hdi(prop)[,1],
mean = mean(prop),
upper = hdi(prop)[,2],
med = median(prop))
draws_hdi_diff_dist <- diff_dist_type %>%
group_by(Dist_type) %>%
summarise(lower = hdi(diff)[,1],
mean = mean(diff),
upper = hdi(diff)[,2])
plts <- list(plt_estimates,
plt_diff_over,
plt_diff_dist)
hdis <- list(draws_hdi_overall,
draws_hdi_diff_overall,
draws_hdi_dist,
draws_hdi_diff_dist)
above0 <- list(above0_overall,
above0_dist)
output <- list(draws_df,
plts,
hdis,
above0)
names(output) <- c("Draws_df",
"Plots",
"HDIs",
"Above_0")
return(output)
}
draw_post_delta(Two_throw_priors, model_data_pos)
draw_post_delta <- function(model, data){
close <- min(data$norm_delta)
mid <- median(data$norm_delta)
far <- max(data$norm_delta)
draws_df <- model %>%
spread_draws(b_Num_throwsOneMThrow,
b_norm_delta,
b_Num_throwsTwoMThrows,
`b_norm_delta:Num_throwsTwoMThrows`) %>%
mutate(One_throw = b_Num_throwsOneMThrow,
Norm_delta_OT = b_norm_delta,
Two_throw = b_Num_throwsTwoMThrows,
Norm_delta_TT = `b_norm_delta:Num_throwsTwoMThrows`) %>%
select(-b_Num_throwsOneMThrow,
-b_norm_delta,
-b_Num_throwsTwoMThrows,
-`b_norm_delta:Num_throwsTwoMThrows`) %>%
mutate(hoop_Close.One_throw = One_throw + (close * Norm_delta_OT),
hoop_Mid.One_throw = One_throw + (mid * Norm_delta_OT),
hoop_Far.One_throw = One_throw + (far * Norm_delta_OT),
hoop_Close.Two_throw = Two_throw + (close * Norm_delta_TT),
hoop_Mid.Two_throw = Two_throw + (mid * Norm_delta_TT),
hoop_Far.Two_throw = Two_throw + (far * Norm_delta_TT)) %>%
select(.iteration,
hoop_Close.One_throw,
hoop_Mid.One_throw,
hoop_Far.One_throw,
hoop_Close.Two_throw,
hoop_Mid.Two_throw,
hoop_Far.Two_throw) %>%
gather(c(hoop_Close.One_throw:hoop_Far.Two_throw),
key = "parameter",
value = "estimate") %>%
separate(parameter,
into= c("Dist_type", "Num_throws"),
sep = "\\.") %>%
separate(Dist_type,
into = c("remove", "Dist_type"),
sep = "_") %>%
select(-remove)
# mean_vals
mu_vals <- draws_df %>%
group_by(Dist_type, Num_throws) %>%
summarise(mu = mean(estimate),
med = median(estimate)) %>%
mutate(mu = boot::inv.logit(mu),
med = boot::inv.logit(med))
# estimates
plt_estimates <- draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
ggplot(aes(prop,
colour = Num_throws,
fill = Num_throws)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
scale_x_continuous("Normalised Delta") +
theme_bw() +
coord_cartesian(expand = 0) +
geom_vline(data = mu_vals,
aes(xintercept = mu,
colour = Num_throws),
linetype = "dashed") +
facet_wrap(~Dist_type)
# get diff
# overall
diff_overall <- draws_df %>%
group_by(.iteration, Num_throws) %>%
summarise(estimate = boot::inv.logit(mean(estimate))) %>%
spread(Num_throws, estimate) %>%
ungroup() %>%
mutate(diff = One_throw - Two_throw)
above0_overall <- diff_overall %>%
mutate(above0 = ifelse(diff > 0,1,0)) %>%
summarise(above0 = mean(above0))
plt_diff_over <- diff_overall %>%
ggplot(aes(diff)) +
geom_density(colour = "blue",
fill = "blue",
alpha = .3)
# by dist_type
diff_dist_type <- draws_df %>%
mutate(estimate = boot::inv.logit(estimate)) %>%
spread(Num_throws, estimate) %>%
ungroup() %>%
mutate(diff = One_throw - Two_throw)
plt_diff_dist <- diff_dist_type %>%
ggplot(aes(diff,
colour = Dist_type,
fill = Dist_type)) +
geom_density(alpha = .3)
above0_dist <- diff_dist_type %>%
group_by(Dist_type) %>%
mutate(above0 = ifelse(diff > 0,1,0)) %>%
summarise(above0 = mean(above0))
# get hdi of diff
# overall
draws_hdi_overall <- draws_df %>%
group_by(Num_throws) %>%
mutate(prop = boot::inv.logit(estimate)) %>%
summarise(lower = hdi(prop)[,1],
mean = mean(prop),
upper = hdi(prop)[,2],
med = median(prop))
draws_hdi_diff_overall <- diff_overall %>%
summarise(lower = hdi(diff)[,1],
mean = mean(diff),
upper = hdi(diff)[,2])
# dist_type
draws_hdi_dist <- draws_df %>%
group_by(Num_throws, Dist_type) %>%
mutate(prop = boot::inv.logit(estimate)) %>%
summarise(lower = hdi(prop)[,1],
mean = mean(prop),
upper = hdi(prop)[,2],
med = median(prop))
draws_hdi_diff_dist <- diff_dist_type %>%
group_by(Dist_type) %>%
summarise(lower = hdi(diff)[,1],
mean = mean(diff),
upper = hdi(diff)[,2])
plts <- list(plt_estimates,
plt_diff_over,
plt_diff_dist)
hdis <- list(draws_hdi_overall,
draws_hdi_diff_overall,
draws_hdi_dist,
draws_hdi_diff_dist)
above0 <- list(above0_overall,
above0_dist)
output <- list(draws_df,
plts,
hdis,
above0)
names(output) <- c("Draws_df",
"Plots",
"HDIs",
"Above_0")
return(output)
}
draw_post_delta(Two_throw_priors, model_data_pos)
Two_throw_priors <- brm(
abspos ~ 0 + norm_delta * Num_throws + (norm_delta * Num_throws|Participant),
family = "beta",
data = model_data_pos,
prior = my_prior,
cores = 1,
chains = 1,
iter = 10000,
warmup = 5000,
control = list(adapt_delta = .99, max_treedepth = 15),
sample_prior = "only")
test <- draw_post_delta(Two_throw_priors, model_data_pos)
test$Plots[1]
101 * 1000
Two_throw_m1 <- brm(
abspos ~ 0 + norm_delta * Num_throws + (norm_delta * Num_throws|Participant),
family = "beta",
data = model_data_pos,
prior = my_prior,
cores = 1,
chains = 1,
iter = 10000,
warmup = 5000,
control = list(adapt_delta = .99, max_treedepth = 15))
6400/60
test <- draw_post_delta(Two_throw_m1, model_data_pos)
test$Plots[1]
