n_subs <- seq(3, 25, 2)
n_trials <- 72
n <- length(diff_sample) * n_iter * length(n_subs)
df_resample <- data.table::data.table(iter = rep(0, n),
increase = rep(0, n),
n_subs = rep(0, n),
n_trial = rep(0, n),
base = rep(0, n),
comp = rep(0, n))
# loop
count <- 1
for(ii in 1:n_iter){
for(inc in diff_sample){
for(subN in n_subs){
subs <- sample(unique(df_distributions$participant), subN, replace = T)
baseline <- c()
comparison <- c()
for(sub_iter in 1:length(subs)){
base_a <- df_distributions$alpha[df_distributions$participant == subs[sub_iter] &
df_distributions$increase == 0]
base_b <- df_distributions$beta[df_distributions$participant == subs[sub_iter] &
df_distributions$increase == 0]
comp_a <- df_distributions$alpha[df_distributions$participant == subs[sub_iter] &
df_distributions$increase == inc]
comp_b <- df_distributions$beta[df_distributions$participant == subs[sub_iter] &
df_distributions$increase == inc]
baseline <- c(baseline, rbeta(n_trials, base_a, base_b))
comparison <- c(comparison, rbeta(n_trials, comp_a, comp_b))
}
df_resample[count, iter := ii]
df_resample[count, increase := inc]
df_resample[count, n_subs := subN]
df_resample[count, n_trial := n_trials]
df_resample[count, base := mean(baseline)]
df_resample[count, comp := mean(comparison)]
count <- count + 1
}
}
if(ii %% n_iter/100) {
print(paste((ii/n_iter)*100, "% complete"))
}
}
1 %% 1000
1 %% 100
2 %% 100
3 %% 100
4 %% 100
5 %% 100
10 %% 100
11 %% 100
100 %% 1
100 %% 2
100 %% 3
100 %% 4
100 %% 5
100 %% 6
100 %% 7
100 %% 8
100 %% 9
100 %% 10
100 %% 11
100 %% 12
10 %% 1
10 %% 2
10 %% 3
10 %% 4
10 %% 5
10 %% 6
10 %% 7
10 %% 8
10 %% 9
10 %% 10
10 %% 11
10 %% 12
10 %% 13
10 %% 115
10 %% 110
10 %% 20
diff_sample <- seq(.05, .2, .05)
n_iter <- 1000
n_subs <- seq(3, 25, 2)
n_trials <- 72
n <- length(diff_sample) * n_iter * length(n_subs)
df_resample <- data.table::data.table(iter = rep(0, n),
increase = rep(0, n),
n_subs = rep(0, n),
n_trial = rep(0, n),
base = rep(0, n),
comp = rep(0, n))
# loop
count <- 1
for(ii in 1:n_iter){
for(inc in diff_sample){
for(subN in n_subs){
subs <- sample(unique(df_distributions$participant), subN, replace = T)
baseline <- c()
comparison <- c()
for(sub_iter in 1:length(subs)){
base_a <- df_distributions$alpha[df_distributions$participant == subs[sub_iter] &
df_distributions$increase == 0]
base_b <- df_distributions$beta[df_distributions$participant == subs[sub_iter] &
df_distributions$increase == 0]
comp_a <- df_distributions$alpha[df_distributions$participant == subs[sub_iter] &
df_distributions$increase == inc]
comp_b <- df_distributions$beta[df_distributions$participant == subs[sub_iter] &
df_distributions$increase == inc]
baseline <- c(baseline, rbeta(n_trials, base_a, base_b))
comparison <- c(comparison, rbeta(n_trials, comp_a, comp_b))
}
df_resample[count, iter := ii]
df_resample[count, increase := inc]
df_resample[count, n_subs := subN]
df_resample[count, n_trial := n_trials]
df_resample[count, base := mean(baseline)]
df_resample[count, comp := mean(comparison)]
count <- count + 1
}
}
if(ii %% n_iter/10) {
print(paste((ii/n_iter)*100, "% complete"))
}
}
df_resample %>%
filter(increase == 0.05) %>%
group_by(n_subs) %>%
mutate(diff = comp - base) %>%
summarise(mu = mean(diff),
lower = hdi(diff)[1],
upper = hdi(diff)[2]) %>%
ggplot(aes(n_subs, mu)) +
geom_line() +
geom_ribbon(aes(ymin = lower,
ymax = upper),
alpha = .3) +
scale_x_continuous("Sample Size") +
theme_bw() +
theme(axis.title.y = element_blank())
library(tidybayes)
df_resample %>%
filter(increase == 0.05) %>%
group_by(n_subs) %>%
mutate(diff = comp - base) %>%
summarise(mu = mean(diff),
lower = hdi(diff)[1],
upper = hdi(diff)[2]) %>%
ggplot(aes(n_subs, mu)) +
geom_line() +
geom_ribbon(aes(ymin = lower,
ymax = upper),
alpha = .3) +
scale_x_continuous("Sample Size") +
theme_bw() +
theme(axis.title.y = element_blank())
for(ii in 1:1000){
if(ii %% 1000){
print(ii)
}
}
for(ii in 1:1000){
if(ii %% refresh == 0){
print(paste((ii/n_iter)*100, "%", sep = ""))
}
}
refresh <- n_iter/100
for(ii in 1:1000){
if(ii %% refresh == 0){
print(paste((ii/n_iter)*100, "%", sep = ""))
}
}
rm(list = ls()
)
# idea for power analysis
load("../power/Hoop_size/scratch/df_part2")
# functions for getting parameters from a beta dist
mu_beta <- function(a, b){
a/(a + b)
}
phi_beta <- function(a, b){
1/((a*b)/(((a+b)^2)*(a+b+1)))
}
var_beta <- function(a, b){
(a*b)/(((a+b)^2)*(a+b+1))
}
# get shape parameters
get_shape_beta <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
# Need to sample each participant and get parameters for them
temp <- df_part2 %>%
group_by(Participant) %>%
summarise(a = fitdistrplus::fitdist(beta_pos, "beta")$estimate[1],
b = fitdistrplus::fitdist(beta_pos, "beta")$estimate[2])
mus <- seq(0, .2, .05)
df_distributions <- tibble(participant = rep(temp$Participant, each = length(mus)),
og_as = rep(temp$a, each = length(mus)),
og_bs = rep(temp$b, each = length(mus)),
og_mu = mu_beta(og_as, og_bs),
og_var = var_beta(og_as, og_bs),
increase = rep(mus, length(temp$a))) %>%
mutate(mu = og_mu + increase,
var = og_var,
alpha = get_shape_beta(mu, var)$alpha,
beta = get_shape_beta(mu, var)$beta) %>%
select(participant, increase, mu, var, alpha, beta)
# maybe some plots?
# need to setup a list for the plots
plt_list <- list()
x <- seq(.01,1-.01,.01)
count <- 1
for(subj in unique(df_distributions$participant)){
temp_part2 <- df_part2 %>%
filter(Participant == subj)
temp_dist <- tibble()
for(inc in unique(df_distributions$increase)) {
temp_inc <- df_distributions %>%
filter(participant == subj,
increase == inc)
temp_dist <- rbind(temp_dist, tibble(participant = subj,
increase = inc,
x = x,
y = dbeta(x, temp_inc$alpha, temp_inc$beta)))
}
temp_dist <- temp_dist %>%
mutate(increase = as.factor(increase))
plt <- temp_part2 %>%
ggplot(aes(beta_pos)) +
geom_histogram(aes(y = ..density..),
alpha = .3,
colour = "blue",
fill = "blue",
binwidth = .1) +
geom_line(data = temp_dist,
aes(x, y, colour = increase)) +
theme_bw() +
see::scale_color_flat()
plt_list[[count]] <- plt
count <- count + 1
}
# tidy
rm(subj, inc, temp_part2, temp_dist, temp_inc, x, count, mus, temp)
cowplot::plot_grid(plotlist = plt_list)
# sampling
# simulate some participants data
# start with a few iters then increase
diff_sample <- seq(.05, .2, .05)
n_iter <- 1000
n_subs <- seq(3, 25, 2)
n_trials <- 72
n <- length(diff_sample) * n_iter * length(n_subs)
refresh <- n_iter/100
df_resample <- data.table::data.table(iter = rep(0, n),
increase = rep(0, n),
n_subs = rep(0, n),
n_trial = rep(0, n),
base = rep(0, n),
comp = rep(0, n))
# loop
count <- 1
for(ii in 1:n_iter){
for(inc in diff_sample){
for(subN in n_subs){
subs <- sample(unique(df_distributions$participant), subN, replace = T)
baseline <- c()
comparison <- c()
for(sub_iter in 1:length(subs)){
base_a <- df_distributions$alpha[df_distributions$participant == subs[sub_iter] &
df_distributions$increase == 0]
base_b <- df_distributions$beta[df_distributions$participant == subs[sub_iter] &
df_distributions$increase == 0]
comp_a <- df_distributions$alpha[df_distributions$participant == subs[sub_iter] &
df_distributions$increase == inc]
comp_b <- df_distributions$beta[df_distributions$participant == subs[sub_iter] &
df_distributions$increase == inc]
baseline <- c(baseline, rbeta(n_trials, base_a, base_b))
comparison <- c(comparison, rbeta(n_trials, comp_a, comp_b))
}
df_resample[count, iter := ii]
df_resample[count, increase := inc]
df_resample[count, n_subs := subN]
df_resample[count, n_trial := n_trials]
df_resample[count, base := mean(baseline)]
df_resample[count, comp := mean(comparison)]
count <- count + 1
}
}
if(ii %% refresh == 0){
print(paste((ii/n_iter)*100, "%", sep = ""))
}
}
# make a plot of this?
# df_resample %>%
#   mutate(diff = comp - base,
#          n_subs = as.factor(n_subs)) %>%
#   ggplot(aes(diff, colour = n_subs, fill = n_subs)) +
#   geom_density(alpha = .2) +
#   facet_wrap(~increase) +
#   theme_bw() +
#   see::scale_color_flat() +
#   see::scale_fill_flat()
df_resample %>%
filter(increase == 0.05) %>%
group_by(n_subs) %>%
mutate(diff = comp - base) %>%
summarise(mu = mean(diff),
lower = hdi(diff)[1],
upper = hdi(diff)[2]) %>%
ggplot(aes(n_subs, mu)) +
geom_line() +
geom_ribbon(aes(ymin = lower,
ymax = upper),
alpha = .3) +
scale_x_continuous("Sample Size") +
theme_bw() +
theme(axis.title.y = element_blank())
setwd("F:/Uni/Github/Breaking_symmetry/Supplementary")
# library
library(tidybayes)
library(tidyverse)
library(brms)
library(png)
library(grid)
sessionInfo()
options(mc.cores = parallel::detectCores())
load("../power/Hoop_size/scratch/sampled_data")
load("../power/Hoop_size/scratch/df_part2")
# load("../power/Hoop_size/scratch/sampled_data")
load("../power/Hoop_size/scratch/df_part2")
# functions for getting parameters from a beta dist
mu_beta <- function(a, b){
a/(a + b)
}
phi_beta <- function(a, b){
1/((a*b)/(((a+b)^2)*(a+b+1)))
}
var_beta <- function(a, b){
(a*b)/(((a+b)^2)*(a+b+1))
}
# get shape parameters
get_shape_beta <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
# sort out beta shape
shape_1 <- fitdistrplus::fitdist(df_part2$beta_pos, "beta")
mu1 <- mu_beta(shape_1$estimate[1], shape_1$estimate[2])
var1 <- var_beta(shape_1$estimate[1], shape_1$estimate[2])
shape_1 <- get_shape_beta(mu1, var1)
mu2 <- seq(0.05, .2, 0.05)
x <- seq(0,1,0.0005)
# draw these
df_distributions <- tibble(x_vals = rep(x, length(c(0,mu2))),
base = mu1,
diff = rep(c(0,mu2), each = length(x)),
var = var1,
alpha = get_shape_beta(base + diff, var)$alpha,
beta = get_shape_beta(base + diff, var)$beta,
est_mu = mu_beta(alpha, beta),
est_var = var_beta(alpha, beta),
p = dbeta(x_vals, alpha, beta))
plt_both <- df_distributions %>%
mutate(diff = as.factor(diff)) %>%
ggplot(aes(x_vals, p)) +
geom_histogram(data = df_part2,
aes(x = (norm_pos + 1)/2,
y = ..density..),
binwidth = .1,
colour = "blue",
fill = "blue",
alpha = .2) +
geom_line(aes(colour = diff)) +
theme_bw() +
see::scale_color_flat() +
guides(colour = guide_legend("Difference")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom")
plt_dists <- df_distributions %>%
mutate(diff = as.factor(diff)) %>%
ggplot(aes(x_vals, p)) +
geom_line(aes(colour = diff)) +
theme_bw() +
see::scale_color_flat() +
scale_x_continuous("standing position") +
guides(colour = guide_legend("Difference")) +
theme(
axis.title.y = element_blank(),
legend.title = element_blank(),
legend.position = "right"
)
plt_hist <- df_distributions %>%
filter(diff == 0) %>%
mutate(diff = as.factor(diff)) %>%
ggplot(aes(x_vals, p)) +
geom_line(aes(colour = diff)) +
see::scale_color_flat() +
theme_bw() +
geom_histogram(data = df_part2,
aes(x = (norm_pos + 1)/2, y = ..density..),
binwidth = .1,
colour = "blue",
fill = "blue",
alpha = .2) +
scale_x_continuous("standing position") +
theme(
legend.position = "none",
axis.title.y = element_blank()
)
gridExtra::grid.arrange(plt_hist, plt_dists, ncol = 2)
# Need to sample each participant and get parameters for them
temp <- df_part2 %>%
group_by(Participant) %>%
summarise(a = fitdistrplus::fitdist(beta_pos, "beta")$estimate[1],
b = fitdistrplus::fitdist(beta_pos, "beta")$estimate[2])
mus <- seq(0, .2, .05)
df_distributions <- tibble(participant = rep(temp$Participant, each = length(mus)),
og_as = rep(temp$a, each = length(mus)),
og_bs = rep(temp$b, each = length(mus)),
og_mu = mu_beta(og_as, og_bs),
og_var = var_beta(og_as, og_bs),
increase = rep(mus, length(temp$a))) %>%
mutate(mu = og_mu + increase,
var = og_var,
alpha = get_shape_beta(mu, var)$alpha,
beta = get_shape_beta(mu, var)$beta) %>%
select(participant, increase, mu, var, alpha, beta)
# setup loop
diff_sample <- seq(.05, .2, .05)
n_iter <- 5000
n_subs <- seq(3, 25, 1)
n_trials <- 72
n <- length(diff_sample) * n_iter * length(n_subs)
refresh <- n_iter/100
df_sample <- data.table::data.table(iter = rep(0, n),
increase = rep(0, n),
n_subs = rep(0, n),
n_trial = rep(0, n),
base = rep(0, n),
comp = rep(0, n))
# loop
count <- 1
for(ii in 1:n_iter){
for(inc in diff_sample){
for(subN in n_subs){
subs <- sample(unique(df_distributions$participant), subN, replace = T)
baseline <- c()
comparison <- c()
for(sub_iter in 1:length(subs)){
base_a <- df_distributions$alpha[df_distributions$participant == subs[sub_iter] &
df_distributions$increase == 0]
base_b <- df_distributions$beta[df_distributions$participant == subs[sub_iter] &
df_distributions$increase == 0]
comp_a <- df_distributions$alpha[df_distributions$participant == subs[sub_iter] &
df_distributions$increase == inc]
comp_b <- df_distributions$beta[df_distributions$participant == subs[sub_iter] &
df_distributions$increase == inc]
baseline <- c(baseline, rbeta(n_trials, base_a, base_b))
comparison <- c(comparison, rbeta(n_trials, comp_a, comp_b))
}
df_sample[count, iter := ii]
df_sample[count, increase := inc]
df_sample[count, n_subs := subN]
df_sample[count, n_trial := n_trials]
df_sample[count, base := mean(baseline)]
df_sample[count, comp := mean(comparison)]
count <- count + 1
}
}
# if(ii %% refresh == 0){
#   print(paste((ii/n_iter)*100, "%", sep = ""))
# }
}
head(df_sample)
View(df_sample)
temp <- df_part2 %>%
group_by(Participant) %>%
summarise(a = fitdistrplus::fitdist(beta_pos, "beta")$estimate[1],
b = fitdistrplus::fitdist(beta_pos, "beta")$estimate[2])
head(temp)
View(temp)
df_sample %>%
filter(difference == 0.05) %>%
group_by(n_subs) %>%
mutate(diff = comparison - baseline) %>%
summarise(mu = mean(diff),
lower = hdi(diff)[1],
upper = hdi(diff)[2]) %>%
ggplot(aes(n_subs, mu)) +
geom_line() +
geom_ribbon(aes(ymin = lower,
ymax = upper),
alpha = .3) +
scale_x_continuous("Sample Size") +
theme_bw() +
theme(axis.title.y = element_blank())
df_sample %>%
filter(increase == 0.05) %>%
group_by(n_subs) %>%
mutate(diff = comp - base) %>%
summarise(mu = mean(diff),
lower = hdi(diff)[1],
upper = hdi(diff)[2]) %>%
ggplot(aes(n_subs, mu)) +
geom_line() +
geom_ribbon(aes(ymin = lower,
ymax = upper),
alpha = .3) +
scale_x_continuous("Sample Size") +
theme_bw() +
theme(axis.title.y = element_blank())
