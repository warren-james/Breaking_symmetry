# y <- boot::inv.logit(-.2*x)
a <- .5
b <- .05
y <- boot::inv.logit(x)
plot(x, y)
# Alasdair breaks things
x <- seq(-2,2,.1)
# y <- boot::inv.logit(-.2*x)
a <- .5
b <- .05
y <- boot::inv.logit(x)
plot(x, y)
r <- 4
x <- seq(-r,r,.1)
# y <- boot::inv.logit(-.2*x)
a <- .5
b <- .05
y <- boot::inv.logit(x)
plot(x, y)
# Alasdair breaks things
r <- 4
x <- seq(-r,r,.1)
# y <- boot::inv.logit(-.2*x)
a <- .5
b <- .05
y <- boot::inv.logit(-x)
plot(x, y)
r <- 4
x <- seq(-r,r,.1)
# y <- boot::inv.logit(-.2*x)
a <- .5
b <- .05
y <- boot::inv.logit(-b * x)
plot(x, y)
# Alasdair breaks things
r <- 4
x <- seq(-r,r,.1)
# y <- boot::inv.logit(-.2*x)
a <- .5
b <- 2
y <- boot::inv.logit(-b * x)
plot(x, y)
# Alasdair breaks things
r <- 4
x <- seq(-r,r,.1)
# y <- boot::inv.logit(-.2*x)
a <- .5
b <- 2
y <- boot::inv.logit(a + -b * x)
plot(x, y)
r <- 4
x <- seq(-r,r,.1)
# y <- boot::inv.logit(-.2*x)
a <- 1
b <- 2
y <- boot::inv.logit(a + -b * x)
plot(x, y)
r <- 4
x <- seq(0,r,.1)
# y <- boot::inv.logit(-.2*x)
a <- 1
b <- 2
y <- boot::inv.logit(a + -b * x)
plot(x, y)
r <- 4
x <- seq(0,r,.1)
# y <- boot::inv.logit(-.2*x)
a <- 4
b <- 2
y <- boot::inv.logit(a + -b * x)
plot(x, y)
# Alasdair breaks things
r <- 4
x <- seq(0,r,.05)
# y <- boot::inv.logit(-.2*x)
a <- 4
b <- 2
y <- boot::inv.logit(a + -b * x)
plot(x, y)
r <- 4
x <- seq(0,r,.05)
# y <- boot::inv.logit(-.2*x)
a <- 4
b <- 1
y <- boot::inv.logit(a + -b * x)
plot(x, y)
# Alasdair breaks things
r <- 4
x <- seq(0,r,.05)
# y <- boot::inv.logit(-.2*x)
a <- 4
b <- -2
y <- boot::inv.logit(a + b * x)
plot(x, y)
r <- 4
x <- seq(0,r,.05)
# y <- boot::inv.logit(-.2*x)
a <- 4
b <- -2.5
y <- boot::inv.logit(a + b * x)
plot(x, y)
# Alasdair breaks things
r <- 4
x <- seq(0,r,.05)
# y <- boot::inv.logit(-.2*x)
a <- 4
b <- -2
y <- boot::inv.logit(a + b * x)
plot(x, y)
convertRGB <- function(value) {
out = round(value + 1 * (255/2))
}
convertRGB(1)
convertRGB <- function(value) {
out = round(value + 1 * (255/2))
return(out)
}
convertRGB(1)
2 * (255/2)
convertRGB <- function(value) {
out = round((value + 1) * (255/2))
return(out)
}
convertRGB(1)
convertRGB(0)
convertRGB(-1)
128*2
.75 * 1024
50/600
50/1200
c <- c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4,-8,-12,-16,-20,-24,-28,-32,-36,-40,-44,-48,-52,-56,-60,-64,-68,-72,-76,-80,-84,-88,-92,-96,-100,-104,-108,-112,-116,-120,-124,-128,-132,-136,-140,-144,-148,-152,-156,-160,-164,-168,-172,-176,-180,-184,-188,-192,-196,-200,-204,-208,-212,-216,-220,-224,-228,-232,-236,-240,-244,-248,-252,-256,-260,-264,-268,-272,-276)
length(c)
b <- c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4,-8,-12,-16,-20,-24,-28,-32,-36,-40,-44,-48,-52,-56,-60,-64,-68,-72,-76,-80,-84,-88,-92,-96,-100,-104,-108,-112,-116,-120,-124,-128,-132,-136,-140,-144,-148,-152,-156,-160,-164,-168)
length(b)
a <- c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4,-8,-12,-16,-20,-24,-28,-32,-36,-40,-44,-48,-52,-56,-60,-64,-68)
a <- c(1,2,3)
a/2
library(tidyverse)
cite(tidyverse)
cite("tidyverse")
citation("tidyverse")
library(brms)
citation("brms")
version("brms")
setwd("E:/Github/Breaking_symmetry/Supplementary")
# library
library(tidybayes)
library(tidyverse)
library(brms)
load("../power/Prob_match/scratch/df_resample")
load("../power/Prob_match/scratch/df_sample")
plt_data <- df_resample %>%
ungroup() %>%
group_by(Participant, Condition, Dist_type) %>%
mutate(centre = ifelse(box_type == "Centre", 1, 0),
ML = ifelse(box_type == "Most", 1, 0),
LL = ifelse(box_type == "Least", 1, 0),
n = n()) %>%
summarise(centre = mean(centre),
ML = mean(ML),
LL = mean(LL)) %>%
gather(centre:LL,
key = "prop_type",
value = "proportion") %>%
mutate(prop_type = factor(prop_type, c("centre", "ML", "LL"),
labels = c("Centre", "Most Likely", "Least Likely"))) %>%
ggplot(aes(Dist_type, proportion,
fill = Condition,
colour = Condition)) +
geom_boxplot(alpha = .3) +
geom_point(alpha = .3, position = position_jitterdodge(.1)) +
facet_wrap(~prop_type) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
scale_x_discrete("Distance Type") +
theme(axis.title.y = element_blank())
# maybe just the hdi stuff?
# do I want to rerun the sim with dist type added in?
plt_resampling <- df_sample %>%
spread(Condition,
Most) %>%
mutate(diff = Bias - Symmetric) %>%
group_by(n_sub) %>%
summarise(mu = mean(diff),
lower = hdi(diff)[1],
upper = hdi(diff)[2]) %>%
ggplot(aes(n_sub, mu)) +
geom_line() +
geom_ribbon(aes(ymin = lower,
ymax = upper),
alpha = .3) +
theme_bw() +
scale_x_continuous("Sample Size") +
scale_y_continuous("Differenc in fixations to more \n likely side (Bias - Symmetric)")
gridExtra::grid.arrange(plt_data, plt_resampling)
load("../power/Hoop_size/scratch/sampled_data")
load("../power/Hoop_size/scratch/df_part2")
# functions for getting parameters from a beta dist
mu_beta <- function(a, b){
a/(a + b)
}
phi_beta <- function(a, b){
1/((a*b)/(((a+b)^2)*(a+b+1)))
}
var_beta <- function(a, b){
(a*b)/(((a+b)^2)*(a+b+1))
}
# get shape parameters
get_shape_beta <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
# sort out beta shape
shape_1 <- fitdistrplus::fitdist(df_part2$beta_pos, "beta")
mu1 <- mu_beta(shape_1$estimate[1], shape_1$estimate[2])
var1 <- var_beta(shape_1$estimate[1], shape_1$estimate[2])
shape_1 <- get_shape_beta(mu1, var1)
mu2 <- seq(0.05, .2, 0.05)
x <- seq(0,1,0.0005)
# draw these
df_distributions <- tibble(x_vals = rep(x, length(c(0,mu2))),
base = mu1,
diff = rep(c(0,mu2), each = length(x)),
var = var1,
alpha = get_shape_beta(base + diff, var)$alpha,
beta = get_shape_beta(base + diff, var)$beta,
est_mu = mu_beta(alpha, beta),
est_var = var_beta(alpha, beta),
p = dbeta(x_vals, alpha, beta))
plt_distributions <- df_distributions %>%
mutate(diff = as.factor(diff)) %>%
ggplot(aes(x_vals, p,
colour = diff)) +
geom_line() +
theme_bw() +
see::scale_color_flat() +
guides(colour = guide_legend("Difference")) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom")
plt_hdi <- df_sample %>%
filter(difference == 0.05) %>%
group_by(n_subs) %>%
mutate(diff = comparison - baseline) %>%
summarise(mu = mean(diff),
lower = hdi(diff)[1],
upper = hdi(diff)[2]) %>%
ggplot(aes(n_subs, mu)) +
geom_line() +
geom_ribbon(aes(ymin = lower,
ymax = upper),
alpha = .3) +
scale_x_continuous("Sample Size") +
theme_bw() +
theme(axis.title.y = element_blank())
gridExtra::grid.arrange(plt_distributions, plt_hdi)
# so we're interested in the difference between the closest and furthest...
# so we should just plot that?
load("../power/Money_and_two/scratch/df_sample")
load("../power/Money_and_two/scratch/df_all")
plt_data <- df_all %>%
filter(standard_lab %in% c("10%","90%")) %>%
group_by(participant, condition, standard_lab) %>%
summarise(norm_pos = mean(norm_pos)) %>%
ggplot(aes(standard_lab, norm_pos,
colour = condition,
fill = condition)) +
geom_boxplot(alpha = .3) +
geom_point(alpha = .3, position = position_jitterdodge(.1)) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
scale_y_continuous("Normalised Placement") +
theme(axis.title.x = element_blank()) +
guides(colour = guide_legend(title = "Condition"),
fill = guide_legend(title = "Condition"))
plt_data_diff <- plt_data[["data"]] %>%
ungroup() %>%
spread(standard_lab, norm_pos) %>%
mutate(diff = `90%` - `10%`) %>%
ggplot(aes(condition, diff,
colour = condition,
fill = condition)) +
geom_boxplot(alpha = .3) +
geom_point(alpha = .3, position = position_jitterdodge(.1))
# plot samples in terms of difference?
plt_hdi <- df_sample %>%
filter(n_trials != 12,
n_subs != 2) %>%
mutate(diff = baseline - comparison) %>%
group_by(n_subs, dist_type) %>%
summarise(mu = mean(diff),
upper = hdi(diff)[2],
lower = hdi(diff)[1]) %>%
ggplot(aes(n_subs, mu)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper),
alpha = .3) +
facet_wrap(~dist_type) +
theme_bw() +
scale_x_continuous("Sample Size") +
scale_y_continuous("Difference: Athletes - Avatar")
# show both
gridExtra::grid.arrange(plt_data, plt_hdi, ncol = 1)
# Load in everything from the modelling
load("../Analyses/Experiment_4_Prob/modelling/BRMS/model_output/bm_fix_like_dt")
load("../Analyses/Experiment_4_Prob/modelling/BRMS/model_output/bm_fix_like_dt_draws")
draws <- fix_like_post$draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
select(-estimate)
# this is meant to add a figure caption but it looks terrible
# fig.cap="\\label{fig:fig1}Posterior predictions for the probability matching experiment"}
# Proportion fixations to most likely side
plt_me_Bias <- draws %>%
ggplot(aes(prop,
colour = Bias_type,
fill = Bias_type)) +
geom_density(alpha = .3) +
theme_bw() +
theme(axis.title.x = element_blank()) +
labs(fill = "Bias Type",
colour = "Bias Type") +
#       "Proportion of Fixations to Most Likely Side") +
see::scale_color_flat() +
see::scale_fill_flat() +
scale_x_continuous(labels = scales::percent_format(accuracy = 1))
plt_me_Dist <- draws %>%
ggplot(aes(prop,
colour = Dist_type,
fill = Dist_type)) +
geom_density(alpha = .3) +
theme_bw() +
theme(axis.title.x = element_blank()) +
labs(fill = "Distance Type",
colour = "Distance Type") +
#       x = "Proportion of Fixations to Most Likely Side") +
see::scale_color_flat() +
see::scale_fill_flat() +
scale_x_continuous(labels = scales::percent_format(accuracy = 1))
plt_interaction <- fix_like_post$plt_estimates +
theme_bw() +
see::scale_color_flat() +
see::scale_fill_flat() +
labs(x = "Proportion of Fixations to Most Likely Side",
colour = "Bias Type",
fill = "Bias Type") +
scale_x_continuous(labels = scales::percent_format(accuracy = 1))
gridExtra::grid.arrange(plt_me_Dist, plt_me_Bias, plt_interaction)
# HDI_values
HDI_Bias <- draws %>%
group_by(Bias_type) %>%
summarise(lower = hdi(prop)[,1],
mu = mean(prop),
upper = hdi(prop)[,2],
med = median(prop))
HDI_Dist <- draws %>%
group_by(Dist_type) %>%
summarise(lower = hdi(prop)[,1],
mu = mean(prop),
upper = hdi(prop)[,2],
med = median(prop))
HDI_interaction <- draws %>%
group_by(Bias_type, Dist_type) %>%
summarise(lower = hdi(prop)[,1],
mu = mean(prop),
upper = hdi(prop)[,2],
med = median(prop))
# Diff values
Diff_Bias <- draws %>%
spread(Bias_type,
prop) %>%
mutate(diff = Bias - Symmetric,
Bias_bigger = ifelse(diff > 0, 1, 0))
D_bias_lower <- hdci(Diff_Bias$diff)[,1]
D_bias_mu <- mean(Diff_Bias$diff)
D_bias_upper <- hdci(Diff_Bias$diff)[,2]
p_bias_bigger <- mean(Diff_Bias$Bias_bigger)
Diff_Dist <- draws %>%
spread(Dist_type,
prop) %>%
mutate(diff = Far - Close,
Far_bigger = ifelse(diff > 0, 1, 0))
D_dist_lower <- hdci(Diff_Dist$diff)[,1]
D_dist_mu <- mean(Diff_Dist$diff)
D_dist_upper <- hdci(Diff_Dist$diff)[,2]
p_far_bigger <- mean(Diff_Dist$Far_bigger)
Diff_Interaction_compdist <- Diff_Dist %>%
group_by(Bias_type) %>%
summarise(p_Far_bigger = mean(Far_bigger),
lower = hdci(diff)[,1],
mu = mean(diff),
upper = hdci(diff)[,2],
med = median(diff))
Diff_Interaction_compbias <- Diff_Bias %>%
group_by(Dist_type) %>%
summarise(p_Bias_bigger = mean(Bias_bigger),
lower = hdci(diff)[,1],
mu = mean(diff),
upper = hdci(diff)[,2],
med = median(diff))
load("../Analyses/Experiment_4_Prob/modelling/BRMS/model_output/bm_fix_S_dt")
load("../Analyses/Experiment_4_Prob/modelling/BRMS/model_output/bm_fix_S_dt_draws")
df_prop_S <- fix_S_post$draws_df %>%
mutate(prop = boot::inv.logit(estimate))
# something like the first set of plots above
plt_S_Dist <- df_prop_S %>%
ggplot(aes(prop,
colour = Dist_type,
fill = Dist_type)) +
geom_density(alpha = .3) +
theme_bw() +
see::scale_color_flat() +
see::scale_fill_flat() +
scale_x_continuous(labels = scales::percent_format(accuracy = 1)) +
theme(axis.title.y = element_blank(),
axis.title.x = element_blank()) +
guides(fill = guide_legend(title = "Distance Type"),
colour = guide_legend(title = "Distance Type"))
plt_S_Bias <- df_prop_S %>%
ggplot(aes(prop,
colour = Bias_type,
fill = Bias_type)) +
geom_density(alpha = .3) +
theme_bw() +
see::scale_color_flat() +
see::scale_fill_flat() +
scale_x_continuous(labels = scales::percent_format(accuracy = 1)) +
theme(axis.title.y = element_blank(),
axis.title.x = element_blank()) +
guides(fill = guide_legend(title = "Bias Type"),
colour = guide_legend(title = "Bias Type"))
plt_S_overall <- df_prop_S %>%
ggplot(aes(prop,
colour = Bias_type,
fill = Bias_type)) +
geom_density(alpha = .3) +
facet_wrap(~Dist_type) +
theme_bw() +
see::scale_color_flat() +
see::scale_fill_flat() +
scale_x_continuous("Proportion of Fixations to Most Likely Side",
labels = scales::percent_format(accuracy = 1)) +
theme(axis.title.y = element_blank()) +
guides(fill = guide_legend(title = "Bias Type"),
colour = guide_legend(title = "Bias Type"))
gridExtra::grid.arrange(plt_S_Dist, plt_S_Bias, plt_S_overall)
fix_like_post$HDI_Diff
boot::inv.logit(0.533)
fix_like_post$draws_HDI
fix_like_post$plt_difference
fix_like_post$draws_df
head(df_prop_S)
head(HDI_Bias)
head(df_prop_S)
df_prop_S %>%
group_by(Bias_type) %>%
summarise(lower = hdi(prop)[,1],
mu = mean(prop),
upper = hdi(prop)[.2])
df_prop_S %>%
group_by(Bias_type) %>%
summarise(lower = hdi(prop)[,1],
mu = mean(prop),
upper = hdi(prop)[,2])
hdi(df_prop_S$prop)
hdi(df_prop_S$prop)[,1]
df_prop_S %>%
group_by(Bias_type) %>%
summarise(lower = hdi(prop)[,1])
head(df_prop_S)
fix_S_post$draws_df
df_prop_S <- fix_S_post$draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
select(-estimate)
head(df_prop_S)
df_prop_S %>%
group_by(Bias_type) %>%
summarise(lower = hdi(prop)[,1])
df_prop_S %>%
group_by(Bias_type) %>%
summarise(lower = hdci(prop)[,1],
mu = mean(prop),
upper = hdci(prop)[,2])
HDI_side_Bias <- df_prop_S %>%
group_by(Bias_type) %>%
summarise(lower = hdci(prop)[,1],
mu = mean(prop),
upper = hdci(prop)[,2])
HDI_side_dist <- df_prop_S %>%
group_by(Dist_type) %>%
summarise(lower = hdci(prop)[,1],
mu = mean(prop),
upper = hdci(prop)[,2])
HDI_side_interaction <- df_prop_S %>%
group_by(Bias_type, Dist_type) %>%
summarise(lower = hdci(prop)[,1],
mu = mean(prop),
upper = hdci(prop)[,2])
HDI_side_Bias
HDI_side_dist
HDI_side_interaction]
HDI_side_interaction
HDI_side_interaction
HDI_side_interaction[4,1]
HDI_side_interaction[1,4]
install.packages("bookdown")
setwd("E:/Github/Breaking_symmetry/Supplementary")
install.packages("tinytex")
install.packages(c("arrayhelpers", "aweek", "backports", "bayesplot", "bayestestR", "BH", "boot", "bridgesampling", "brms", "broom", "callr", "checkmate", "class", "cli", "clipr", "cluster", "coda", "crosstalk", "curl", "DBI", "devtools", "digest", "DT", "effectsize", "evaluate", "fansi", "forcats", "fs", "future", "ggridges", "ggstance", "ggthemes", "gh", "git2r", "globals", "glue", "gtools", "htmltools", "htmlwidgets", "httpuv", "igraph", "insight", "jsonlite", "KernSmooth", "knitr", "LaplacesDemon", "later", "lattice", "listenv", "loo", "lubridate", "markdown", "MASS", "Matrix", "matrixStats", "mgcv", "mime", "modelr", "mrgsolve", "mvtnorm", "nlme", "nnet", "openssl", "parameters", "pkgbuild", "pkgconfig", "plyr", "prettyunits", "processx", "progress", "promises", "ps", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "remotes", "reshape2", "rsconnect", "rstan", "rstantools", "rstudioapi", "scales", "see", "selectr", "shiny", "shinyjs", "spatial", "StanHeaders", "stringi", "svUnit", "sys", "threejs", "tidybayes", "tidyselect", "usethis", "whisker", "withr", "xfun", "xml2", "xts", "yaml", "zoo"))
install.packages(c("arrayhelpers", "aweek", "backports", "bayesplot", "bayestestR", "BH", "boot", "bridgesampling", "brms", "broom", "callr", "checkmate", "class", "cli", "clipr", "cluster", "coda", "crosstalk", "curl", "DBI", "devtools", "digest", "DT", "effectsize", "evaluate", "fansi", "forcats", "fs", "future", "ggridges", "ggstance", "ggthemes", "gh", "git2r", "globals", "glue", "gtools", "htmltools", "htmlwidgets", "httpuv", "igraph", "insight", "jsonlite", "KernSmooth", "knitr", "LaplacesDemon", "later", "lattice", "listenv", "loo", "lubridate", "markdown", "MASS", "Matrix", "matrixStats", "mgcv", "mime", "modelr", "mrgsolve", "mvtnorm", "nlme", "nnet", "openssl", "parameters", "pkgbuild", "pkgconfig", "plyr", "prettyunits", "processx", "progress", "promises", "ps", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "remotes", "reshape2", "rsconnect", "rstan", "rstantools", "rstudioapi", "scales", "see", "selectr", "shiny", "shinyjs", "spatial", "StanHeaders", "stringi", "svUnit", "sys", "threejs", "tidybayes", "tidyselect", "usethis", "whisker", "withr", "xfun", "xml2", "xts", "yaml", "zoo"))
