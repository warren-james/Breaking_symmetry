#   print(paste((ii/max_iter)*100, "%", sep = ""))
#   for(pwr in seq(power_low, power_hi, 10)){
#     # get power noise
#     # multiplying by some value to put thins on a nice scale so noise becomes a problem
#     noise <- ((pwr - power_low)/power_range)*3
#     for(ang in seq(angle_low, angle_high, 15)){
#       # now get angle with noise
#       # ang_prop <- (ang - angle_low)/angle_range
#       # ang_real <- (ang_prop + rnorm(1, 0, noise))
#       # ang_real <- ang_real * angle_range + angle_low
#       ang_real <- ang + (rnorm(1, 0, noise))
#       # maybe work out flight time here then we know how many values for t to use?
#       for(t in seq(0,20,.1)){
#         coords <- parab_mk3(t, height, gravity, pwr, ang_real, 0)
#
#         df <- rbind(df, tibble(iter = ii,
#                                pwr = pwr,
#                                ang = ang,
#                                true_ang = ang_real,
#                                x = coords$x,
#                                y = coords$y))
#         if(coords$y < 0){
#           break
#         }
#       }
#     }
#   }
# }
#
# # plot this
# df %>%
#   mutate(ang = as.factor(ang),
#          pwr = as.factor(pwr)) %>%
#   ggplot(aes(x, y,
#              colour = pwr)) +
#   geom_point(alpha = .1) +
#   facet_wrap(~ang)
# # dist of landing pos
# df %>%
#   filter(y < 0) %>%
#   mutate(pwr = as.factor(pwr)) %>%
#   ggplot(aes(x,
#              colour = pwr,
#              fill = pwr)) +
#   geom_density(alpha = .3) +
#   # geom_histogram(position = "dodge",
#   #                binwidth = .1,
#   #                aes(y = ..density..)) +
#   facet_wrap(~pwr, scales = "free_y")
#
#### Sim some trials for difference distances ####
# probably need a new function to sort out the noise part
# basically, if the power is below 50, noise = 0
# then as it gets larger than 50, we can make things a bit harder
# then do 12 trials at 10 distances?
# After this, we can look at the curve produced from this to see how accuracy
# changes over distance for an agent that "knows" how much power to use
# This should be similar to the throwing task
# set some parameters
power_range <- 100                 # set range of power
angle <- 30                        # keep angle constant
deltas <- c(1,seq(100, 1000, 100)) # set deltas
num_trials <- 500
target_size <- 10
# world parameters
gravity <- 10
height <- 0
wind <- 0
# setup df
df_sim <- tibble(trial = numeric(),
gravity = numeric(),
height = numeric(),
wind = numeric(),
delta = numeric(),
velocity = numeric(),
true_angle = numeric(),
end_pos = numeric(),
success = numeric())
# sim some trials
for(d in deltas){
pwr <- find_vel(d, angle, gravity)
lower_bound = d - target_size
upper_bound = d + target_size
for(ii in 1:num_trials){
noise <- add_noise(pwr, power_range, scale = 3, drop_point = .3)
true_angle <- angle + rnorm(1, 0, noise)
end_pos <- find_range(pwr, true_angle, gravity)
# did we hit?
if(end_pos < upper_bound & end_pos > lower_bound){
success <- 1
} else {
success <- 0
}
#add to frame
df_sim <- rbind(df_sim, tibble(trial = ii,
gravity = gravity,
height = height,
wind = wind,
delta = d,
velocity = pwr,
true_angle = true_angle,
end_pos = end_pos,
success = success))
}
}
# plot a fit
df_sim %>%
group_by(delta) %>%
mutate(acc = mean(success)) %>%
ggplot(aes(delta, acc)) +
geom_point() +
geom_smooth(aes(y = success),
method = glm,
method.args = list(family = "binomial"),
se = F)
head(df_sim)
df_sim %>%
filter(delta > 1) %>%
mutate(delta = as.factor(delta)) %>%
ggplot(aes(end_pos, colour = delta,
fill = delta)) +
geom_histogram(alpha = .3) +
facet_wrap(~delta, scales = "free")
df_sim %>%
filter(delta > 1) %>%
mutate(delta = as.factor(delta)) %>%
ggplot(aes(end_pos, colour = delta,
fill = delta)) +
geom_histogram(alpha = .3) +
facet_wrap(~delta)
df_sim %>%
filter(delta > 1) %>%
mutate(delta = as.factor(delta),
lower = delta - target_size,
upper = delta + target_size) %>%
ggplot(aes(end_pos, colour = delta,
fill = delta)) +
geom_histogram(alpha = .3) +
geom_vline(xintercept = upper,
linetype = "dashed") +
geom_vline(xintercept = lower,
linetype = "dashed")
facet_wrap(~delta)
# plots of ending position
df_sim %>%
filter(delta > 1) %>%
mutate(
lower = delta - target_size,
upper = delta + target_size,
delta = as.factor(delta)) %>%
ggplot(aes(end_pos, colour = delta,
fill = delta)) +
geom_histogram(alpha = .3) +
geom_vline(xintercept = upper,
linetype = "dashed") +
geom_vline(xintercept = lower,
linetype = "dashed") +
facet_wrap(~delta)
df_sim %>%
filter(delta > 1) %>%
mutate(lower = delta - target_size,
upper = delta + target_size,
delta = as.factor(delta))
df_sim %>%
filter(delta > 1) %>%
mutate(lower = delta - target_size,
upper = delta + target_size,
delta = as.factor(delta)) %>%
ggplot(aes(end_pos, colour = delta,
fill = delta)) +
geom_histogram(alpha = .3) +
geom_vline(aes(xintercept = upper),
linetype = "dashed") +
geom_vline(aes(xintercept = lower),
linetype = "dashed") +
facet_wrap(~delta)
df_sim %>%
filter(delta > 1) %>%
mutate(lower = delta - target_size,
upper = delta + target_size,
delta = as.factor(delta)) %>%
ggplot(aes(end_pos, colour = delta,
fill = delta)) +
geom_histogram(alpha = .3) +
geom_vline(aes(xintercept = upper),
linetype = "dashed") +
geom_vline(aes(xintercept = lower),
linetype = "dashed") +
facet_wrap(~delta, scales = "free")
install.packages("patchwork")
library(patchwork)
plts <- plt_curve + plt_dist
# plot a fit
plt_curve <- df_sim %>%
group_by(delta) %>%
mutate(acc = mean(success)) %>%
ggplot(aes(delta, acc)) +
geom_point() +
geom_smooth(aes(y = success),
method = glm,
method.args = list(family = "binomial"),
se = F)
# plots of ending position
plt_dist <- df_sim %>%
filter(delta > 1) %>%
mutate(lower = delta - target_size,
upper = delta + target_size,
delta = as.factor(delta)) %>%
ggplot(aes(end_pos, colour = delta,
fill = delta)) +
geom_histogram(alpha = .3) +
geom_vline(aes(xintercept = upper),
linetype = "dashed") +
geom_vline(aes(xintercept = lower),
linetype = "dashed") +
facet_wrap(~delta, scales = "free")
# put together
library(patchwork)
plts <- plt_curve + plt_dist
plts
plt_curve <- df_sim %>%
group_by(delta) %>%
mutate(acc = mean(success)) %>%
ggplot(aes(delta, acc)) +
geom_point() +
geom_smooth(aes(y = success),
method = glm,
method.args = list(family = "binomial"),
se = F) +
theme_bw()
# plots of ending position
plt_dist <- df_sim %>%
filter(delta > 1) %>%
mutate(lower = delta - target_size,
upper = delta + target_size,
delta = as.factor(delta)) %>%
ggplot(aes(end_pos, colour = delta,
fill = delta)) +
geom_histogram(alpha = .3) +
geom_vline(aes(xintercept = upper),
linetype = "dashed") +
geom_vline(aes(xintercept = lower),
linetype = "dashed") +
facet_wrap(~delta, scales = "free") +
theme_bw() +
theme(legend.position = "none")
# put together
library(patchwork)
plts <- plt_curve + plt_dist
plts
df_sim %>%
filter(delta > 1) %>%
mutate(lower = delta - target_size,
upper = delta + target_size,
delta = as.factor(delta)) %>%
ggplot(aes(end_pos, colour = delta,
fill = delta)) +
geom_histogram(alpha = .3) +
geom_vline(aes(xintercept = upper),
linetype = "dashed") +
geom_vline(aes(xintercept = lower),
linetype = "dashed") +
facet_wrap(~delta, scales = "free") +
theme_bw() +
theme(legend.position = "none")
plts <- plt_curve + plt_dist
plts
plt_dist <- df_sim %>%
filter(delta > 1) %>%
mutate(lower = delta - target_size,
upper = delta + target_size,
delta = as.factor(delta)) %>%
ggplot(aes(end_pos, colour = delta,
fill = delta)) +
geom_histogram(alpha = .3) +
geom_vline(aes(xintercept = upper),
linetype = "dashed") +
geom_vline(aes(xintercept = lower),
linetype = "dashed") +
facet_wrap(~delta) +#, scales = "free") +
theme_bw() +
theme(legend.position = "none")
# put together
library(patchwork)
plts <- plt_curve + plt_dist
plts
((1*805) + (5 * 1264) + (10 * 106))
((1*805) + (5 * 1264) + (10 * 106)) * 12
((1 * 820) + (5 * 1296) + (10 * 116) + (20 * 223) + (50 * 46))
((1 * 820) + (5 * 1296) + (10 * 116) + (20 * 223) + (50 * 46)) * 12
R.version
Two_throw_priors <- brm(abspos ~ norm_delta * Num_throws + (norm_delta * Num_throws|Participant),
family = "beta",
data = model_data_pos,
prior = c(set_prior("student_t(4,0,.8)",
class = "b",
coef = "norm_delta"),
set_prior("student_t(4,0,.8)",
class = "b",
coef = "norm_delta:Num_throwsTwoMThrows"),
set_prior("student_t(4,0,.8)",
class = "b", coef = "Num_throwsTwoMThrows"),
set_prior("student_t(4,0,.8)",
class = "Intercept")),
cores = 1,
chains = 1,
iter = 7000,
warmup = 3500,
control = list(adapt_delta = .99, max_treedepth = 15),
sample_prior = "only")
library(tidyverse)
library(tidybayes)
library(brms)
setwd("F:/Uni/Github/Breaking_symmetry/Supplementary")
load("../Analyses/Experiment_2_Two_throw/scratch/model_data_pos")
Two_throw_priors <- brm(abspos ~ norm_delta * Num_throws + (norm_delta * Num_throws|Participant),
family = "beta",
data = model_data_pos,
prior = c(set_prior("student_t(4,0,.8)",
class = "b",
coef = "norm_delta"),
set_prior("student_t(4,0,.8)",
class = "b",
coef = "norm_delta:Num_throwsTwoMThrows"),
set_prior("student_t(4,0,.8)",
class = "b", coef = "Num_throwsTwoMThrows"),
set_prior("student_t(4,0,.8)",
class = "Intercept")),
cores = 1,
chains = 1,
iter = 7000,
warmup = 3500,
control = list(adapt_delta = .99, max_treedepth = 15),
sample_prior = "only")
Two_throw_priors <- brm(abspos ~ norm_delta * Num_throws + (norm_delta * Num_throws|Participant),
family = "beta",
data = model_data_pos,
prior = c(set_prior("student_t(4,0,.8)",
class = "b",
coef = "norm_delta"),
set_prior("student_t(4,0,.8)",
class = "b",
coef = "norm_delta:Num_throwsTwoMThrows"),
set_prior("student_t(4,0,.8)",
class = "b", coef = "Num_throwsTwoMThrows"),
set_prior("student_t(4,0,.8)",
class = "Intercept")),
cores = 1,
chains = 1,
iter = 8000,
warmup = 4000,
control = list(adapt_delta = .99, max_treedepth = 15),
sample_prior = "only")
Two_throw_priors <- brm(abspos ~ norm_delta * Num_throws + (norm_delta * Num_throws|Participant),
family = "beta",
data = model_data_pos,
prior = c(set_prior("student_t(4,0,.8)",
class = "b",
coef = "norm_delta"),
set_prior("student_t(4,0,.8)",
class = "b",
coef = "norm_delta:Num_throwsTwoMThrows"),
set_prior("student_t(4,0,.8)",
class = "b", coef = "Num_throwsTwoMThrows"),
set_prior("student_t(4,0,.8)",
class = "Intercept")),
cores = 1,
chains = 1,
iter = 10000,
warmup = 5000,
control = list(adapt_delta = .99, max_treedepth = 15),
sample_prior = "only")
close <- min(model_data_pos$norm_delta)
mid <- median(model_data_pos$norm_delta)
far <- max(model_data_pos$norm_delta)
draws_df <- Two_throw_priors  %>%
spread_draws(b_Intercept,
b_norm_delta,
b_Num_throwsTwoMThrows,
`b_norm_delta:Num_throwsTwoMThrows`) %>%
mutate(One_throw = b_Intercept,
Norm_delta_OT = b_norm_delta,
Two_throw = b_Num_throwsTwoMThrows,
Norm_delta_TT = `b_norm_delta:Num_throwsTwoMThrows`) %>%
select(-b_Intercept,
-b_norm_delta,
-b_Num_throwsTwoMThrows,
-`b_norm_delta:Num_throwsTwoMThrows`) %>%
mutate(hoop_Close.One_throw = One_throw + (close * Norm_delta_OT),
hoop_Mid.One_throw = One_throw + (mid * Norm_delta_OT),
hoop_Far.One_throw = One_throw + (far * Norm_delta_OT),
hoop_Close.Two_throw = One_throw + Two_throw + (close * Norm_delta_TT),
hoop_Mid.Two_throw = One_throw + Two_throw + (mid * Norm_delta_TT),
hoop_Far.Two_throw = One_throw + Two_throw + (far * Norm_delta_TT)) %>%
select(.iteration,
hoop_Close.One_throw,
hoop_Mid.One_throw,
hoop_Far.One_throw,
hoop_Close.Two_throw,
hoop_Mid.Two_throw,
hoop_Far.Two_throw) %>%
gather(c(hoop_Close.One_throw:hoop_Far.Two_throw),
key = "parameter",
value = "estimate") %>%
separate(parameter,
into= c("Dist_type", "Num_throws"),
sep = "\\.") %>%
separate(Dist_type,
into = c("remove", "Dist_type"),
sep = "_") %>%
select(-remove)
priors_plt <- draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
ggplot(aes(prop,
colour = Num_throws,
fill = Num_throws)) +
geom_density(
kernel = "biweight",
alpha = .3
)+
facet_wrap(~Dist_type) +
theme_bw()
Two_throw_priors <- brm(abspos ~ norm_delta * Num_throws + (norm_delta * Num_throws|Participant),
family = "beta",
data = model_data_pos,
prior = c(set_prior("student_t(4,0,.8)",
class = "b",
coef = "norm_delta"),
set_prior("student_t(4,0,.8)",
class = "b",
coef = "norm_delta:Num_throwsTwoMThrows"),
set_prior("student_t(4,0,.8)",
class = "b", coef = "Num_throwsTwoMThrows"),
set_prior("student_t(4,0,.8)",
class = "Intercept")),
cores = 1,
chains = 1,
iter = 10000,
warmup = 5000,
control = list(adapt_delta = .995, max_treedepth = 15),
sample_prior = "only")
Two_throw_priors <- brm(abspos ~ norm_delta * Num_throws + (norm_delta * Num_throws|Participant),
family = "beta",
data = model_data_pos,
prior = c(set_prior("student_t(4,0,.8)",
class = "b",
coef = "norm_delta"),
set_prior("student_t(4,0,.8)",
class = "b",
coef = "norm_delta:Num_throwsTwoMThrows"),
set_prior("student_t(4,0,.8)",
class = "b", coef = "Num_throwsTwoMThrows"),
set_prior("student_t(4,0,.8)",
class = "Intercept")),
cores = 1,
chains = 1,
iter = 10000,
warmup = 5000,
control = list(adapt_delta = .99, max_treedepth = 15),
sample_prior = "only")
# test
close <- min(model_data_pos$norm_delta)
mid <- median(model_data_pos$norm_delta)
far <- max(model_data_pos$norm_delta)
draws_df <- Two_throw_priors  %>%
spread_draws(b_Intercept,
b_norm_delta,
b_Num_throwsTwoMThrows,
`b_norm_delta:Num_throwsTwoMThrows`) %>%
mutate(One_throw = b_Intercept,
Norm_delta_OT = b_norm_delta,
Two_throw = b_Num_throwsTwoMThrows,
Norm_delta_TT = `b_norm_delta:Num_throwsTwoMThrows`) %>%
select(-b_Intercept,
-b_norm_delta,
-b_Num_throwsTwoMThrows,
-`b_norm_delta:Num_throwsTwoMThrows`) %>%
mutate(hoop_Close.One_throw = One_throw + (close * Norm_delta_OT),
hoop_Mid.One_throw = One_throw + (mid * Norm_delta_OT),
hoop_Far.One_throw = One_throw + (far * Norm_delta_OT),
hoop_Close.Two_throw = One_throw + Two_throw + (close * Norm_delta_TT),
hoop_Mid.Two_throw = One_throw + Two_throw + (mid * Norm_delta_TT),
hoop_Far.Two_throw = One_throw + Two_throw + (far * Norm_delta_TT)) %>%
select(.iteration,
hoop_Close.One_throw,
hoop_Mid.One_throw,
hoop_Far.One_throw,
hoop_Close.Two_throw,
hoop_Mid.Two_throw,
hoop_Far.Two_throw) %>%
gather(c(hoop_Close.One_throw:hoop_Far.Two_throw),
key = "parameter",
value = "estimate") %>%
separate(parameter,
into= c("Dist_type", "Num_throws"),
sep = "\\.") %>%
separate(Dist_type,
into = c("remove", "Dist_type"),
sep = "_") %>%
select(-remove)
priors_plt <- draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
ggplot(aes(prop,
colour = Num_throws,
fill = Num_throws)) +
geom_density(
kernel = "biweight",
alpha = .3
)+
facet_wrap(~Dist_type) +
theme_bw()
priors_plt
