geom_boxplot(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat()
# do the same again but with normalised data
sq_dat_norm <- norm_dat %>%
select(participant, hoop_pos, shift, subject_position, norm_dist, slab_measures) %>%
mutate(centre = 0,
norm_shift = shift/hoop_pos,
error_Centre = norm_dist^2,
error_Shift = (norm_dist - norm_shift)^2)
# make box plot
sq_dat_norm %>%
gather(c(error_Centre, error_Shift),
key = "Error_type",
value = "Error") %>%
separate(Error_type,
c("remove",
"Error_type"),
"_") %>%
select(-remove) %>%
ggplot(aes(slab_measures, Error,
colour = Error_type,
fill = Error_type)) +
geom_boxplot(alpha = .1) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw()
#### Expected Acc ####
# need to work out Expected acc and the regions for
# worst performance and best performance...
# shouldn't be too hard to do...
load("scratch/beanbagdat")
# get predictions for accuracy
m = glm(data=beanbagdat, acc~slab:hoop_size:participant, binomial)
# setting up dataframe
participants <- unique(beanbagdat$participant)
slabs <- seq(0, max(norm_dat$hoop_pos*2), .5)
hoop_sizes <- unique(beanbagdat$hoop_size)
acc_sep = tibble(participant = rep(participants, each = length(slabs) * length(hoop_sizes)),
slab = rep(slabs, length(participants) * length(hoop_sizes)),
hoop_size = rep(rep(hoop_sizes, each = length(slabs)), length(participants)))
#tidy
rm(participants, slabs, hoop_sizes)
# add in prediction
acc_sep <- acc_sep %>%
group_by(participant, hoop_size, slab) %>%
mutate(p = as.numeric(predict(m, data.frame(participant = participant,
slab = slab,
hoop_size = hoop_size),
type = "response")[1])) %>%
ungroup()
acc_small <- acc_sep %>%
filter(hoop_size == "small")
acc_large <- acc_sep %>%
filter(hoop_size == "large")
# getting expected, side(both), and centre acc
# expected
acc_small_exp <- acc_small %>%
mutate(small_dist = slab,
small_exp_acc = p) %>%
select(participant, small_dist, small_exp_acc)
acc_large_exp <- acc_large %>%
mutate(large_dist = slab,
large_exp_acc = p) %>%
select(participant, large_dist, large_exp_acc)
# centre
acc_small_centre <- acc_small %>%
mutate(c_sd = slab,
small_centre_acc = p) %>%
select(participant, small_centre_acc, c_sd)
acc_large_centre <- acc_large %>%
mutate(c_ld = slab,
large_centre_acc = p) %>%
select(participant, large_centre_acc, c_ld)
# side - small
acc_small_small <- acc_small %>%
mutate(sf_sd = slab,
sf_sd_acc = p) %>%
select(participant, sf_sd, sf_sd_acc)
acc_large_small <- acc_large %>%
mutate(sf_ld = slab,
sf_ld_acc = p) %>%
select(participant, sf_ld, sf_ld_acc)
# side - large
acc_small_large <- acc_small %>%
mutate(lf_sd = slab,
lf_sd_acc = p) %>%
select(participant, lf_sd, lf_sd_acc)
acc_large_large <- acc_large %>%
mutate(lf_ld = slab,
lf_ld_acc = p) %>%
select(participant, lf_ld, lf_ld_acc)
# combine all
df_acc <- norm_dat %>%
select(participant,trial, subject_position, hoop_pos, small_pos, large_pos, accuracy) %>%
mutate(small_dist = abs(small_pos - subject_position),
large_dist = abs(large_pos - subject_position),
c_sd = hoop_pos,
c_ld = hoop_pos,
sf_sd = 0,
sf_ld = 2 * hoop_pos,
lf_sd = 2 * hoop_pos,
lf_ld = 0) %>%
merge(acc_small_exp) %>%
merge(acc_large_exp) %>%
merge(acc_small_centre) %>%
merge(acc_large_centre) %>%
merge(acc_small_small) %>%
merge(acc_small_large) %>%
merge(acc_large_small) %>%
merge(acc_large_large) %>%
rowwise() %>%
mutate(Expected = mean(c(small_exp_acc, large_exp_acc)),
Centre = mean(c(small_centre_acc, large_centre_acc)),
Side_large = mean(c(lf_sd_acc, lf_ld_acc)),
Side_small = mean(c(sf_sd_acc, sf_ld_acc))) %>%
ungroup() %>%
select(participant, subject_position, hoop_pos, accuracy, Expected, Centre, Side_large, Side_small) %>%
group_by(participant) %>%
mutate(norm_dist = subject_position/hoop_pos,
slab_measures = factor(hoop_pos, labels = c("~90%", "~50% - 1", "~50%", "~50% + 1", "~50% + 2", "~10%")),
Side_large = ifelse(Side_large < .5, .5, Side_large),
Side_small = ifelse(Side_small < .5, .5, Side_small))
#### Plot accuracy ####
df_mean_hoop <- df_acc %>%
group_by(slab_measures) %>%
summarise(mu_hoop_pos = mean(hoop_pos))
plt_acc_regions <- df_acc %>%
merge(df_mean_hoop) %>%
group_by(participant, slab_measures, mu_hoop_pos) %>%
summarise(# Actual = mean(accuracy),
Expected = mean(Expected),
Centre = mean(Centre),
Side_L = mean(Side_large),
Side_S = mean(Side_small),
Optimal = pmax(Centre, Side_L, Side_S)) %>%
ungroup() %>%
group_by(slab_measures, mu_hoop_pos) %>%
mutate(sep_factor = as.numeric(slab_measures),
Best = pmax(Expected, Centre, Side_S, Side_L),
Worst = pmin(Expected, Centre, Side_S, Side_S),
ymin_Best = min(Best)-.01,
ymax_Best = max(Best),
ymin_Worst = min(Worst),
ymax_Worst = max(Worst)) %>%
ggplot(aes(x = mu_hoop_pos, Expected)) +
geom_ribbon(aes(x = mu_hoop_pos,
ymin = ymin_Worst,
ymax = ymax_Worst,
fill = "red"),
alpha = .3) +
geom_ribbon(aes(x = mu_hoop_pos,
ymin = ymin_Best,
ymax = ymax_Best,
fill = "green"),
alpha = .3) +
geom_line(aes(group = participant), alpha = .3) +
scale_y_continuous("Expected Accuracy", labels = scales::percent_format(accuracy = 1)) +
scale_x_continuous(expression(paste("Hoop Delta (", Delta, ")", sep = "")),
breaks = unique(df_mean_hoop$mu_hoop_pos),
labels = c("C", "-1", "0", "+1", "+2", "F")) +
# scale_x_continuous(expression(paste("Hoop Delta (", Delta, ")", sep = "")),
#                               breaks = c(1:6),
#                    labels = c("~90%", "~50% - 1", "~50%", "~50% + 1", "~50% + 2", "~10%")) +
# see::scale_color_flat() +
# see::scale_fill_flat() +
# ggsci::scale_fill_lancet() +
# ggsci::scale_colour_lancet() +
scale_colour_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
# see::scale_color_pizza_d() +
# see::scale_fill_pizza() +
guides(fill = F) +
theme_bw() +
theme(axis.text = element_text(size = 8),
axis.title.y = element_text(size = 8),
axis.title.x = element_text(size = 8),
panel.grid.minor = element_blank())
plt_acc_regions
# save
ggsave(plt_acc_regions, file = paste(save_route, "plt_acc_regions.png", sep = ""),
width = 5.6,
height = 3)
# cobine with ridges
# plt_save <- gridExtra::grid.arrange(plt_ridges, plt_acc_regions, ncol = 2)
plt_save <- cowplot::plot_gird(plt_ridges, plt_acc_regions, ncol = 2, labels = c("a)", "b)"), label_size = 8)
# cobine with ridges
# plt_save <- gridExtra::grid.arrange(plt_ridges, plt_acc_regions, ncol = 2)
plt_save <- cowplot::plot_grid(plt_ridges, plt_acc_regions, ncol = 2, labels = c("a)", "b)"), label_size = 8)
plt_save
ggsave(plt_save, file = paste(save_route, "exp_acc_pos_combined.png", sep = ""),
height = 2.5,
width = 5.6)
setwd("E:/Github/Breaking_symmetry/Analyses/Experiment_2_Two_throw")
rm(list = ls())
setwd("E:/Github/Breaking_symmetry/Analyses/Experiment_2_Two_throw")
#### Figures ####
# sort some figures for the two throw experiment
#### Library ####
library(tidyverse)
#### load data ####
load("scratch/df_part2")
#### constants ####
save_route <- c("../../Figures/Experiment_2_Two_throw/")
# remove trials where participants stood outside the range?
df_part2 %>%
mutate(outside = ifelse(abspos > 1, 1, 0)) %>%
group_by(outside) %>%
summarise(n = n()/length(df_part2$Num_throws))
# only lose 2.6% of trials...
# pre processing
df_part2 %>%
group_by(Participant) %>%
mutate(temp = as.numeric(as.factor(HoopDelta)),
slab_measures = factor(temp, labels = c("~90%", "~50% - 1",
"~50%", "~50% + 1",
"~50% + 2", "~10%")),
participant_num = as.numeric(as.factor(Participant)),
l_dist = abs(-HoopDelta - Position),
r_dist = abs(HoopDelta - Position)) %>%
select(-temp) %>%
ungroup() %>%
filter(abspos <= 1) -> df_part2
View(df_part2)
df_mu_hoop <- df_part2 %>%
group_by(slab_measures) %>%
summarise(mu_hoop_pos = mean(HoopDelta))
#### PLOTS ####
# some histograms?
plt_hist <- df_part2 %>%
ggplot(aes(x = abspos,
colour = Num_throws,
fill = Num_throws)) +
geom_histogram(position = "dodge",
binwidth = .1) +
# ggridges::stat_density_ridges(quantiles = 2, #quantile_fun = mean,
#                               quantile_lines = T,
#                               alpha = .15) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
facet_wrap(~slab_measures)
plt_hist
# ridges version
df_part2 %>%
ggplot(aes(
abspos,
slab_measures,
colour = Num_throws,
fill = Num_throws
)) +
ggridges::geom_density_ridges(alpha = .6,
stat = "binline",
bins = 10) +
facet_wrap(~Num_throws)
df_part2 %>%
ggplot(aes(x = abspos,
colour = Num_throws,
fill = Num_throws)) +
geom_density(alpha = .3) +
facet_wrap(~slab_measures) +
see::scale_color_flat() +
see::scale_fill_flat()
plt_box <- df_part2 %>%
ggplot(aes(slab_measures,
abspos,
colour = Num_throws,
fill = Num_throws)) +
geom_boxplot(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
scale_y_continuous("",
breaks = c(0, 1),
labels = c("Centre","Side")) +
scale_x_discrete(expression(paste("Hoop Delta (", Delta, ")", sep = "")),
labels = c("C", "-1", "0", "+1", "+2", "F")) +
theme_bw() +
# guides(colour = guide_legend("No. Throws"),
#        fill = guide_legend("No. Throws")) +
theme(
axis.title = element_text(size = 8),
axis.text = element_text(size = 8),
# legend.title = element_text(size = 8),
legend.title = element_blank(),
legend.text = element_text(size = 8)
)
plt_box
load("scratch/df_part1")
# change participant column to match df_part2
df_part1 <- df_part1 %>%
rename(Participant = participant)
# get predictions for accuracy
m = glm(data=df_part1, acc~slab:Participant, binomial)
# setting up dataframe
participants <- unique(df_part2$Participant)
slabs <- seq(0, max(df_part2$HoopDelta*2), 1)
acc_sep = tibble(Participant = rep(participants, each = length(slabs)),
slab = rep(slabs, length(participants)))
#tidy
rm(participants, slabs)
# add in prediction
acc_sep <- acc_sep %>%
group_by(Participant, slab) %>%
mutate(p = as.numeric(predict(m, data.frame(Participant = Participant,
slab = slab),
type = "response")[1])) %>%
ungroup()
# sort accuracy
acc_c_l <- acc_sep %>%
rename(c_l_dist = slab,
c_l_acc = p)
acc_c_r <- acc_sep %>%
rename(c_r_dist = slab,
c_r_acc = p)
acc_s_l <- acc_sep %>%
rename(s_l_dist = slab,
s_l_acc = p)
acc_s_r <- acc_sep %>%
rename(s_r_dist = slab,
s_r_acc = p)
acc_e_l <- acc_sep %>%
rename(l_dist = slab,
l_acc = p)
acc_e_r <- acc_sep %>%
rename(r_dist = slab,
r_acc = p)
# combine datasets
df_acc <- df_part2 %>%
mutate(c_l_dist = HoopDelta,
c_r_dist = HoopDelta,
s_l_dist = 0,
s_r_dist = HoopDelta*2) %>%
merge(acc_c_l) %>%
merge(acc_c_r) %>%
merge(acc_s_l) %>%
merge(acc_s_r) %>%
merge(acc_e_l) %>%
merge(acc_e_r) %>%
rowwise() %>%
mutate(Expected = mean(c(l_acc, r_acc)),
Centre = mean(c(c_l_acc, c_r_acc)),
Side = mean(c(s_l_acc, s_r_acc))) %>%
select(Participant, Num_throws, Position, HoopDelta, switchSlab,
slab_measures, Expected, Centre, Side) %>%
ungroup()
plt_ribbon <- df_acc %>%
merge(df_mu_hoop) %>%
group_by(Participant, slab_measures, mu_hoop_pos, Num_throws) %>%
summarise(Expected = mean(Expected),
Centre = mean(Centre),
Side = mean(Side)) %>%
ungroup() %>%
group_by(slab_measures, mu_hoop_pos) %>%
mutate(sep_factor = as.numeric(slab_measures),
Best = pmax(Expected, Centre, Side),
Worst = pmin(Expected, Centre, Side),
ymin_Best = min(Best)-.01,
ymax_Best = max(Best),
ymin_Worst = min(Worst),
ymax_Worst = max(Worst)) %>%
ggplot(aes(mu_hoop_pos, Expected)) +
geom_ribbon(aes(x = mu_hoop_pos,
ymin = ymin_Worst,
ymax = ymax_Worst,
fill = "red"),
alpha = .35) +
geom_ribbon(aes(x = mu_hoop_pos,
ymin = ymin_Best,
ymax = ymax_Best,
fill = "green"),
alpha = .35) +
scale_y_continuous("Expected Accuracy", labels = scales::percent_format(accuracy = 1)) +
scale_x_continuous(expression(paste("Hoop Delta (", Delta, ")", sep = "")),
breaks = unique(df_mu_hoop$mu_hoop_pos),
# labels = c("~90%", "~50% - 1", "~50%", "~50% + 1", "~50% + 2", "~10%")
labels = c("C", "-1", "0", "+1", "+2", "F")
) +
# ggsci::scale_color_lancet() +
# ggsci::scale_fill_lancet() +
scale_colour_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
geom_line(aes(group = interaction(Participant, Num_throws)),
size = .5,
alpha = .2) +
theme_bw() +
theme(
strip.text = element_text(size= 8),
# axis.text.x = element_text(angle = 90, vjust = .5),
axis.title = element_text(size = 8),
axis.text = element_text(size = 8),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
panel.grid.minor = element_blank()
) +
facet_wrap(~Num_throws) +
guides(fill = F)
plt_ribbon
head(df_part2)
head(df_acc)
unique(df_acc$slab_measures)
df_acc %>%
filter(slab_measures == "~10%")
df_acc %>%
filter(slab_measures == "~10%") %>%
# group_by(Num_throws) %>%
ggplot(aes(Expected,
colour = Num_throws,
fill = Num_throws)) +
geom_density(position = "dode",
alpha = .3)
df_acc %>%
filter(slab_measures == "~10%") %>%
# group_by(Num_throws) %>%
ggplot(aes(Expected,
colour = Num_throws,
fill = Num_throws)) +
geom_density(position = "dodge",
alpha = .3)
df_acc %>%
filter(slab_measures == "~10%") %>%
group_by(Num_throws) %>%
summarise(mu = mean(Expected))
df_acc %>%
# filter(slab_measures == "~10%") %>%
group_by(Num_throws) %>%
summarise(mu = mean(Expected))
df_acc %>%
# filter(slab_measures == "~10%") %>%
# group_by(Num_throws) %>%
group_by(slab_measures) %>%
summarise(mu = mean(Expected))
df_acc %>%
# filter(slab_measures == "~10%") %>%
# group_by(Num_throws) %>%
group_by(slab_measures, Num_throws) %>%
summarise(mu = mean(Expected))
df_acc %>%
# filter(slab_measures == "~10%") %>%
# group_by(Num_throws) %>%
group_by(slab_measures, Num_throws) %>%
summarise(mu = mean(Expected)) %>%
spread(Num_throws, mu)
df_acc %>%
# filter(slab_measures == "~10%") %>%
ggplot(aes(Expected,
colour = Num_throws,
fill = Num_throws)) +
geom_density(position = "dodge",
alpha = .3) +
facet_wrap(~slab_meausures)
df_acc %>%
# filter(slab_measures == "~10%") %>%
ggplot(aes(Expected,
colour = Num_throws,
fill = Num_throws)) +
geom_density(position = "dodge",
alpha = .3) +
facet_wrap(~slab_measures)
df_acc %>%
# filter(slab_measures == "~10%") %>%
# group_by(Num_throws) %>%
group_by(slab_measures, Num_throws) %>%
summarise(mu = mean(Expected)) %>%
spread(Num_throws, mu)
head(df_part2)
load("scratch/df_part2")
head(df_part2)
load("scratch/df_part2_norm")
load("scratch/df_part2_OT")
load("scratch/df_part2_TT")
head(df_part2_OT)
rm(list = ls())
#### Level 3 group second semster 2016/17 ####
# Two Throw experiment
# This is to combine the two datasets and make one graph
# Written by Warren James
#### load libraries ####
library(tidyverse)
library(psyphy)
library(reshape2)
library(lme4)
library(ggthemes)
#### Any Functions ####
#### Notes #####
#### Any constants ####
Hoop_size <- 0.46
#### Load data ####
load("scratch/df_part2_OT")
load("scratch/df_part2_TT")
#### sort data ####
# Add grouping variable
df_part2_OT$Num_throws <- "One-Throw"
df_part2_TT$Num_throws <- "Two-Throws"
# select columns to keep
OT <- select(df_part2_OT,
Participant,
Num_throws,
Trial.no.,
Position,
Accuracy,
HoopDelta,
abspos,
switchSlab)
TT <- df_part2 %>%
select(Participant,
Num_throws,
Trial.no.,
Position,
HoopDelta,
abspos,
switchSlab)
head(df_part2_TT)
