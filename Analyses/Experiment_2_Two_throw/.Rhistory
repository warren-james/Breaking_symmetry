draws_hdi_overall)
output <- list(draws_df,
plt_estimates,
prop_above.5,
Hdi_pos)
names(output) <- c("draws_df",
"plt_estimates",
"Prop_above.5",
"draws_HDI")
return(output)
}
#### Load in data ####
load("scratch/df_part2_norm")
# sort out data for modelling?
model_data <- norm_dat %>%
select(participant, hoop_pos, norm_dist) %>%
group_by(participant) %>%
mutate(norm_hoop_pos = hoop_pos/max(hoop_pos)) %>%
ungroup() %>%
filter(norm_dist >= -1, norm_dist <= 1) %>%
mutate(norm_dist2 = (norm_dist + 1)/2,
norm_dist2 = squash(norm_dist2, 1, 0, 1e-4))
# Should we model this as a beta dist and make centre <- 0.5?
#### Quick Plots ####
# density plot
model_data %>%
ggplot(aes(norm_dist)) +
geom_density() +
geom_histogram(aes(y = ..density..))
m1 <- brm(norm_dist2 ~ norm_hoop_pos + (norm_hoop_pos|participant),
data = model_data,
family = "beta",
prior = c(set_prior("student_t(3,0,3)", class = "b")),
cores = 1,
chains = 1,
iter = 2000,
warmup = 1000)
save(m1, file = "modelling/model_outputs/m1")
# draw from samples
draws <- draw_post(m1, model_data)
# save
save(draws, file = "modelling/model_outputs/m1_draws")
draws
head(draws)
HDI_all <- draws$draws_HDI[[2]]
HDI_all
p_above_5 <- draws$Prop_above.5
p_above_5
rm(list = ls())
setwd("F:/Uni/Github/Breaking_symmetry/Analyses/Experiment_4_Prob")
#### Analysis for Probability study ####
# These are the analyses that will be included in the paper
#### Library ####
library(tidyverse)
library(tidybayes)
library(lme4)
library(brms)
#### functions ####
# should I write a function for plotting predictions?
draw_post <- function(model) {
draws_df <- model %>%
spread_draws(b_Intercept,
b_bias_typeSymmetric,
b_dist_typeFar,
`b_bias_typeSymmetric:dist_typeFar`) %>%
mutate(Biastype_Bias.Disttype_Close = b_Intercept,
Biastype_Symmetric.Disttype_Close = b_Intercept + b_bias_typeSymmetric,
Biastype_Bias.Disttype_Far = b_Intercept + b_dist_typeFar,
Biastype_Symmetric.Disttype_Far = b_Intercept + b_bias_typeSymmetric +
`b_bias_typeSymmetric:dist_typeFar`) %>%
select(.iteration,
Biastype_Bias.Disttype_Close,
Biastype_Symmetric.Disttype_Close,
Biastype_Bias.Disttype_Far,
Biastype_Symmetric.Disttype_Far) %>%
gather(c(Biastype_Bias.Disttype_Close:Biastype_Symmetric.Disttype_Far),
key = "parameter",
value = "estimate") %>%
separate(c(parameter),
into = c("temp1", "temp2"),
sep = "\\.") %>%
separate(temp1,
into = c("remove", "Bias_type")) %>%
select(-remove) %>%
separate(temp2,
into = c("remove", "Dist_type")) %>%
select(-remove)
# estimates
plt_estimates <- draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
ggplot(aes(prop, colour = Bias_type,
fill = Bias_type)) +
geom_density(alpha = .3) +
# geom_histogram(position = "dodge") +
facet_wrap(~Dist_type)
# difference
# groups
diff_bias <- draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
select(-estimate) %>%
spread(Bias_type,
prop) %>%
mutate(diff = Bias - Symmetric)
# separation
diff_dist <- draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
select(-estimate) %>%
spread(Dist_type,
prop) %>%
mutate(diff = Far - Close)
# plotting this
plt_diff <- diff_bias %>%
ggplot(aes(diff, colour = Dist_type,
fill = Dist_type)) +
geom_density(alpha = .3)
prop_diff <- diff_bias %>%
mutate(above0 = ifelse(diff > 0, 1, 0)) %>%
group_by(Dist_type) %>%
summarise(above0 = mean(above0))
# get hdi
draws_hdi <- draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
group_by(Bias_type, Dist_type) %>%
summarise(lower = hdci(prop)[1,1],
mean = mean(prop),
upper = hdci(prop)[1,2],
med = median(prop))
# get hdi difference
# bias
hdi_bias_diff_overall <- diff_bias %>%
summarise(lower = hdci(diff)[1,1],
mu = mean(diff),
upper = hdci(diff)[1,2])
hdi_bias_diff_dist <- diff_bias %>%
group_by(Dist_type) %>%
summarise(lower = hdci(diff)[1,1],
mu = mean(diff),
upper = hdci(diff)[1,2])
# dist
hdi_dist_diff_overall <- diff_dist %>%
summarise(lower = hdci(diff)[1,1],
mu = mean(diff),
upper = hdci(diff)[1,2])
hdi_dist_diff_bias <- diff_dist %>%
group_by(Bias_type) %>%
summarise(lower = hdci(diff)[1,1],
mu = mean(diff),
upper = hdci(diff)[1,2])
Hdi_list <- list(hdi_bias_diff_dist,
hdi_bias_diff_overall,
hdi_dist_diff_overall,
hdi_dist_diff_bias)
output <- list(draws_df,
plt_estimates,
diff,
plt_diff,
Hdi_list,
draws_hdi)
names(output) <- c("draws_df",
"plt_estimates",
"difference_df",
"plt_difference",
"HDI_Diff",
"draws_HDI")
return(output)
}
#### load data ####
load("scratch/new_data/df_part2_fixed")
# processing
df_model <- df_part2_fixed %>%
# filter(separation != 640) %>% # remove furthest point for now
select(participant, dist_type, bias_type, separation, st_box, accuracy) %>%
mutate(Ml_fix = ifelse(st_box == "most likely", 1, 0),
S_fix = ifelse(st_box != "centre", 1, 0))
head(df_model)
bm_fix_like_dt <- brm(Ml_fix ~ (bias_type + dist_type)^2 + (dist_type * bias_type|participant),
data = df_model,
family = "bernoulli",
prior = c(set_prior("student_t(3, -.7, 4)", class = "b"),
set_prior("student_t(3, 0, 4)", class = "b", coef = "bias_typeSymmetric"),
set_prior("student_t(3, 0, 4)", class = "b", coef = "bias_typeSymmetric:dist_typeFar"),
set_prior("student_t(3, 0, 4)", class = "b", coef = "dist_typeFar")),
chains = 1,
iter = 1000,
warmup = 500)
summary(bm_fix_like_dt)
draw_post(bm_fix_like_dt)
load("modelling/BRMS/model_output/bm_fix_like_dt_draws")
load("modelling/BRMS/model_output/bm_fix_like_dt_draws")
draw_post(bm_fix_like_dt)
fix_like_post
fix_like_post$HDI_Diff
draw_post(bm_fix_like_dt)$HDI_diff
draw_post(bm_fix_like_dt)$HDI_Diff
save(fix_like_post, file = "modelling/BRMS/model_output/bm_fix_like_dt_draws")
rm(list = ls())
setwd("F:/Uni/Github/Breaking_symmetry/Supplementary")
library(tidyverse)
# library
library(tidybayes)
library(tidyverse)
# Load in everything from the modelling
load("../Analyses/Experiment_4_Prob/modelling/BRMS/model_output/bm_fix_like_dt")
load("../Analyses/Experiment_4_Prob/modelling/BRMS/model_output/bm_fix_like_dt_draws")
draws <- fix_like_post$draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
select(-estimate)
# Proportion fixations to most likely side
plt_me_Bias <- draws %>%
ggplot(aes(prop,
colour = Bias_type,
fill = Bias_type)) +
geom_density(alpha = .3) +
theme_bw() +
theme(axis.title.x = element_blank()) +
labs(fill = "Bias Type",
colour = "Bias Type") +
#       "Proportion of Fixations to Most Likely Side") +
see::scale_color_flat() +
see::scale_fill_flat() +
scale_x_continuous(labels = scales::percent_format(accuracy = 1))
plt_me_Dist <- draws %>%
ggplot(aes(prop,
colour = Dist_type,
fill = Dist_type)) +
geom_density(alpha = .3) +
theme_bw() +
theme(axis.title.x = element_blank()) +
labs(fill = "Distance Type",
colour = "Distance Type") +
#       x = "Proportion of Fixations to Most Likely Side") +
see::scale_color_flat() +
see::scale_fill_flat() +
scale_x_continuous(labels = scales::percent_format(accuracy = 1))
plt_interaction <- fix_like_post$plt_estimates +
theme_bw() +
see::scale_color_flat() +
see::scale_fill_flat() +
labs(x = "Proportion of Fixations to Most Likely Side",
colour = "Bias Type",
fill = "Bias Type") +
scale_x_continuous(labels = scales::percent_format(accuracy = 1))
gridExtra::grid.arrange(plt_me_Dist, plt_me_Bias, plt_interaction)
# HDI_values
HDI_Bias <- draws %>%
group_by(Bias_type) %>%
summarise(lower = hdi(prop)[,1],
mu = mean(prop),
upper = hdi(prop)[,2])
HDI_Dist <- draws %>%
group_by(Dist_type) %>%
summarise(lower = hdi(prop)[,1],
mu = mean(prop),
upper = hdi(prop)[,2])
HDI_interaction <- draws %>%
group_by(Bias_type, Dist_type) %>%
summarise(lower = hdi(prop)[,1],
mu = mean(prop),
upper = hdi(prop)[,2])
# Diff values
Diff_Bias <- draws %>%
spread(Bias_type,
prop) %>%
mutate(diff = Bias - Symmetric,
Bias_bigger = ifelse(diff > 0, 1, 0))
D_bias_lower <- hdci(Diff_Bias$diff)[,1]
D_bias_mu <- mean(Diff_Bias$diff)
D_bias_upper <- hdci(Diff_Bias$diff)[,2]
p_bias_bigger <- mean(Diff_Bias$Bias_bigger)
Diff_Dist <- draws %>%
spread(Dist_type,
prop) %>%
mutate(diff = Far - Close,
Far_bigger = ifelse(diff > 0, 1, 0))
D_dist_lower <- hdci(Diff_Dist$diff)[,1]
D_dist_mu <- mean(Diff_Dist$diff)
D_dist_upper <- hdci(Diff_Dist$diff)[,2]
p_far_bigger <- mean(Diff_Dist$Far_bigger)
Diff_Interaction_compdist <- Diff_Dist %>%
group_by(Bias_type) %>%
summarise(p_Far_bigger = mean(Far_bigger),
lower = hdci(diff)[,1],
mu = mean(diff),
upper = hdci(diff)[,2])
Diff_Interaction_compbias <- Diff_Bias %>%
group_by(Dist_type) %>%
summarise(p_Bias_bigger = mean(Bias_bigger),
lower = hdci(diff)[,1],
mu = mean(diff),
upper = hdci(diff)[,2])
HDI_interaction
Diff_Interaction_compbias
Diff_Interaction_compdist
Diff_Bias
D_bias_mu
HDI_Bias
HDI_Bias[1,3]
Diff_Interaction_compbias
HDI_Dist
HDI_Interaction
HDI_interaction
HDI_Bias <- draws %>%
group_by(Bias_type) %>%
summarise(lower = hdi(prop)[,1],
mu = mean(prop),
upper = hdi(prop)[,2],
med = median(prop))
HDI_Dist <- draws %>%
group_by(Dist_type) %>%
summarise(lower = hdi(prop)[,1],
mu = mean(prop),
upper = hdi(prop)[,2],
med = median(prop))
HDI_interaction <- draws %>%
group_by(Bias_type, Dist_type) %>%
summarise(lower = hdi(prop)[,1],
mu = mean(prop),
upper = hdi(prop)[,2],
med = median(prop))
HDI_interaction
Diff_Interaction_compbias
setwd("F:/Uni/Github/Breaking_symmetry/Analyses/Experiment_2_Two_throw")
rm(list = ls())
#### Modelling of the Two Hoops data ####
# Using the Bayes approach now
#### Library ####
library(tidybayes)
library(tidyverse)
library(brms)
library(rstan)
#### Constants ####
#### Functions ####
# This function squashes the range of values so as to be used in a beta regression
squash <- function(y, max, min, squash){
y <- y * ((max-squash) - (min + squash)) + (min + squash)
}
# get draws
draw_post <- function(model, data){
close <- min(data$norm_delta)
mid <- median(data$norm_delta)
far <- max(data$norm_delta)
draws_df <- model %>%
spread_draws(b_Intercept,
b_norm_delta,
b_Num_throwsTwoMThrows,
`b_norm_delta:Num_throwsTwoMThrows`) %>%
mutate(One_throw = b_Intercept,
Norm_delta_OT = b_norm_delta,
Two_throw = b_Num_throwsTwoMThrows,
Norm_delta_TT = `b_norm_delta:Num_throwsTwoMThrows`) %>%
select(-b_Intercept,
-b_norm_delta,
-b_Num_throwsTwoMThrows,
-`b_norm_delta:Num_throwsTwoMThrows`) %>%
mutate(hoop_Close.One_throw = One_throw + (close * Norm_delta_OT),
hoop_Mid.One_throw = One_throw + (mid * Norm_delta_OT),
hoop_Far.One_throw = One_throw + (far * Norm_delta_OT),
hoop_Close.Two_throw = One_throw + Two_throw + (close * Norm_delta_TT),
hoop_Mid.Two_throw = One_throw + Two_throw + (mid * Norm_delta_TT),
hoop_Far.Two_throw = One_throw + Two_throw + (far * Norm_delta_TT)) %>%
select(.iteration,
hoop_Close.One_throw,
hoop_Mid.One_throw,
hoop_Far.One_throw,
hoop_Close.Two_throw,
hoop_Mid.Two_throw,
hoop_Far.Two_throw) %>%
gather(c(hoop_Close.One_throw:hoop_Far.Two_throw),
key = "parameter",
value = "estimate") %>%
separate(parameter,
into= c("Dist_type", "Num_throws"),
sep = "\\.") %>%
separate(Dist_type,
into = c("remove", "Dist_type"),
sep = "_") %>%
select(-remove)
# mean_vals
mu_vals <- draws_df %>%
group_by(Dist_type, Num_throws) %>%
summarise(mu = mean(estimate),
med = median(estimate)) %>%
mutate(mu = boot::inv.logit(mu),
med = boot::inv.logit(med))
# estimates
plt_estimates <- draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
ggplot(aes(prop,
colour = Num_throws,
fill = Num_throws)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
scale_x_continuous("Normalised Delta") +
theme_bw() +
coord_cartesian(expand = 0) +
geom_vline(data = mu_vals,
aes(xintercept = mu,
colour = Num_throws),
linetype = "dashed") +
facet_wrap(~Dist_type)
# get diff
# overall
diff_overall <- draws_df %>%
group_by(.iteration, Num_throws) %>%
summarise(estimate = boot::inv.logit(mean(estimate))) %>%
spread(Num_throws, estimate) %>%
ungroup() %>%
mutate(diff = One_throw - Two_throw)
above0_overall <- diff_overall %>%
mutate(above0 = ifelse(diff > 0,1,0)) %>%
summarise(above0 = mean(above0))
plt_diff_over <- diff_overall %>%
ggplot(aes(diff)) +
geom_density(colour = "blue",
fill = "blue",
alpha = .3)
# by dist_type
diff_dist_type <- draws_df %>%
mutate(estimate = boot::inv.logit(estimate)) %>%
spread(Num_throws, estimate) %>%
ungroup() %>%
mutate(diff = One_throw - Two_throw)
plt_diff_dist <- diff_dist_type %>%
ggplot(aes(diff,
colour = Dist_type,
fill = Dist_type)) +
geom_density(alpha = .3)
above0_dist <- diff_dist_type %>%
group_by(Dist_type) %>%
mutate(above0 = ifelse(diff > 0,1,0)) %>%
summarise(above0 = mean(above0))
# get hdi of diff
# overall
draws_hdi_overall <- draws_df %>%
group_by(Num_throws) %>%
mutate(prop = boot::inv.logit(estimate)) %>%
summarise(lower = hdi(prop)[,1],
mean = mean(prop),
upper = hdi(prop)[,2],
med = median(prop))
draws_hdi_diff_overall <- diff_overall %>%
summarise(lower = hdi(diff)[,1],
mean = mean(diff),
upper = hdi(diff)[,2])
# dist_type
draws_hdi_dist <- draws_df %>%
group_by(Num_throws, Dist_type) %>%
mutate(prop = boot::inv.logit(estimate)) %>%
summarise(lower = hdi(prop)[,1],
mean = mean(prop),
upper = hdi(prop)[,2],
med = median(prop))
draws_hdi_diff_dist <- diff_dist_type %>%
group_by(Dist_type) %>%
summarise(lower = hdi(diff)[,1],
mean = mean(diff),
upper = hdi(diff)[,2])
plts <- list(plt_estimates,
plt_diff_over,
plt_diff_dist)
hdis <- list(draws_hdi_overall,
draws_hdi_diff_overall,
draws_hdi_dist,
draws_hdi_diff_dist)
above0 <- list(above0_overall,
above0_dist)
output <- list(draws_df,
plts,
hdis,
above0)
names(output) <- c("Draws_df",
"Plots",
"HDIs",
"Above_0")
return(output)
}
load("scratch/df_part2")
model_data_pos <- df_part2 %>%
group_by(Participant) %>%
mutate(norm_delta = HoopDelta/max(HoopDelta)) %>%
ungroup() %>%
filter(abspos <= 1) %>%
mutate(abspos = squash(abspos, 1, 0, 1e-4))
m1_pos <- brm(abspos ~ norm_delta * Num_throws + (norm_delta * Num_throws|Participant),
family = "beta",
data = model_data_pos,
prior = c(set_prior("student_t(3,0,3)", class = "b")),
cores = 1,
chains = 1,
iter = 2000,
warmup = 1000)
draw_post(m1_pos, model_data_pos)
draws <- draw_post(m1_pos, model_data_pos)
save(m1_pos, file = "modelling/model_outputs/m1_pos")
save(draws, file = "modelling/model_outputs/m1_pos_draws")
load("../Analyses/Experiment_2_Two_throw/modelling/model_outputs/m1_pos")
load("../Analyses/Experiment_2_Two_throw/modelling/model_outputs/m1_pos_draws")
draws
plt_examples <- draws$Plots[1]
plt_examples
plt_difference <- draws$Plots[3]
plt_difference
gridExtra::grid.arrange(plt_examples, plt_difference)
plt_examples
plt_difference
plt_difference <- draws$Plots[3][[1]]
plt_difference
plt_difference <- draws$Plots[3][[1]] +
theme_bw() +
see::scale_color_flat() +
see::scale_fill_flat()
