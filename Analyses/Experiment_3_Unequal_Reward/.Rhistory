scale_y_continuous("Average Earnings per trial",
breaks = seq(0,40,5),
labels = c("0p", "5p", "10p", "15p", "20p", "25p", "30p", "35p", "40p")) +
scale_x_continuous(expression(paste("Hoop Delta (", Delta, ")", sep = "")),
limits = c(),
breaks = unique(df_meanhoop$mean_pos),
labels = c("C", "75%", "25%", "F")) +
theme(axis.text = element_text(size = 8),
axis.title.y = element_text(size = 8),
axis.title.x = element_text(size = 8),
panel.grid.minor = element_blank())
df_part2 %>%
group_by(Participant, slab_measures, overall_hoop_pos) %>%
summarise(mu = mean(Winnings)) %>%
ggplot(aes(slab_measures, mu)) +
geom_path(aes(group = Participant),
alpha = .3) +
theme_bw() +
scale_y_continuous("Average Earnings per trial",
breaks = seq(0,40,5),
labels = c("0p", "5p", "10p", "15p", "20p", "25p", "30p", "35p", "40p"))
df_part2 %>%
group_by(Participant, slab_measures, overall_hoop_pos) %>%
summarise(mu = mean(Winnings)) %>%
ggplot(aes(slab_measures, mu)) +
geom_path(aes(group = Participant),
alpha = .3) +
theme_bw() +
scale_y_continuous("Average Earnings per trial",
breaks = seq(0,40,5),
labels = c("0p", "5p", "10p", "15p", "20p", "25p", "30p", "35p", "40p")) +
theme(axis.text = element_text(size = 8),
axis.title.y = element_text(size = 8),
axis.title.x = element_text(size = 8),
panel.grid.minor = element_blank())
df_part2 %>%
group_by(Participant, slab_measures, overall_hoop_pos) %>%
summarise(mu = mean(Winnings)) %>%
ggplot(aes(slab_measures, mu)) +
geom_path(aes(group = Participant),
alpha = .3) +
theme_bw() +
scale_y_continuous("Average Earnings per trial",
breaks = seq(0,40,5),
labels = c("0p", "5p", "10p", "15p", "20p", "25p", "30p", "35p", "40p")) +
scale_x_continuous(expression(paste("Hoop Delta (", Delta, ")", sep = "")))) +
theme(axis.text = element_text(size = 8),
axis.title.y = element_text(size = 8),
axis.title.x = element_text(size = 8),
panel.grid.minor = element_blank())
df_part2 %>%
group_by(Participant, slab_measures, overall_hoop_pos) %>%
summarise(mu = mean(Winnings)) %>%
ggplot(aes(slab_measures, mu)) +
geom_path(aes(group = Participant),
alpha = .3) +
theme_bw() +
scale_y_continuous("Average Earnings per trial",
breaks = seq(0,40,5),
labels = c("0p", "5p", "10p", "15p", "20p", "25p", "30p", "35p", "40p")) +
scale_x_continuous(expression(paste("Hoop Delta (", Delta, ")", sep = ""))) +
theme(axis.text = element_text(size = 8),
axis.title.y = element_text(size = 8),
axis.title.x = element_text(size = 8),
panel.grid.minor = element_blank())
df_part2 %>%
group_by(Participant, slab_measures, overall_hoop_pos) %>%
summarise(mu = mean(Winnings)) %>%
ggplot(aes(slab_measures, mu)) +
geom_path(aes(group = Participant),
alpha = .3) +
theme_bw() +
scale_y_continuous("Average Earnings per trial",
breaks = seq(0,40,5),
labels = c("0p", "5p", "10p", "15p", "20p", "25p", "30p", "35p", "40p")) +
scale_x_discrete(expression(paste("Hoop Delta (", Delta, ")", sep = ""))) +
theme(axis.text = element_text(size = 8),
axis.title.y = element_text(size = 8),
axis.title.x = element_text(size = 8),
panel.grid.minor = element_blank())
rm(list = ls())
setwd("E:/Github/Breaking_symmetry/Analyses/Experiment_3_Unequal_Reward")
#### Make figures ####
# These are the figures for the unequal reward study
#### Library ####
library(tidyverse)
#### load in data ####
load("scratch/data/model_data")
load("scratch/data/df_part2")
#### Constants ####
save_route <- "../../Figures/Experiment_3_Unequal_Reward/"
plt_space <- .5
#### Functions ####
#### Pre-processing #####
# sort the labels for their standing positions so we have some consitencies
model_data <- model_data %>%
group_by(Participant) %>%
mutate(slab_measures = as.numeric(as.factor(Norm_Delta)),
slab_measures = factor(slab_measures,
labels = c("C", "75%", "25%", "F")))
df_part2 <- df_part2 %>%
group_by(Participant) %>%
mutate(Norm_Delta = HoopDelta/max(HoopDelta),
slab_measures = as.numeric(as.factor(Norm_Delta)),
slab_measures = factor(slab_measures,
labels = c("C", "75%", "25%", "F")),
dist_type = ifelse(slab_measures %in% c("C", "75%"), "close", "far"))
#### Make plots ####
#### Position ####
#### Density plot ####
# density plot
model_data <- model_data %>%
group_by(Participant) %>%
mutate(slab_measures = as.numeric(as.factor(Norm_Delta)),
slab_measures = factor(slab_measures,
labels = c("C", "75%", "25%", "F")))
df_part2 <- df_part2 %>%
group_by(Participant) %>%
mutate(Norm_Delta = HoopDelta/max(HoopDelta),
slab_measures = as.numeric(as.factor(Norm_Delta)),
slab_measures = factor(slab_measures,
labels = c("C", "75%", "25%", "F")),
dist_type = ifelse(slab_measures %in% c("C", "75%"), "close", "far"))
#### Make plots ####
#### Position ####
#### Density plot ####
# density plot
model_data %>%
ggplot(aes(Norm_Dist,
colour = Gamble_Type,
fill = Gamble_Type)) +
geom_density(alpha = .3) +
# geom_histogram(aes(y = ..density..),
#                position = "dodge") +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~dist_type)
#### Box plot ####
# box plots
plt_box <- model_data %>%
ggplot(aes(slab_measures,
Norm_Dist,
colour = Gamble_Type,
fill = Gamble_Type)) +
geom_boxplot(alpha = .3) +
scale_x_discrete(expression(paste("Hoop Delta (", Delta, ")", sep = ""))) +
scale_y_continuous(breaks = c(0,1),
labels = c("Centre", "Side")) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
theme(
axis.title.y = element_blank(),
# legend.position = "right",
legend.position = "none",
legend.box.margin = margin(t = -10, r = -10, b = -10, l = -10),
legend.box = "vertical",
axis.text = element_text(size = 7),
axis.title.x = element_text(size = 7),
plot.margin = unit(c(plt_space, plt_space, plt_space, plt_space), "cm")
) +
labs(colour = "Split Type",
fill = "Split Type")
plt_box
# save
ggsave(paste(save_route, "box_plot_standing_pos", ".png", sep = ""),
height = 3,
width = 5.6)
#### Prop of gamble types ####
# prop of gamble types
# can either do percentages since there were some trials that were excluded from the analysis since
# they were outside the range
plt_prop_gamble_types <- model_data %>%
ungroup() %>%
mutate(Participant = as.factor(as.numeric(Participant))) %>%
group_by(Participant, Gamble_Type) %>%
summarise(n = n()) %>%
ungroup() %>%
group_by(Participant) %>%
mutate(n_total = sum(n),
n_prop = n/n_total) %>%
ggplot(aes(Participant, n_prop, fill = Gamble_Type)) +
see::scale_fill_flat() +
geom_bar(stat = "identity", width = 0.5) +
theme_bw() +
scale_y_continuous("Percent of each split", labels = scales::percent_format(accuracy = 1)) +
#scale_y_discrete(limits = seq(0,1,.25)) +
theme(
legend.position = "none",
legend.text = element_text(size = 7),
axis.text = element_text(size = 7),
axis.title.y = element_text(size = 7),
axis.title.x = element_blank(),
plot.margin = unit(c(plt_space, plt_space, plt_space, plt_space), "cm")
)
plt_prop_gamble_types$labels$fill <- "Split"
plt_prop_gamble_types
# save
ggsave(paste(save_route, "Percent_split", ".png", sep = ""),
height = 3,
width = 5.6)
#### histogram version ####
# remake this as a hisotgram
plt_hist <- model_data %>%
mutate(dist_type = ifelse(dist_type == "far", "Far", "Close")) %>%
group_by(Participant, dist_type) %>%
mutate(count = n()) %>%
ungroup() %>%
group_by(Participant, Gamble_Type, dist_type, count) %>%
summarise(n = n()) %>%
ungroup() %>%
# make a column for the "interaction"
mutate(int = paste(Gamble_Type, dist_type, sep = "_")) %>%
select(Participant, count, n, int) %>%
complete(int, nesting(Participant),
fill = list(n = 0)) %>%
# separate
separate(int,
into = c("Gamble_Type", "Dist_Type"),
sep = "_") %>%
# need to use if else statement here for sanity
mutate(prop = ifelse(n == 0, 0, n/count)) %>%
filter(Gamble_Type != "Equal") %>%
ggplot(aes(prop,
colour = Dist_Type,
fill = Dist_Type)) +
geom_histogram(position = "dodge",
binwidth = .1,
alpha = .3) +
# geom_density(alpha = .3) +
ggsci::scale_color_aaas() +
ggsci::scale_fill_aaas() +
# see::scale_color_flat() +
# see::scale_fill_flat() +
scale_x_continuous("Proportion of Unequal splits",
breaks = seq(0,1,.2),
labels = scales::percent_format(accuracy = 1)) +
theme_bw() +
theme(legend.title = element_blank(),
legend.text = element_text(size = 8),
axis.text = element_text(size = 8),
axis.title.y = element_text(size = 8),
axis.title.x = element_text(size = 8)) +
guides(fill = guide_legend("Distance"),
colour = guide_legend("Distance"))
plt_hist
#### Bar plot version ####
plt_bar <- model_data %>%
group_by(Gamble_Type, slab_measures) %>%
summarise(n = n()) %>%
ungroup() %>%
group_by(slab_measures) %>%
mutate(count = sum(n)) %>%
ungroup() %>%
mutate(prop = n/count) %>%
filter(Gamble_Type != "Unequal") %>%
ggplot(aes(x = slab_measures, y = prop)) +
geom_bar(stat = "identity",
colour = "black",
fill = "#2980b9",
alpha = .3)  +
scale_x_discrete(expression(paste("Hoop Delta (", Delta, ")", sep = ""))) +
scale_y_continuous("Percent of Equal split choices",
labels = scales::percent_format(accuracy = 1),
limits = c(0,1)) +
coord_cartesian(expand = F,
ylim = c(0,1),
xlim = c(.4,4.6)) +
theme_bw() +
theme(
axis.text = element_text(size = 8),
axis.title.y = element_text(size = 8),
axis.title.x = element_text(size = 8),
plot.margin = unit(c(plt_space, plt_space, plt_space, plt_space), "cm")
)
plt_bar
# combine the previous two plots
# plt_save <- gridExtra::grid.arrange(plt_box, plt_prop_gamble_types, ncol = 2)
plt_save <- gridExtra::grid.arrange(plt_box, plt_bar, ncol = 2)
ggsave(plt_save,
file = paste(save_route, "combined_standing_prop_split", ".png", sep = ""),
height = 2.5,
width = 5.6)
#### new idea ####
# more bar plots but broken down by "out of 3"
df_part2 %>%
group_by(Participant, slab_measures) %>%
mutate(count = n()) %>%
ungroup() %>%
group_by(Participant, Gamble_Type, slab_measures, count) %>%
summarise(n = n()) %>%
ungroup() %>%
# make a column for the "interaction"
mutate(int = paste(Gamble_Type, slab_measures, sep = "_")) %>%
select(Participant, count, n, int) %>%
complete(int, nesting(Participant),
fill = list(n = 0)) %>%
# separate
separate(int,
into = c("Gamble_Type", "slab_measures"),
sep = "_") %>%
# need to use if else statement here for sanity
mutate(prop = ifelse(n == 0, 0, n/count)) %>%
ungroup() %>%
mutate(out_of_3 = paste(prop*3, " / 3", sep = "")) %>%
filter(Gamble_Type == "Equal") %>%
group_by(slab_measures, out_of_3) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(slab_measures = factor(slab_measures,
c("C", "75%", "25%", "F"))) %>%
ggplot(aes(out_of_3, n,
colour = slab_measures,
fill = slab_measures)) +
geom_bar(stat = "identity",
alpha = .3,
position = "dodge") +
scale_y_continuous("Number of Equal Splits Chosen", breaks = seq(0,10,2)) +
scale_x_discrete(expression(paste("Hoop Delta (", Delta, ")", sep = ""))) +
see::scale_color_flat() +
see::scale_fill_flat() +
# ggsci::scale_color_d3() +
# ggsci::scale_fill_d3()
theme_bw() +
theme(
legend.title = element_blank(),
axis.title = element_text(size = 8),
axis.text = element_text(size = 8),
plot.margin = unit(c(plt_space, plt_space, plt_space, plt_space), "cm")
)
# something similar but using ggridges
plt_ridges <- df_part2 %>%
group_by(Participant, slab_measures) %>%
mutate(count = n()) %>%
ungroup() %>%
group_by(Participant, Gamble_Type, slab_measures, count) %>%
summarise(n = n()) %>%
ungroup() %>%
# make a column for the "interaction"
mutate(int = paste(Gamble_Type, slab_measures, sep = "_")) %>%
select(Participant, count, n, int) %>%
complete(int, nesting(Participant),
fill = list(n = 0)) %>%
# separate
separate(int,
into = c("Gamble_Type", "slab_measures"),
sep = "_") %>%
# need to use if else statement here for sanity
mutate(prop = ifelse(n == 0, 0, n/count)) %>%
ungroup() %>%
mutate(out_of_3 = paste(prop*3, " / 3", sep = "")) %>%
filter(Gamble_Type == "Equal") %>%
# group_by(slab_measures, out_of_3) %>%
# summarise(n = n()) %>%
ungroup() %>%
mutate(slab_measures = factor(slab_measures,
c("C", "75%", "25%", "F"))) %>%
ggplot(aes(out_of_3, slab_measures,
# height = n,
group = slab_measures,
colour = out_of_3,
fill = out_of_3)) +
ggridges::geom_density_ridges(stat = "binline",
alpha = .3,
fill = "blue",
binwidth = 1) +
# ggridges::geom_ridgeline(stat = "binline") +
# ggridges::geom_density_ridges(stat = "binline",
#                               bins = 8) +
theme_bw()
plt_ridges
# geom_path idea
plt_line_choices <- df_part2 %>%
group_by(Participant, slab_measures) %>%
mutate(count = n()) %>%
ungroup() %>%
group_by(Participant, Gamble_Type, slab_measures, count) %>%
summarise(n = n()) %>%
ungroup() %>%
# make a column for the "interaction"
mutate(int = paste(Gamble_Type, slab_measures, sep = "_")) %>%
select(Participant, count, n, int) %>%
complete(int, nesting(Participant),
fill = list(n = 0)) %>%
# separate
separate(int,
into = c("Gamble_Type", "slab_measures"),
sep = "_") %>%
# need to use if else statement here for sanity
mutate(prop = ifelse(n == 0, 0, n/count)) %>%
ungroup() %>%
mutate(out_of_3 = paste(prop*3, " / 3", sep = "")) %>%
filter(Gamble_Type == "Equal") %>%
# group_by(slab_measures, out_of_3) %>%
# summarise(n = n()) %>%
ungroup() %>%
mutate(slab_measures = factor(slab_measures,
c("C", "75%", "25%", "F"))) %>%
ggplot(aes(slab_measures, out_of_3,
colour = Participant)) +
# geom_jitter(alpha = .3) +
geom_path(aes(group = Participant),
position = position_jitter(w = .1, h = .1),
size = 1.25,
alpha = .5) +
theme_bw() +
scale_x_discrete(expression(paste("Hoop Delta (", Delta, ")", sep = ""))) +
scale_y_discrete("No. Equal choices") +
see::scale_color_flat() +
theme(
legend.position = "none",
axis.title = element_text(size = 8),
axis.text = element_text(size = 8),
plot.margin = unit(c(plt_space, plt_space, plt_space, plt_space), "cm")
)
plt_line_choices
# save
ggsave(paste(save_route, "prop_choices_dist.png", sep = ""),
height = 3,
width = 5.6)
#### plot of expected earnings ####
# load in acc data
load("scratch/data/acc_dat")
l_acc <- acc_dat
colnames(l_acc) <- c("Participant", "left_dist", "left_acc")
r_acc <- acc_dat
colnames(r_acc) <- c("Participant", "right_dist", "right_acc")
side_c_acc <- acc_dat
colnames(side_c_acc) <- c("Participant", "side_c_dist", "side_c_acc")
side_f_acc <- acc_dat
colnames(side_f_acc) <- c("Participant", "side_f_dist", "side_f_acc")
cent_acc <- acc_dat
colnames(cent_acc) <- c("Participant", "cent_dist", "cent_acc")
df_exp_acc <- df_part2 %>%
mutate(left_dist = HoopDelta + Subject_Position,
right_dist = HoopDelta - Subject_Position,
side_c_dist = 0,
side_f_dist = HoopDelta *2,
cent_dist = HoopDelta) %>%
merge(l_acc) %>%
merge(r_acc) %>%
merge(cent_acc) %>%
merge(side_f_acc) %>%
merge(side_c_acc) %>%
select(-c(Trial, Colour, B, G, R, Y, Norm_Dist, Norm_Delta, dist_type, Direction)) %>%
mutate(exp_earnings = (left_acc * Left_Gamble * .5) + (right_acc * Right_Gamble * .5),
side_unequal_goodChoice = (side_c_acc * 40 * .5) + (side_f_acc * 10 * .5),
side_unequal_badChoice = (side_c_acc * 10 * .5) + (side_f_acc * 40 * .5),
side_equal = (side_c_acc * 25 * .5) + (side_f_acc * 25 * .5),
centre = (cent_acc * 25 * .5) + (cent_acc * 25 * .5)) %>%
group_by(Participant, slab_measures) %>%
summarise(exp_earnings = mean(exp_earnings),
side_unequal_goodChoice = mean(side_unequal_goodChoice),
side_unequal_badChoice = mean(side_unequal_badChoice),
side_equal = mean(side_equal),
centre = mean(centre)) %>%
ungroup() %>%
group_by(slab_measures) %>%
mutate(Best = pmax(side_unequal_goodChoice, side_unequal_badChoice, side_equal, centre),
Worst = pmin(side_unequal_goodChoice, side_unequal_badChoice, side_equal, centre),
Worst_label = ifelse(Worst == side_unequal_badChoice, "unequal_bad",
ifelse(Worst == side_equal, "Equal_side", "centre")),
ymin_Best = min(Best),
ymax_Best = max(Best),
ymin_Worst = min(Worst),
ymax_Worst = max(Worst))
# check which type was selected the most
df_exp_acc %>%
group_by(slab_measures, Worst_label) %>%
summarise(n = n())
# make plot
plt_ribbon <- df_exp_acc %>%
ungroup() %>%
mutate(sep_factor = as.numeric(slab_measures)) %>%
ggplot(aes(sep_factor, exp_earnings)) +
geom_line(aes(group = Participant),
alpha = .3) +
geom_ribbon(aes(x = sep_factor,
ymin = ymin_Worst,
ymax = ymax_Worst,
fill = "red"),
alpha = .3) +
geom_ribbon(aes(x = sep_factor,
ymin = ymin_Best,
ymax = ymax_Best,
fill = "green"),
alpha = .3) +
scale_y_continuous("Expected Earnings per trial",
breaks = seq(0,20,5),
labels = c("0p", "5p", "10p", "15p", "20p")) +
scale_x_continuous(expression(paste("Hoop Delta (", Delta, ")", sep = "")),
limits = c(.7, 4.3),
breaks = seq(1,4,1),
labels = c("C", "75%", "25%", "F")) +
scale_colour_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
theme_bw() +
theme(
legend.position = "none",
axis.title = element_text(size = 8),
axis.text = element_text(size = 8),
plot.margin = unit(c(plt_space, plt_space, plt_space, plt_space), "cm")
)
plt_ribbon
cowplot::plot_grid(plt_bar, plt_line_choices, plt_box, plt_ribbon, labels = c("a)", "b)", "c)", "d)"), label_size = 8)
plt_save <- cowplot::plot_grid(plt_bar, plt_line_choices, plt_box, plt_ribbon, labels = c("a)", "b)", "c)", "d)"), label_size = 8)
ggsave(plt_save, file = paste(save_route, "four_panel.png", sep = ""),
height = 5*.8,
width = 5.6*.8)
install.packages("bookdown")
rm(list = ls())
dev.off()
