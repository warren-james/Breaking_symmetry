}
# Gets Visual Degrees
get_VisDegs <- function(separation,distance){
((2*atan2(separation,(2*distance)))*180)/pi
}
#### Any constants ####
Screen_dist <- 54.4
ppcm <- 1920/54
#### load in the dataset ####
# create a tibble for dataset
df <- tibble(
trial = numeric(),
block = numeric(),
separation = numeric(),
fixated_box = numeric(),
cross_side = numeric(),
target_side = numeric(),
response_letter = numeric(),
actual_letter = numeric(),
bias_left = numeric())
# create column names for the data we have
import_names <- c(
"trial",
"block",
"separation",
"fixated_box",
"cross_side",
"target_side",
"response_letter",
"actual_letter",
"bias_left")
# set path
results_files <- dir("data/results/Part_2/")
# temp
# results_files <- c("75_75_2_2_part2.txt","70_70_1_2_part2.txt")
# read in each data file
for (f in results_files){
d <- read.csv(
paste("data/results/Part_2/", f, sep=""), header = F)
# change column names
names(d) <- import_names
# get parts of the string for part no. and session number
temp <- strsplit(f, '[_]')[[1]]
# now input this information
# participant
d$participant <- temp[2]
# condition
d$condition <- temp[3]
# bias
d$bias <- temp[4]
# bind to df
df <- bind_rows(df, d)
}
# tidy
rm(d, f, import_names, results_files, temp)
# reorder df
df <- select(df,
participant,
condition,
bias,
block,
trial,
separation,
bias_left,
cross_side,
target_side,
fixated_box,
actual_letter,
response_letter)
# rename condition and bias levels to mean something
# condition
df$condition[df$condition == 1] <- "random first"
df$condition[df$condition == 2] <- "bias first"
# bias
df$bias[df$bias == 1] <- "left bias"
df$bias[df$bias == 2] <- "right bias"
# add in an accuracy column?
df$accuracy <- 0
df$accuracy[df$response_letter == df$actual_letter] <- 1
# add in column about bias_type
df$bias_type <- "random"
df$bias_type[df$bias_left != 0.5] <- "biased"
# rename for spatial information... 0r make -1,0,1 so it's consistent?
df$lcr <- 0
df$lcr[df$fixated_box == 2] <- -1
df$lcr[df$fixated_box == 3] <- 1
# get whether they fixated the common or uncommon side
# centre as this stays the same
df$standard_boxes <- "centre"
# right bias
df$standard_boxes[df$fixated_box == 2 & df$bias == "right bias"] <- "least likely"
df$standard_boxes[df$fixated_box == 3 & df$bias == "right bias"] <- "most likely"
# left bias
df$standard_boxes[df$fixated_box == 2 & df$bias == "left bias"] <- "most likely"
df$standard_boxes[df$fixated_box == 3 & df$bias == "left bias"] <- "least likely"
# when should we get rid of NA's?
# people may have seen where the target was and so could update their beliefs about
# which side is more likely?
# for now, remove them here
df <- df[complete.cases(df),]
#### Get switch points data ####
load("scratch/new_data/switch_points")
# add in the extra columns
df <- merge(df, switch_points)
# make saved version
df_part2 <- df
save(df_part2, file = "scratch/new_data/df_part2")
# tidy
rm(df_part2)
#### Making plots ####
# setup data
prop_sides <- df %>%
mutate(lcr = as.factor(lcr),
prop_boxes = lcr) %>%
group_by(participant, separation, bias, bias_type, prop_boxes) %>%
summarise(n = n()) %>%
complete(prop_boxes, fill = list(n = 0)) %>%
mutate(prop = n / sum(n))
# use switch_points to get switch points for both bias types
switch_bias <- select(switch_points,
participant,
Eighty_Twenty)
# change colnames
colnames(switch_bias) <- c("participant",
"switch_point")
# add bias_type
switch_bias$bias_type <- "biased"
# again for random
switch_random <- select(switch_points,
participant,
Fifty_Fifty)
# change colnames
colnames(switch_random) <- c("participant",
"switch_point")
# add bias_type
switch_random$bias_type <- "random"
# change back to numeric?
prop_sides$prop_boxes <- as.numeric(prop_sides$prop_boxes)-2
# get separate datasets
prop_sides_random <- prop_sides[prop_sides$bias_type == "random",]
prop_sides_bias <- prop_sides[prop_sides$bias_type == "biased",]
# add in switch points
prop_sides_random <- merge(prop_sides_random, switch_random)
prop_sides_bias <- merge(prop_sides_bias, switch_bias)
# rename levels in prop_boxes for each set
prop_sides_bias$prop_boxes[prop_sides_bias$prop_boxes == 0] <- "Centre"
# left bias
prop_sides_bias$prop_boxes[prop_sides_bias$prop_boxes == -1 &
prop_sides_bias$bias == "left bias"] <- "Common side"
prop_sides_bias$prop_boxes[prop_sides_bias$prop_boxes == 1 &
prop_sides_bias$bias == "left bias"] <- "Uncommon side"
# right bias
prop_sides_bias$prop_boxes[prop_sides_bias$prop_boxes == -1 &
prop_sides_bias$bias == "right bias"] <- "Uncommon side"
prop_sides_bias$prop_boxes[prop_sides_bias$prop_boxes == 1 &
prop_sides_bias$bias == "right bias"] <- "Common side"
# for random condition we just want left, right, and centre
prop_sides_random$prop_boxes[prop_sides_random$prop_boxes == 0] <- "Centre"
prop_sides_random$prop_boxes[prop_sides_random$prop_boxes == 1] <- "Right"
prop_sides_random$prop_boxes[prop_sides_random$prop_boxes == -1] <- "Left"
# tidy
rm(switch_bias, switch_random)
# can edit prop_boxes to be appropriately named now as well...
# make plot(s)
# random plt
# prop_plt(prop_sides_random, "random", "pixels")
# ggsave("scratch/plots/Part_2_prop_random_pixels.pdf", height = 10, width = 10)
prop_plt(prop_sides_random, "random", "Visual Degrees")
# ggsave("../../Figures/Experiment_4_Prob/Part_2_prop_random_vdegs.png",
#        height = 12,
#        width = 18,
#        units = "cm")
prop_sides_random %>%
filter(separation != 640) %>%
prop_plt("random", "Visual Degrees")
prop_sides_bias %>%
filter(separation != 640) %>%
prop_plt("bias", "Visual Degrees")
prop_sides_lfa_rand <- prop_sides_random %>%
filter(separation == 640) %>%
mutate(separation = 11)
prop_sides_lfa_bias <- prop_sides_bias %>%
filter(separation == 640) %>%
mutate(separation = 11)
prop_sides_random %>%
filter(separation != 640) %>%
prop_plt("Random", "Visual Degrees", prop_sides_lfa_rand)
prop_plt <- function(dataframe, title, sep_type, lfa){
# set up the plot
if(sep_type == "pixels"){
plt <- ggplot(dataframe,
aes(separation,
prop))
} else if(sep_type == "Visual Degrees") {
plt <- ggplot(dataframe,
aes(get_VisDegs(separation/ppcm, Screen_dist),
prop))
}
# make the title
plt <- plt + ggtitle(paste("Propotion of saccades to each side in the", title, "condition"))
# make the stacked plots
plt <- plt + geom_area(aes(colour = prop_boxes,
fill = prop_boxes),
position = "stack")
# input switch point line
if(sep_type == "pixels"){
plt <- plt + geom_vline(aes(xintercept = switch_point),
linetype = "dashed")
} else if(sep_type == "Visual Degrees"){
plt <- plt + geom_vline(aes(xintercept = get_VisDegs(switch_point/ppcm, Screen_dist)),
linetype = "dashed")
}
# label axes
plt <- plt + labs(x = paste("Delta (", sep_type, ")", sep = ""), y = "Proportion of fixations",
fill = "Box Fixated", colour = "Box Fixated")
# facet_wrap (if there are enough participants)
if(length(unique(prop_sides$participant))>1){
plt <- plt + facet_wrap(~as.numeric(participant))
}
plt <- plt + theme_minimal() +
theme(legend.position = "bottom",
strip.text.x = element_text(margin = margin(0.01,0,0.01,0, "mm"))) +
scale_colour_ptol() +
scale_fill_ptol()
if(missing(lfa) == FALSE){
plt <- plt + geom_bar(data = lfa, aes(separation, prop,
fill = prop_boxes),
stat = "identity")
plt <- plt + scale_x_continuous(breaks = c(2.5, 5, 7.5, 11),
labels = c("2.5", "5", "7.5", "Far Point"))
}
return(plt)
}
prop_sides_lfa_rand <- prop_sides_random %>%
filter(separation == 640) %>%
mutate(separation = 11)
prop_sides_lfa_bias <- prop_sides_bias %>%
filter(separation == 640) %>%
mutate(separation = 11)
prop_sides_random %>%
filter(separation != 640) %>%
prop_plt("Random", "Visual Degrees", prop_sides_lfa_rand)
rm(list =ls())
#### Script to extract Data ####
# 1st year PhD project
# Probability Matching in the detection task
# Difference in this version is that participants are aiming
# to detect 1 of 10 letters rather than whether a dot is
# up or down.
# This second script is to look at performance in the second half
# of the experiment
#### Notes: ####
# letters are coded as numbers by the matlabd script
# we can change this if we have to but I will keep them as numbers for now
# but for future reference:
# 1 = C, 2 = D, 3 = H, 4 = K, 5 = N, 6 = O, 7 = R, 8 = S, 9 = V, 10 = Z
# fixated box goes from 1:3
# 1 = middle, 2 = left, 3 = right
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# NB: Need to add standardised version this so it's #
#        most likely vs least likely boxes          #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# cross_side & target_side
# -1 = left, 1 = right
# condition is 1 or 2
# 1 = 50/50 first, 2 = bias first
# bias
# 1 = left bias, 2 = bias right
# cross_side refers to what side the cross was on... might be useful to look at as this
# is now some information that people could use even though it has nothing to do with
# the experiment itself... Though for this we need to keep the output of where
# people looked intact (fixated_box)
#### libraries needed ####
library(tidyverse)
library(psyphy)
library(lme4)
library(ggthemes)
#### any functions ####
# To make the proportions plots
prop_plt <- function(dataframe, title, sep_type, lfa){
# set up the plot
if(sep_type == "pixels"){
plt <- ggplot(dataframe,
aes(separation,
prop))
} else if(sep_type == "Visual Degrees") {
plt <- ggplot(dataframe,
aes(get_VisDegs(separation/ppcm, Screen_dist),
prop))
}
# make the title
plt <- plt + ggtitle(paste("Propotion of saccades to each side in the", title, "condition"))
# make the stacked plots
plt <- plt + geom_area(aes(colour = prop_boxes,
fill = prop_boxes),
position = "stack")
# input switch point line
if(sep_type == "pixels"){
plt <- plt + geom_vline(aes(xintercept = switch_point),
linetype = "dashed")
} else if(sep_type == "Visual Degrees"){
plt <- plt + geom_vline(aes(xintercept = get_VisDegs(switch_point/ppcm, Screen_dist)),
linetype = "dashed")
}
# label axes
plt <- plt + labs(x = paste("Delta (", sep_type, ")", sep = ""), y = "Proportion of fixations",
fill = "Box Fixated", colour = "Box Fixated")
# facet_wrap (if there are enough participants)
if(length(unique(prop_sides$participant))>1){
plt <- plt + facet_wrap(~as.numeric(participant))
}
plt <- plt + theme_minimal() +
theme(legend.position = "bottom",
strip.text.x = element_text(margin = margin(0.01,0,0.01,0, "mm"))) +
scale_colour_ptol() +
scale_fill_ptol() +
scale_y_continuous(breaks = c(0, 0.5, 1))
if(missing(lfa) == FALSE){
plt <- plt + geom_bar(data = lfa, aes(separation, prop,
fill = prop_boxes),
stat = "identity")
plt <- plt + scale_x_continuous(breaks = c(2.5, 5, 7.5, 11),
labels = c("2.5", "5", "7.5", "FP"))
}
return(plt)
}
# Gets Visual Degrees
get_VisDegs <- function(separation,distance){
((2*atan2(separation,(2*distance)))*180)/pi
}
#### Any constants ####
Screen_dist <- 54.4
ppcm <- 1920/54
#### load in the dataset ####
# create a tibble for dataset
df <- tibble(
trial = numeric(),
block = numeric(),
separation = numeric(),
fixated_box = numeric(),
cross_side = numeric(),
target_side = numeric(),
response_letter = numeric(),
actual_letter = numeric(),
bias_left = numeric())
# create column names for the data we have
import_names <- c(
"trial",
"block",
"separation",
"fixated_box",
"cross_side",
"target_side",
"response_letter",
"actual_letter",
"bias_left")
# set path
results_files <- dir("data/results/Part_2/")
# temp
# results_files <- c("75_75_2_2_part2.txt","70_70_1_2_part2.txt")
# read in each data file
for (f in results_files){
d <- read.csv(
paste("data/results/Part_2/", f, sep=""), header = F)
# change column names
names(d) <- import_names
# get parts of the string for part no. and session number
temp <- strsplit(f, '[_]')[[1]]
# now input this information
# participant
d$participant <- temp[2]
# condition
d$condition <- temp[3]
# bias
d$bias <- temp[4]
# bind to df
df <- bind_rows(df, d)
}
# tidy
rm(d, f, import_names, results_files, temp)
# reorder df
df <- select(df,
participant,
condition,
bias,
block,
trial,
separation,
bias_left,
cross_side,
target_side,
fixated_box,
actual_letter,
response_letter)
# rename condition and bias levels to mean something
# condition
df$condition[df$condition == 1] <- "random first"
df$condition[df$condition == 2] <- "bias first"
# bias
df$bias[df$bias == 1] <- "left bias"
df$bias[df$bias == 2] <- "right bias"
# add in an accuracy column?
df$accuracy <- 0
df$accuracy[df$response_letter == df$actual_letter] <- 1
# add in column about bias_type
df$bias_type <- "random"
df$bias_type[df$bias_left != 0.5] <- "biased"
# rename for spatial information... 0r make -1,0,1 so it's consistent?
df$lcr <- 0
df$lcr[df$fixated_box == 2] <- -1
df$lcr[df$fixated_box == 3] <- 1
# get whether they fixated the common or uncommon side
# centre as this stays the same
df$standard_boxes <- "centre"
# right bias
df$standard_boxes[df$fixated_box == 2 & df$bias == "right bias"] <- "least likely"
df$standard_boxes[df$fixated_box == 3 & df$bias == "right bias"] <- "most likely"
# left bias
df$standard_boxes[df$fixated_box == 2 & df$bias == "left bias"] <- "most likely"
df$standard_boxes[df$fixated_box == 3 & df$bias == "left bias"] <- "least likely"
# when should we get rid of NA's?
# people may have seen where the target was and so could update their beliefs about
# which side is more likely?
# for now, remove them here
df <- df[complete.cases(df),]
#### Get switch points data ####
load("scratch/new_data/switch_points")
# add in the extra columns
df <- merge(df, switch_points)
# make saved version
df_part2 <- df
save(df_part2, file = "scratch/new_data/df_part2")
# tidy
rm(df_part2)
#### Making plots ####
# setup data
prop_sides <- df %>%
mutate(lcr = as.factor(lcr),
prop_boxes = lcr) %>%
group_by(participant, separation, bias, bias_type, prop_boxes) %>%
summarise(n = n()) %>%
complete(prop_boxes, fill = list(n = 0)) %>%
mutate(prop = n / sum(n))
# use switch_points to get switch points for both bias types
switch_bias <- select(switch_points,
participant,
Eighty_Twenty)
# change colnames
colnames(switch_bias) <- c("participant",
"switch_point")
# add bias_type
switch_bias$bias_type <- "biased"
# again for random
switch_random <- select(switch_points,
participant,
Fifty_Fifty)
# change colnames
colnames(switch_random) <- c("participant",
"switch_point")
# add bias_type
switch_random$bias_type <- "random"
# change back to numeric?
prop_sides$prop_boxes <- as.numeric(prop_sides$prop_boxes)-2
# get separate datasets
prop_sides_random <- prop_sides[prop_sides$bias_type == "random",]
prop_sides_bias <- prop_sides[prop_sides$bias_type == "biased",]
# add in switch points
prop_sides_random <- merge(prop_sides_random, switch_random)
prop_sides_bias <- merge(prop_sides_bias, switch_bias)
# rename levels in prop_boxes for each set
prop_sides_bias$prop_boxes[prop_sides_bias$prop_boxes == 0] <- "Centre"
# left bias
prop_sides_bias$prop_boxes[prop_sides_bias$prop_boxes == -1 &
prop_sides_bias$bias == "left bias"] <- "Common side"
prop_sides_bias$prop_boxes[prop_sides_bias$prop_boxes == 1 &
prop_sides_bias$bias == "left bias"] <- "Uncommon side"
# right bias
prop_sides_bias$prop_boxes[prop_sides_bias$prop_boxes == -1 &
prop_sides_bias$bias == "right bias"] <- "Uncommon side"
prop_sides_bias$prop_boxes[prop_sides_bias$prop_boxes == 1 &
prop_sides_bias$bias == "right bias"] <- "Common side"
# for random condition we just want left, right, and centre
prop_sides_random$prop_boxes[prop_sides_random$prop_boxes == 0] <- "Centre"
prop_sides_random$prop_boxes[prop_sides_random$prop_boxes == 1] <- "Right"
prop_sides_random$prop_boxes[prop_sides_random$prop_boxes == -1] <- "Left"
# tidy
rm(switch_bias, switch_random)
# can edit prop_boxes to be appropriately named now as well...
# make plot(s)
# random plt
# prop_plt(prop_sides_random, "random", "pixels")
# ggsave("scratch/plots/Part_2_prop_random_pixels.pdf", height = 10, width = 10)
prop_plt(prop_sides_random, "random", "Visual Degrees")
rop_sides_random %>%
filter(separation != 640) %>%
prop_plt("random", "Visual Degrees")
prop_sides_bias %>%
filter(separation != 640) %>%
prop_plt("bias", "Visual Degrees")
prop_sides_lfa_rand <- prop_sides_random %>%
filter(separation == 640) %>%
mutate(separation = 11)
prop_sides_lfa_bias <- prop_sides_bias %>%
filter(separation == 640) %>%
mutate(separation = 11)
prop_sides_random %>%
filter(separation != 640) %>%
prop_plt("Random", "Visual Degrees", prop_sides_lfa_rand)
prop_sides_bias %>%
filter(separation != 640) %>%
prop_plt("Random", "Visual Degrees", prop_sides_lfa_bias)
get_VisDegs(640/ppcm, Screen_dist)
