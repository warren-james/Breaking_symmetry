card_drawn <- cards[guess]
if(card_drawn %in% guesses){
guess <- sample(possible_guesses[!possible_guesses %in% guesses], 1)
}
guesses <- c(guesses, card_drawn)
guess <- card_drawn
}
if(prisoner %in% guesses){
count <- count + 1
}
}
if(count == 10){
success <- 1
} else {
success <- 0
}
df_strat <- rbind(df_strat, tibble(iter = ii,
all_live = success))
}
sum(df_strat$all_live)
#### Problem ####
# There are 10 prisoners numbered 1-10
# 10 playing cards (1:10) are placed in draws randomly labeled 1 to 10
# in order to escape, all 10 prisoners must find the card with their label
# however, they can only look in 5 draws
# how can they win?
#### Packages ####
library(tidyverse)
#### Random behaviour ####
# First of all, let's make some random choices and see how often they survive
# set some parameters for the simulation
n_prisoners <- 10 # NB should be divisible by 2
n_guesses <- n_prisoners/2
n_simulations <- 2000
# store results
df_rand <- tibble(iter = numeric(),
all_live = numeric())
# simulate random choices
for(ii in 1:n_simulations){
# generate a random order of cards
cards <- sample(seq(1,n_priosoners,1),n_prisoners, replace = F)
# keep track of how many find their card
count <- 0
for(prisoner in 1:n_prisoners){
# they pick their cards
picks <- sample(cards, n_guesses)
# did they find themselves?
if(prisoner %in% picks){
count <- count + 1
}
}
if(count == 10){
success <- 1
} else {
success <- 0
}
df_rand <- rbind(df_rand, tibble(iter = ii,
all_live = success))
}
#### Strategy ####
# can we do better?
# Strategy: pick the drawer of your number, if it's your number, you're set,
# if not, pick the draw of the number you just opened
# repeat until you've made 5 guesses
# let's setup data frame
df_strat <- tibble(iter = numeric(),
all_live = numeric())
possible_guesses <- seq(1,n_prisoners,1)
# now loop through
for(ii in 1:n_simulations){
# generate a random order of cards
cards <- sample(seq(1,n_prisoners,1),n_prisoners, replace = F)
# keep track of how many find their card
count <- 0
# now simulate participants doing the strategy
for(prisoner in 1:n_prisoners){
# initiate guessing val
guesses <- c()
guess <- prisoner
for(trial in 1:n_guesses){
card_drawn <- cards[guess]
if(card_drawn %in% guesses){
guess <- sample(possible_guesses[!possible_guesses %in% guesses], 1)
}
guesses <- c(guesses, card_drawn)
guess <- card_drawn
}
if(prisoner %in% guesses){
count <- count + 1
}
}
if(count == 10){
success <- 1
} else {
success <- 0
}
df_strat <- rbind(df_strat, tibble(iter = ii,
all_live = success))
}
# how many lived?
paste("Percent that won in Random: ", (sum(df_rand$all_live)/n_simulations)*100, "%", sep = "")
paste("Percent that won in Strat: ", (sum(df_strat$all_live)/n_simulations)*100, "%", sep = "")
#### Problem ####
# There are 10 prisoners numbered 1-10
# 10 playing cards (1:10) are placed in draws randomly labeled 1 to 10
# in order to escape, all 10 prisoners must find the card with their label
# however, they can only look in 5 draws
# how can they win?
#### Packages ####
library(tidyverse)
#### Random behaviour ####
# First of all, let's make some random choices and see how often they survive
# set some parameters for the simulation
n_prisoners <- 10 # NB should be divisible by 2
n_guesses <- n_prisoners/2
n_simulations <- 2000
# store results
df_rand <- tibble(iter = numeric(),
all_live = numeric())
# simulate random choices
for(ii in 1:n_simulations){
# generate a random order of cards
cards <- sample(seq(1,n_prisoners,1),n_prisoners, replace = F)
# keep track of how many find their card
count <- 0
for(prisoner in 1:n_prisoners){
# they pick their cards
picks <- sample(cards, n_guesses)
# did they find themselves?
if(prisoner %in% picks){
count <- count + 1
}
}
if(count == 10){
success <- 1
} else {
success <- 0
}
df_rand <- rbind(df_rand, tibble(iter = ii,
all_live = success))
}
#### Strategy ####
# can we do better?
# Strategy: pick the drawer of your number, if it's your number, you're set,
# if not, pick the draw of the number you just opened
# repeat until you've made 5 guesses
# let's setup data frame
df_strat <- tibble(iter = numeric(),
all_live = numeric())
possible_guesses <- seq(1,n_prisoners,1)
# now loop through
for(ii in 1:n_simulations){
# generate a random order of cards
cards <- sample(seq(1,n_prisoners,1),n_prisoners, replace = F)
# keep track of how many find their card
count <- 0
# now simulate participants doing the strategy
for(prisoner in 1:n_prisoners){
# initiate guessing val
guesses <- c()
guess <- prisoner
for(trial in 1:n_guesses){
card_drawn <- cards[guess]
if(card_drawn %in% guesses){
guess <- sample(possible_guesses[!possible_guesses %in% guesses], 1)
}
guesses <- c(guesses, card_drawn)
guess <- card_drawn
}
if(prisoner %in% guesses){
count <- count + 1
}
}
if(count == 10){
success <- 1
} else {
success <- 0
}
df_strat <- rbind(df_strat, tibble(iter = ii,
all_live = success))
}
# how many lived?
paste("Percent that won in Random: ", (sum(df_rand$all_live)/n_simulations)*100, "%", sep = "")
paste("Percent that won in Strat: ", (sum(df_strat$all_live)/n_simulations)*100, "%", sep = "")
#### Problem ####
# There are 10 prisoners numbered 1-10
# 10 playing cards (1:10) are placed in draws randomly labeled 1 to 10
# in order to escape, all 10 prisoners must find the card with their label
# however, they can only look in 5 draws
# how can they win?
#### Packages ####
library(tidyverse)
#### Random behaviour ####
# First of all, let's make some random choices and see how often they survive
# set some parameters for the simulation
n_prisoners <- 10 # NB should be divisible by 2
n_guesses <- n_prisoners/2
n_simulations <- 2000
# store results
df_rand <- tibble(iter = numeric(),
all_live = numeric())
# simulate random choices
for(ii in 1:n_simulations){
# generate a random order of cards
cards <- sample(seq(1,n_prisoners,1),n_prisoners, replace = F)
# keep track of how many find their card
count <- 0
for(prisoner in 1:n_prisoners){
# they pick their cards
picks <- sample(cards, n_guesses)
# did they find themselves?
if(prisoner %in% picks){
count <- count + 1
}
}
if(count == 10){
success <- 1
} else {
success <- 0
}
df_rand <- rbind(df_rand, tibble(iter = ii,
all_live = success))
}
#### Strategy ####
# can we do better?
# Strategy: pick the drawer of your number, if it's your number, you're set,
# if not, pick the draw of the number you just opened
# repeat until you've made 5 guesses
# let's setup data frame
df_strat <- tibble(iter = numeric(),
all_live = numeric())
possible_guesses <- seq(1,n_prisoners,1)
# now loop through
for(ii in 1:n_simulations){
# generate a random order of cards
cards <- sample(seq(1,n_prisoners,1),n_prisoners, replace = F)
# keep track of how many find their card
count <- 0
# now simulate participants doing the strategy
for(prisoner in 1:n_prisoners){
# initiate guessing val
guesses <- c()
guess <- prisoner
for(trial in 1:n_guesses){
card_drawn <- cards[guess]
if(card_drawn %in% guesses){
guess <- sample(possible_guesses[!possible_guesses %in% guesses], 1)
}
guesses <- c(guesses, card_drawn)
guess <- card_drawn
}
if(prisoner %in% guesses){
count <- count + 1
}
}
if(count == 10){
success <- 1
} else {
success <- 0
}
df_strat <- rbind(df_strat, tibble(iter = ii,
all_live = success))
}
# how many lived?
paste("Percent that won in Random: ", (sum(df_rand$all_live)/n_simulations)*100, "%", sep = "")
paste("Percent that won in Strat: ", (sum(df_strat$all_live)/n_simulations)*100, "%", sep = "")
#### Problem ####
# There are 10 prisoners numbered 1-10
# 10 playing cards (1:10) are placed in draws randomly labeled 1 to 10
# in order to escape, all 10 prisoners must find the card with their label
# however, they can only look in 5 draws
# how can they win?
#### Packages ####
library(tidyverse)
#### Random behaviour ####
# First of all, let's make some random choices and see how often they survive
# set some parameters for the simulation
n_prisoners <- 10 # NB should be divisible by 2
n_guesses <- n_prisoners/2
n_simulations <- 2000
# store results
df_rand <- tibble(iter = numeric(),
all_live = numeric())
# simulate random choices
for(ii in 1:n_simulations){
# generate a random order of cards
cards <- sample(seq(1,n_prisoners,1),n_prisoners, replace = F)
# keep track of how many find their card
count <- 0
for(prisoner in 1:n_prisoners){
# they pick their cards
picks <- sample(cards, n_guesses)
# did they find themselves?
if(prisoner %in% picks){
count <- count + 1
}
}
if(count == 10){
success <- 1
} else {
success <- 0
}
df_rand <- rbind(df_rand, tibble(iter = ii,
all_live = success))
}
#### Strategy ####
# can we do better?
# Strategy: pick the drawer of your number, if it's your number, you're set,
# if not, pick the draw of the number you just opened
# repeat until you've made 5 guesses
# let's setup data frame
df_strat <- tibble(iter = numeric(),
all_live = numeric())
possible_guesses <- seq(1,n_prisoners,1)
# now loop through
for(ii in 1:n_simulations){
# generate a random order of cards
cards <- sample(seq(1,n_prisoners,1),n_prisoners, replace = F)
# keep track of how many find their card
count <- 0
# now simulate participants doing the strategy
for(prisoner in 1:n_prisoners){
# initiate guessing val
guesses <- c()
guess <- prisoner
for(trial in 1:n_guesses){
card_drawn <- cards[guess]
if(card_drawn %in% guesses){
guess <- sample(possible_guesses[!possible_guesses %in% guesses], 1)
}
guesses <- c(guesses, card_drawn)
guess <- card_drawn
}
if(prisoner %in% guesses){
count <- count + 1
}
}
if(count == 10){
success <- 1
} else {
success <- 0
}
df_strat <- rbind(df_strat, tibble(iter = ii,
all_live = success))
}
# how many lived?
paste("Percent that won in Random: ", (sum(df_rand$all_live)/n_simulations)*100, "%", sep = "")
paste("Percent that won in Strat: ", (sum(df_strat$all_live)/n_simulations)*100, "%", sep = "")
#### Problem ####
# There are 10 prisoners numbered 1-10
# 10 playing cards (1:10) are placed in draws randomly labeled 1 to 10
# in order to escape, all 10 prisoners must find the card with their label
# however, they can only look in 5 draws
# how can they win?
#### Packages ####
library(tidyverse)
#### Random behaviour ####
# First of all, let's make some random choices and see how often they survive
# set some parameters for the simulation
n_prisoners <- 10 # NB should be divisible by 2
n_guesses <- n_prisoners/2
n_simulations <- 2000
# store results
df_rand <- tibble(iter = numeric(),
all_live = numeric())
# simulate random choices
for(ii in 1:n_simulations){
# generate a random order of cards
cards <- sample(seq(1,n_prisoners,1),n_prisoners, replace = F)
# keep track of how many find their card
count <- 0
for(prisoner in 1:n_prisoners){
# they pick their cards
picks <- sample(cards, n_guesses)
# did they find themselves?
if(prisoner %in% picks){
count <- count + 1
}
}
if(count == 10){
success <- 1
} else {
success <- 0
}
df_rand <- rbind(df_rand, tibble(iter = ii,
all_live = success))
}
#### Strategy ####
# can we do better?
# Strategy: pick the drawer of your number, if it's your number, you're set,
# if not, pick the draw of the number you just opened
# repeat until you've made 5 guesses
# let's setup data frame
df_strat <- tibble(iter = numeric(),
all_live = numeric())
possible_guesses <- seq(1,n_prisoners,1)
# now loop through
for(ii in 1:n_simulations){
# generate a random order of cards
cards <- sample(seq(1,n_prisoners,1),n_prisoners, replace = F)
# keep track of how many find their card
count <- 0
# now simulate participants doing the strategy
for(prisoner in 1:n_prisoners){
# initiate guessing val
guesses <- c()
guess <- prisoner
for(trial in 1:n_guesses){
card_drawn <- cards[guess]
if(card_drawn %in% guesses){
guess <- sample(possible_guesses[!possible_guesses %in% guesses], 1)
}
guesses <- c(guesses, card_drawn)
guess <- card_drawn
}
if(prisoner %in% guesses){
count <- count + 1
}
}
if(count == 10){
success <- 1
} else {
success <- 0
}
df_strat <- rbind(df_strat, tibble(iter = ii,
all_live = success))
}
# how many lived?
paste("Percent that won in Random: ", (sum(df_rand$all_live)/n_simulations)*100, "%", sep = "")
paste("Percent that won in Strat: ", (sum(df_strat$all_live)/n_simulations)*100, "%", sep = "")
#### Problem ####
# There are 10 prisoners numbered 1-10
# 10 playing cards (1:10) are placed in draws randomly labeled 1 to 10
# in order to escape, all 10 prisoners must find the card with their label
# however, they can only look in 5 draws
# how can they win?
#### Packages ####
library(tidyverse)
#### Random behaviour ####
# First of all, let's make some random choices and see how often they survive
# set some parameters for the simulation
n_prisoners <- 10 # NB should be divisible by 2
n_guesses <- n_prisoners/2
n_simulations <- 2000
# store results
df_rand <- tibble(iter = numeric(),
all_live = numeric())
# simulate random choices
for(ii in 1:n_simulations){
# generate a random order of cards
cards <- sample(seq(1,n_prisoners,1),n_prisoners, replace = F)
# keep track of how many find their card
count <- 0
for(prisoner in 1:n_prisoners){
# they pick their cards
picks <- sample(cards, n_guesses)
# did they find themselves?
if(prisoner %in% picks){
count <- count + 1
}
}
if(count == 10){
success <- 1
} else {
success <- 0
}
df_rand <- rbind(df_rand, tibble(iter = ii,
all_live = success))
}
#### Strategy ####
# can we do better?
# Strategy: pick the drawer of your number, if it's your number, you're set,
# if not, pick the draw of the number you just opened
# repeat until you've made 5 guesses
# let's setup data frame
df_strat <- tibble(iter = numeric(),
all_live = numeric())
possible_guesses <- seq(1,n_prisoners,1)
# now loop through
for(ii in 1:n_simulations){
# generate a random order of cards
cards <- sample(seq(1,n_prisoners,1),n_prisoners, replace = F)
# keep track of how many find their card
count <- 0
# now simulate participants doing the strategy
for(prisoner in 1:n_prisoners){
# initiate guessing val
guesses <- c()
guess <- prisoner
for(trial in 1:n_guesses){
card_drawn <- cards[guess]
if(card_drawn %in% guesses){
guess <- sample(possible_guesses[!possible_guesses %in% guesses], 1)
}
guesses <- c(guesses, card_drawn)
guess <- card_drawn
}
if(prisoner %in% guesses){
count <- count + 1
}
}
if(count == 10){
success <- 1
} else {
success <- 0
}
df_strat <- rbind(df_strat, tibble(iter = ii,
all_live = success))
}
# how many lived?
paste("Percent that won in Random: ", (sum(df_rand$all_live)/n_simulations)*100, "%", sep = "")
paste("Percent that won in Strat: ", (sum(df_strat$all_live)/n_simulations)*100, "%", sep = "")
