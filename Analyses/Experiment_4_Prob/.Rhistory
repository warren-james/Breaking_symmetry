count = count + 1
print(count)
} else {
continue = FALSE
print("done")
}
}
}
rm(list = ls())
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(count)
} else {
continue = FALSE
print("done")
}
}
}
# chance to succeed
a <- 0.1
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
print(count)
} else {
continue = FALSE
print("done")
}
}
}
rm(list = ls())
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
# chance to succeed
a <- 0.1
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:10){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
View(temp)
rm(list = ls())
# chance to succeed
a <- 0.1
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:1000000){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
temp %>%
ggplot(aes(num_succ)) +
geom_density()
library(tidyverse)
temp %>%
ggplot(aes(num_succ)) +
geom_density()
range(temp$num_succ)
a <- 0.5
# empty frame
temp <- data.frame(attempt = numeric(),
num_succ = numeric())
# loop through
for(iter in 1:100000){
# check
continue = TRUE
# count
count = 0
while(continue == TRUE){
success = rbinom(1,1,a)
if(success == 1){
count = count + 1
} else {
continue = FALSE
num_succ = count
}
}
temp <- rbind(temp, data.frame(attempt = iter,
num_succ = num_succ))
}
temp %>%
ggplot(aes(num_succ)) +
geom_density()
range(temp$num_succ)
library(tidyverse)
library(rethinking)
hpid
hpdi
HPDI
q()
help(shape)
??shape
dev.off()
rnorm(1, 15, 10)
rnorm(1, 15, 10)
rnorm(1, 15, 10)
rnorm(1, 15, 10)
rnorm(1, 15, 10)
rnorm(1, 15, 10)
rnorm(1, 15, 10)
rnorm(1, 15, 10)
rnorm(1, 15, 10)
rnorm(1, 15, 10)
rnorm(1, 15, 10)
rnorm(1, 15, 10)
rbernoulli(1, p = 0.5)
library(brms)
rbernoulli(1, p = 0.5)
library(rstan)
rbernoulli(1, p = 0.5)
setwd("F:/Uni/Github/Breaking_symmetry/Analyses/Experiment_4_Prob")
library(tidyverse)
library(brms)
library(rstan)
load("scratch/new_data/df_part2")
load("scratch/new_data/AccMea")
head(df_part2)
head(AccMea)
View(AccMea)
AccMea %>%
group_by(participant, condition, separation, Pred_type) %>%
summarise(check = mean(Actual))
head(AccMea)
AccMea %>%
spread(Pred_type,
Acc)
AccMea %>%
spread(Pred_type, Acc) %>%
select(participant, separation, condition, Actual, Centre, Expected, Optimal)
AccMea %>%
spread(Pred_type, Acc) %>%
select(participant, separation, condition, Actual, Centre, Expected, Optimal) %>%
gather(Actual:Optimal,
key = "Acc_type",
value = "Accuracy")
head(AccMea)
AccMea %>%
mutate(diff = Actual - Acc) %>%
ggplot(aes(separation, diff, colour = Pred_type)) +
geom_point() +
facet_wrap(~condition)
AccMea %>%
mutate(diff = Actual - Acc) %>%
ggplot(aes(separation, diff, colour = Pred_type)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~condition)
AccMea %>%
filter(sepration != max(separation)) %>%
mutate(diff = Actual - Acc) %>%
ggplot(aes(separation, diff, colour = Pred_type)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~condition)
AccMea %>%
filter(separation != max(separation)) %>%
mutate(diff = Actual - Acc) %>%
ggplot(aes(separation, diff, colour = Pred_type)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~condition)
AccMea %>%
filter(separation != max(separation))
AccMea %>%
group_by(participant) %>%
filter(separation != max(separation)) %>%
mutate(diff = Actual - Acc) %>%
ggplot(aes(separation, diff, colour = Pred_type)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~condition)
AccMea %>%
group_by(participant) %>%
filter(separation != max(separation)) %>%
mutate(diff = Acc - Actual) %>%
ggplot(aes(separation, diff, colour = Pred_type)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~condition)
AccMea %>%
group_by(participant) %>%
filter(separation != max(separation)) %>%
ungroup() %>%
spread(Pred_type, Acc) %>%
gather(c(Actual, Centre, Optimal, Expeceted),
key = "acc_typ",
value = "accuracy")
AccMea %>%
group_by(participant) %>%
filter(separation != max(separation)) %>%
ungroup() %>%
spread(Pred_type, Acc) %>%
gather(c(Actual, Centre, Optimal, Expected),
key = "acc_typ",
value = "accuracy")
AccMea %>%
group_by(participant) %>%
filter(separation != max(separation)) %>%
ungroup() %>%
spread(Pred_type, Acc) %>%
gather(c(Actual, Centre, Optimal, Expected),
key = "acc_typ",
value = "accuracy") %>%
ggplot(aes(separation, accuracy, colour = Pred_type)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~condition)
AccMea %>%
group_by(participant) %>%
filter(separation != max(separation)) %>%
ungroup() %>%
spread(Pred_type, Acc) %>%
gather(c(Actual, Centre, Optimal, Expected),
key = "acc_typ",
value = "accuracy") %>%
ggplot(aes(separation, accuracy, colour = acc_type)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~condition)
AccMea %>%
group_by(participant) %>%
filter(separation != max(separation)) %>%
ungroup() %>%
spread(Pred_type, Acc) %>%
gather(c(Actual, Centre, Optimal, Expected),
key = "acc_type",
value = "accuracy") %>%
ggplot(aes(separation, accuracy, colour = acc_type)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~condition)
AccMea %>%
group_by(participant) %>%
filter(separation != max(separation)) %>%
ungroup() %>%
spread(Pred_type, Acc) %>%
gather(c(Actual, Centre, Optimal, Expected),
key = "acc_type",
value = "accuracy") %>%
ggplot(aes(separation, accuracy, colour = acc_type)) +
geom_point() +
geom_smooth(method = "glm") +
facet_wrap(~condition)
AccMea %>%
group_by(participant) %>%
filter(separation != max(separation)) %>%
ungroup() %>%
spread(Pred_type, Acc) %>%
gather(c(Actual, Centre, Optimal, Expected),
key = "acc_type",
value = "accuracy") %>%
ggplot(aes(separation, accuracy, colour = acc_type)) +
geom_point() +
geom_smooth(method = "glm", family = binomial) +
facet_wrap(~condition)
AccMea %>%
group_by(participant) %>%
filter(separation != max(separation)) %>%
mutate(diff = Acc - Actual) %>%
ggplot(aes(separation, diff, colour = Pred_type)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~condition)
m_data_acc <- AccMea %>%
spread(Pred_type, Acc) %>%
select(participant, separation, condition, Actual, Expected) %>%
gather(Actual:Optimal,
key = "Acc_type",
value = "Accuracy")
m_data_acc <- AccMea %>%
spread(Pred_type, Acc) %>%
select(participant, separation, condition, Actual, Expected) %>%
gather(c(Actual,Expected),
key = "Acc_type",
value = "Accuracy")
head(m_data_acc)
m_data_acc %>% ggplot(separation, Acciracy, colour = Acc_type) + geom_smooth(method = "lm") + geom_point() + facet_wrap(~condition)
m_data_acc %>% ggplot(separation, Accuracy, colour = Acc_type) + geom_smooth(method = "lm") + geom_point() + facet_wrap(~condition)
m_data_acc %>% ggplot(aes(separation, Accuracy, colour = Acc_type)) + geom_smooth(method = "lm") + geom_point() + facet_wrap(~condition)
m_data_acc <- AccMea %>%
spread(Pred_type, Acc) %>%
select(participant, separation, condition, Actual, Expected) %>%
gather(c(Actual,Expected),
key = "Acc_type",
value = "Accuracy") %>%
group_by(participant) %>%
filter(separation != max(separation))
head(m_data_acc)
max(m_data_acc$separation)
m_data_acc <- AccMea %>%
spread(Pred_type, Acc) %>%
select(participant, separation, condition, Actual, Expected) %>%
gather(c(Actual,Expected),
key = "Acc_type",
value = "Accuracy") %>%
group_by(participant) %>%
filter(separation != max(separation)) %>%
ungroup()
head(AccMea)
AccMea %>%
group_by(participant) %>%
filter(separation != max(separation)) %>%
ungroup() %>%
filter(condition == "Optimal")
AccMea %>%
group_by(participant) %>%
filter(separation != max(separation)) %>%
filter(condition == "Optimal")
head(AccMea)
AccMea %>%
group_by(participant) %>%
filter(separation != max(separation)) %>%
spread(Pred_type, Acc)
AccMea %>%
group_by(participant) %>%
filter(separation != max(separation)) %>%
spread(Pred_type, Acc) %>%
ggplot(aes(Actual, Optimal, colour = condition)) +
geom_point() +
geom_smooth(method = "lm")
AccMea %>%
group_by(participant) %>%
filter(separation != max(separation)) %>%
spread(Pred_type, Acc) %>%
ggplot(aes(Actual, Optimal, colour = condition)) +
geom_point() +
geom_smooth(method = "binomail")
AccMea %>%
group_by(participant) %>%
filter(separation != max(separation)) %>%
spread(Pred_type, Acc) %>%
ggplot(aes(Expected, Optimal, colour = condition)) +
geom_point() +
geom_smooth(method = "binomail")
head(m_data_acc)
uniqud(m_data_acc, Acc_type)
unique(m_data_acc, Acc_type)
unique(m_data_acc$Acc_type)
m_data_acc <- AccMea %>%
spread(Pred_type, Acc) %>%
select(participant, separation, condition, Actual, Optimal) %>%
gather(c(Actual,Expected),
key = "Acc_type",
value = "Accuracy") %>%
group_by(participant) %>%
filter(separation != max(separation)) %>%
ungroup()
m_data_acc <- AccMea %>%
spread(Pred_type, Acc) %>%
select(participant, separation, condition, Actual, Optimal) %>%
gather(c(Actual,Optimal),
key = "Acc_type",
value = "Accuracy") %>%
group_by(participant) %>%
filter(separation != max(separation)) %>%
ungroup()
head(m_data_acc)
m1_acc <- brm(Accuracy ~ (separaion + condition)^2,
data = m_data_acc,
family = "beta",
chains = 1,
iter = 2000,
warmup = 1000)
m1_acc <- brm(Accuracy ~ (separation + condition)^2,
data = m_data_acc,
family = "beta",
chains = 1,
iter = 2000,
warmup = 1000)
range(m_data_acc)
range(m_data_acc$Accuracy)
1-1e-4
m_data_acc <- AccMea %>%
spread(Pred_type, Acc) %>%
select(participant, separation, condition, Actual, Optimal) %>%
gather(c(Actual,Optimal),
key = "Acc_type",
value = "Accuracy") %>%
group_by(participant) %>%
filter(separation != max(separation)) %>%
ungroup() %>%
mutata(beta_acc = Accuracy*(1-1e-4))
m_data_acc <- AccMea %>%
spread(Pred_type, Acc) %>%
select(participant, separation, condition, Actual, Optimal) %>%
gather(c(Actual,Optimal),
key = "Acc_type",
value = "Accuracy") %>%
group_by(participant) %>%
filter(separation != max(separation)) %>%
ungroup() %>%
mutate(beta_acc = Accuracy*(1-1e-4))
m1_acc <- brm(Accuracy ~ (separation + condition)^2,
data = m_data_acc,
family = "beta",
chains = 1,
iter = 2000,
warmup = 1000)
head(m_data_acc)
m1_acc <- brm(beta_acc ~ (separation + condition)^2,
data = m_data_acc,
family = "beta",
chains = 1,
iter = 2000,
warmup = 1000)
summary(m1_acc)
plot(marginal_effects(m1_acc))
head(m_data_acc)
m1_acc <- brm(beta_acc ~ (separation + condition + Acc_type)^2,
data = m_data_acc,
family = "beta",
chains = 1,
iter = 2000,
warmup = 1000)
head(m_data_acc)
m_data <- m_data_acc %>%
filter(Acc_type == "Actual")
head(m_data)
m1_acc <- brm(beta_acc ~ (separation + condition)^2,
data = m_data_acc,
family = "beta",
chains = 1,
iter = 2000,
warmup = 1000)
summary(m1_acc)
m_data_acc <- AccMea %>%
spread(Pred_type, Acc) %>%
select(participant, separation, condition, Actual, Optimal) %>%
gather(c(Actual,Optimal),
key = "Acc_type",
value = "Accuracy") %>%
group_by(participant) %>%
filter(separation != max(separation)) %>%
ungroup() %>%
mutate(beta_acc = Accuracy*(1-1e-4),
separation = separation/max(separation))
head(AccMea)
head(m_data_acc)
m_data <- m_data_acc %>%
filter(Acc_type == "Actual")
m1_acc <- brm(beta_acc ~ (separation + condition)^2,
data = m_data_acc,
family = "beta",
chains = 1,
iter = 2000,
warmup = 1000)
summary(m1_acc)
plot(marginal_effects(m1_acc))
