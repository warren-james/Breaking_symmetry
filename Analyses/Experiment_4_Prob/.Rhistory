#### Script to extract Data ####
# 1st year PhD project
# Probability Matching in the detection task
# Difference in this version is that participants are aiming
# to detect 1 of 10 letters rather than whether a dot is
# up or down.
# This second script is to look at performance in the second half
# of the experiment
#### Notes: ####
# letters are coded as numbers by the matlabd script
# we can change this if we have to but I will keep them as numbers for now
# but for future reference:
# 1 = C, 2 = D, 3 = H, 4 = K, 5 = N, 6 = O, 7 = R, 8 = S, 9 = V, 10 = Z
# fixated box goes from 1:3
# 1 = middle, 2 = left, 3 = right
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# NB: Need to add standardised version this so it's #
#        most likely vs least likely boxes          #
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# cross_side & target_side
# -1 = left, 1 = right
# condition is 1 or 2
# 1 = 50/50 first, 2 = bias first
# bias
# 1 = left bias, 2 = bias right
# cross_side refers to what side the cross was on... might be useful to look at as this
# is now some information that people could use even though it has nothing to do with
# the experiment itself... Though for this we need to keep the output of where
# people looked intact (fixated_box)
#### libraries needed ####
library(tidyverse)
library(psyphy)
#### any functions ####
# To make the proportions plots
prop_plt <- function(dataframe, title, sep_type){
# set up the plot
if(sep_type == "pixels"){
plt <- ggplot(dataframe,
aes(separation,
prop))
} else if(sep_type == "Visual Degrees") {
plt <- ggplot(dataframe,
aes(get_VisDegs(separation/ppcm, Screen_dist),
prop))
}
# make the title
plt <- plt + ggtitle(paste("Propotion of saccades to each side in the", title, "condition"))
# make the stacked plots
plt <- plt + geom_area(aes(colour = prop_boxes,
fill = prop_boxes),
position = "stack")
# input switch point line
if(sep_type == "pixels"){
plt <- plt + geom_vline(aes(xintercept = switch_point),
linetype = "dashed")
} else if(sep_type == "Visual Degrees"){
plt <- plt + geom_vline(aes(xintercept = get_VisDegs(switch_point/ppcm, Screen_dist)),
linetype = "dashed")
}
# label axes
plt <- plt + labs(x = paste("Delta (", sep_type, ")", sep = ""), y = "Proportion of fixations",
fill = "Box Fixated", colour = "Box Fixated")
# facet_wrap (if there are enough participants)
if(length(unique(prop_sides$participant))>1){
plt <- plt + facet_wrap(~as.numeric(participant))
}
plt <- plt + theme_bw()
plt <- plt + theme(legend.position = "bottom")
return(plt)
}
# Gets Visual Degrees
get_VisDegs <- function(separation,distance){
((2*atan2(separation,(2*distance)))*180)/pi
}
#### Any constants ####
Screen_dist <- 54.4
ppcm <- 1920/54
#### load in the dataset ####
# create a tibble for dataset
df <- tibble(
trial = numeric(),
block = numeric(),
separation = numeric(),
fixated_box = numeric(),
cross_side = numeric(),
target_side = numeric(),
response_letter = numeric(),
actual_letter = numeric(),
bias_left = numeric())
# create column names for the data we have
import_names <- c(
"trial",
"block",
"separation",
"fixated_box",
"cross_side",
"target_side",
"response_letter",
"actual_letter",
"bias_left")
# set path
results_files <- dir("data/results/Part_2/")
# temp
# results_files <- c("75_75_2_2_part2.txt","70_70_1_2_part2.txt")
# read in each data file
for (f in results_files){
d <- read.csv(
paste("data/results/Part_2/", f, sep=""), header = F)
# change column names
names(d) <- import_names
# get parts of the string for part no. and session number
temp <- strsplit(f, '[_]')[[1]]
# now input this information
# participant
d$participant <- temp[2]
# condition
d$condition <- temp[3]
# bias
d$bias <- temp[4]
# bind to df
df <- bind_rows(df, d)
}
# tidy
rm(d, f, import_names, results_files, temp)
# reorder df
df <- select(df,
participant,
condition,
bias,
block,
trial,
separation,
bias_left,
cross_side,
target_side,
fixated_box,
actual_letter,
response_letter)
# rename condition and bias levels to mean something
# condition
df$condition[df$condition == 1] <- "random first"
df$condition[df$condition == 2] <- "bias first"
# bias
df$bias[df$bias == 1] <- "left bias"
df$bias[df$bias == 2] <- "right bias"
# add in an accuracy column?
df$accuracy <- 0
df$accuracy[df$response_letter == df$actual_letter] <- 1
# add in column about bias_type
df$bias_type <- "random"
df$bias_type[df$bias_left != 0.5] <- "biased"
# rename for spatial information... 0r make -1,0,1 so it's consistent?
df$lcr <- 0
df$lcr[df$fixated_box == 2] <- -1
df$lcr[df$fixated_box == 3] <- 1
# get whether they fixated the common or uncommon side
# centre as this stays the same
df$standard_boxes <- "centre"
# right bias
df$standard_boxes[df$fixated_box == 2 & df$bias == "right bias"] <- "least likely"
df$standard_boxes[df$fixated_box == 3 & df$bias == "right bias"] <- "most likely"
# left bias
df$standard_boxes[df$fixated_box == 2 & df$bias == "left bias"] <- "most likely"
df$standard_boxes[df$fixated_box == 3 & df$bias == "left bias"] <- "least likely"
# when should we get rid of NA's?
# people may have seen where the target was and so could update their beliefs about
# which side is more likely?
# for now, remove them here
df <- df[complete.cases(df),]
#### Get switch points data ####
load("scratch/new_data/switch_points")
# add in the extra columns
df <- merge(df, switch_points)
# make saved version
df_part2 <- df
save(df_part2, file = "scratch/new_data/df_part2")
# tidy
rm(df_part2)
#### Making plots ####
# setup data
prop_sides <- df
prop_sides$lcr <- as.factor(prop_sides$lcr)
prop_sides$prop_boxes <- prop_sides$lcr
prop_sides <- prop_sides %>%
group_by(participant, separation, bias, bias_type, prop_boxes) %>%
summarise(n = n()) %>%
complete(prop_boxes, fill = list(n = 0)) %>%
mutate(prop = n / sum(n))
# use switch_points to get switch points for both bias types
switch_bias <- select(switch_points,
participant,
Eighty_Twenty)
# change colnames
colnames(switch_bias) <- c("participant",
"switch_point")
# add bias_type
switch_bias$bias_type <- "biased"
# again for random
switch_random <- select(switch_points,
participant,
Fifty_Fifty)
# change colnames
colnames(switch_random) <- c("participant",
"switch_point")
# add bias_type
switch_random$bias_type <- "random"
# change back to numeric?
prop_sides$prop_boxes <- as.numeric(prop_sides$prop_boxes)-2
# get separate datasets
prop_sides_random <- prop_sides[prop_sides$bias_type == "random",]
prop_sides_bias <- prop_sides[prop_sides$bias_type == "biased",]
# add in switch points
prop_sides_random <- merge(prop_sides_random, switch_random)
prop_sides_bias <- merge(prop_sides_bias, switch_bias)
# rename levels in prop_boxes for each set
prop_sides_bias$prop_boxes[prop_sides_bias$prop_boxes == 0] <- "Centre"
# left bias
prop_sides_bias$prop_boxes[prop_sides_bias$prop_boxes == -1 &
prop_sides_bias$bias == "left bias"] <- "Common side"
prop_sides_bias$prop_boxes[prop_sides_bias$prop_boxes == 1 &
prop_sides_bias$bias == "left bias"] <- "Uncommon side"
# right bias
prop_sides_bias$prop_boxes[prop_sides_bias$prop_boxes == -1 &
prop_sides_bias$bias == "right bias"] <- "Uncommon side"
prop_sides_bias$prop_boxes[prop_sides_bias$prop_boxes == 1 &
prop_sides_bias$bias == "right bias"] <- "Common side"
# for random condition we just want left, right, and centre
prop_sides_random$prop_boxes[prop_sides_random$prop_boxes == 0] <- "Centre"
prop_sides_random$prop_boxes[prop_sides_random$prop_boxes == 1] <- "Right"
prop_sides_random$prop_boxes[prop_sides_random$prop_boxes == -1] <- "Left"
# tidy
rm(switch_bias, switch_random)
# can edit prop_boxes to be appropriately named now as well...
# make plot(s)
# random plt
prop_plt(prop_sides_random, "random", "pixels")
# ggsave("scratch/plots/Part_2_prop_random_pixels.pdf", height = 10, width = 10)
prop_plt(prop_sides_random, "random", "Visual Degrees")
# ggsave("../../Figures/Experiment_4_Prob/Part_2_prop_random_vdegs.png",
#        height = 12,
#        width = 18,
#        units = "cm")
# bias plt
prop_plt(prop_sides_bias, "biased", "pixels")
# ggsave("scratch/plots/Part_2_prop_biased_pixels.pdf")
prop_plt(prop_sides_bias, "biased", "Visual Degrees")
# ggsave("../../Figures/Experiment_4_Prob/Part_2_prop_biased_vdegs.png",
#        height = 12,
#        width = 18,
#        units = "cm")
#### Make plots of just centre vs side by condition ####
# add in centre vs side column
prop_sides$cen_sid <- "Side"
prop_sides$cen_sid[prop_sides$prop_boxes == 0] <- "Centre"
# get summary
cen_side <- prop_sides %>%
group_by(participant, separation, bias_type, cen_sid) %>%
summarise(n = sum(n)) %>%
mutate(prop = n / sum(n))
cen_side <- merge(cen_side, switch_points)
# make the plots like the rest
centre <- cen_side[cen_side$cen_sid == "Centre",]
side <- cen_side[cen_side$cen_sid == "Side",]
dot_plt <- ggplot(side, aes(get_VisDegs(separation/ppcm, Screen_dist),
prop,
colour = bias_type))
dot_plt <- dot_plt + geom_point(aes(shape = bias_type,
colour = bias_type)) +
scale_shape_manual(values=c(3,4))
# make 80_20 switch
dot_plt <- dot_plt + geom_vline(aes(xintercept = get_VisDegs(Eighty_Twenty/ppcm, Screen_dist)),
linetype = "dashed",
colour = "red")
# make 50_50 switch
dot_plt <- dot_plt + geom_vline(aes(xintercept = get_VisDegs(Fifty_Fifty/ppcm, Screen_dist)),
linetype = "dashed",
colour = "blue")
dot_plt <- dot_plt + facet_wrap(~participant)
dot_plt <- dot_plt + theme(legend.position="bottom")
dot_plt$labels$y <- "Proportion of Fixations to the side boxes"
dot_plt$labels$x <- "Delta (Visual Degrees)"
dot_plt$labels$colour <- "Bias Type"
dot_plt$labels$shape <- "Bias Type"
dot_plt
# save this
# ggsave("scratch/plots/SideVSCentre.pdf", height = 10, width = 10)
#### Get bias to one side ####
# so make it so 0 means no bias (both equal) and one means exclusively one or the other?
df_just_side <- df[df$lcr != 0,]
bias_sides <- df_just_side %>%
group_by(participant, bias_type, lcr) %>%
summarise(n = n()) %>%
mutate(prop = n/sum(n))
bias_sides_2 <- bias_sides[-c(4)] %>%
group_by(participant) %>%
spread(lcr, prop)
bias_sides_2[is.na(bias_sides_2)] <- 0
# these give the exact same results
bias_sides_2$score <- abs(bias_sides_2$`1` - bias_sides_2$`-1`)
bias_sides_2$highest <- pmax(bias_sides_2$`1`, bias_sides_2$`-1`)
# really simple t test of these results
ttest <- t.test(bias_sides_2$score~bias_sides_2$bias_type, paired = T)
ttest
prop_plt
glm(score ~ as.factor(bias_type),
data = bias_sides_2,
family = binomial())
temp <- glm(score ~ as.factor(bias_type),
data = bias_sides_2,
family = binomial())
tmep
temp
m1 <- glm(prop ~ separation,
data = side,
family = binomial())
m1
summary(temp)
temp <- glm(highest ~ as.factor(bias_type),
data = bias_sides_2,
family = binomial())
anova(temp)
summary(temp)
descs_bias <- bias_sides_2 %>%
group_by(bias_type) %>%
summarise(meanshigh = mean(highest),
sdshigh = sd(highest),
meanscore = mean(score),
sdscore = sd(score))
descs_bias
anova(lmer(highest ~ as.factor(bias_type) + (1|participant), family = binomial)
)
library(lme4)
anova(lmer(highest ~ as.factor(bias_type) + (1|participant), family = binomial))
anova(lmer(highest ~ as.factor(bias_type) + (1|participant), data = bias_sides_2, family = binomial))
summary(lmer(highest ~ as.factor(bias_type) + (1|participant), data = bias_sides_2, family = binomial))
temp <- glm(highest ~ as.factor(bias_type) + (as.factor(bias_type)|participant),
data = bias_sides_2,
family = binomial())
bias_sides_2$bias_type <- as.factor(bias_sides_2$bias_type)
temp <- glm(highest ~ bias_type + (bias_type|participant),
data = bias_sides_2,
family = binomial())
temp <- glmer(highest ~ bias_type + (bias_type|participant),
data = bias_sides_2,
family = binomial())
summary(temp)
temp <- glm(highest ~ bias_type + (1|participant),
data = bias_sides_2,
family = binomial())
str(bias_sides_2)
bias_sides_2$participant <- as.factor(bias_sides_2$participant)
temp <- glm(highest ~ bias_type + (1|participant),
data = bias_sides_2,
family = binomial())
temp <- glm(highest ~ bias_type + (bias_type|participant),
data = bias_sides_2,
family = binomial())
temp <- glm(highest ~ bias_type,
data = bias_sides_2,
family = binomial())
temp
anova(tmep)
anova(temp)
summary(temp)
temp <- glm(log(highest) ~ bias_type,
data = bias_sides_2,
family = binomial())
temp <- glm(log(highest) ~ bias_type,
data = bias_sides_2)
summary(temp)
prop.test(bias_sides_2$highest, bias_sides_2$bias_type)
prop.test(table(bias_sides_2$highest, bias_sides_2$bias_type), correct = FALSE)
temp_data <- bias_sides_2 %>%
)
head(bias_sides)
bias_sides_2
temp_data <- bias_sides_2 %>% group_by(bias_type) %>% summarise(mean1 = mean('1'), meanNeg1 = mean('-1'))
temp_data
temp_data <- matrix(c(mean(bias_sides_2$`1`[bias_sides_2$bias_type == "biased"])))
temp_data
temp_data <- matrix(c(mean(bias_sides_2$`1`[bias_sides_2$bias_type == "biased"]),
mean(bias_sides_2$`1`[bias_sides_2$bias_type == "random"]),
mean(bias_sides_2$`-1`[bias_sides_2$bias_type == "biased"]),
mean(bias_sides_2$`-1`[bias_sides_2$bias_type == "random"])))
temp_data
temp_data <- matrix(c(mean(bias_sides_2$`1`[bias_sides_2$bias_type == "biased"]),
mean(bias_sides_2$`1`[bias_sides_2$bias_type == "random"]),
mean(bias_sides_2$`-1`[bias_sides_2$bias_type == "biased"]),
mean(bias_sides_2$`-1`[bias_sides_2$bias_type == "random"]),
ncol = 2))
temp_data
temp_data <- matrix(c(mean(bias_sides_2$`1`[bias_sides_2$bias_type == "biased"]),
mean(bias_sides_2$`1`[bias_sides_2$bias_type == "random"]),
mean(bias_sides_2$`-1`[bias_sides_2$bias_type == "biased"]),
mean(bias_sides_2$`-1`[bias_sides_2$bias_type == "random"]),
ncol = 2)
)
temp_data
temp_data <- matrix(c(mean(bias_sides_2$`1`[bias_sides_2$bias_type == "biased"]),
mean(bias_sides_2$`1`[bias_sides_2$bias_type == "random"]),
mean(bias_sides_2$`-1`[bias_sides_2$bias_type == "biased"]),
mean(bias_sides_2$`-1`[bias_sides_2$bias_type == "random"])),
ncol = 2)
temp_data
descs_bias
bias_sides_2
bias_sides_2$lowest <- pmin(bias_sides_2$`1`, bias_sides_2$`-1`)
temp_data <- matrix(c(mean(bias_sides_2$highest[bias_sides_2$bias_type == "biased"]),
mean(bias_sides_2$highest[bias_sides_2$bias_type == "random"]),
mean(bias_sides_2$lowest[bias_sides_2$bias_type == "biased"]),
mean(bias_sides_2$lowest[bias_sides_2$bias_type == "random"])),
ncol = 2)
temp_data
colnames(temp_data = c("highest", "lowest"))
rownames(temp_data = c("biased", "random"))
bias_sides_2$lowest <- pmin(bias_sides_2$`1`, bias_sides_2$`-1`)
# make it a factor
bias_sides_2$participant <- as.factor(bias_sides_2$participant)
bias_sides_2$bias_type <- as.factor(bias_sides_2$bias_type)
# really simple t test of these results
ttest <- t.test(bias_sides_2$score~bias_sides_2$bias_type, paired = T)
ttest
# fix it for proportions...
temp_data <- matrix(c(mean(bias_sides_2$highest[bias_sides_2$bias_type == "biased"]),
mean(bias_sides_2$highest[bias_sides_2$bias_type == "random"]),
mean(bias_sides_2$lowest[bias_sides_2$bias_type == "biased"]),
mean(bias_sides_2$lowest[bias_sides_2$bias_type == "random"])),
ncol = 2)
colnames(temp_data = c("highest", "lowest"))
rownames(temp_data = c("biased", "random"))
colnames(temp_data) <- c("highest", "lowest")
rownames(temp_data) <- c("biased", "random")
temp_data
prop.test(temp_data)
descs_bias
a <- seq(0,1, length(1000))
y <- dnorm(a, mean = 0.8591, sd = 0.14)
plot(a,y)
plot(a,y, type = "l")
plot(a,y, type = "l")
a <- seq(0,1, length(1000))
a
a <- seq(0,1, length = 1000)
a
plot(a,y, type = "l")
x <- seq(0,1, lenth = 100)
x
x <- seq(0,1, length = 100)
x
y <- dnorm(x, mean = 0.8591, sd = 0.14)
plot(x,y)
plot(x,y, type = "l")
descs_bias
descs_bias
y2 <- dnorm(x, mean = 0.6755, sd = 0.0739)
plot(x,y,type = "l") + plot(x,y2, type = "l")
plot(x,y,type = "l") + plot(x,y2, type = "l", add = T)
plot(x,y,type = "l")
plot(x,y2,type = "l", add = TRUE)
bias_sides_2
bias_sides
bias_sides_3 <- bias_sides[-c(4)] %>%
group_by(participant) %>%
spread(lcr, n)
bias_sides <- df_just_side %>%
group_by(participant, bias_type, lcr) %>%
summarise(num = n()) %>%
mutate(prop = n/sum(num))
bias_sides <- df_just_side %>%
group_by(participant, bias_type, lcr) %>%
summarise(num = n()) %>%
mutate(prop = num/sum(num))
bias_sides_3 <- bias_sides[-c(4)] %>%
group_by(participant) %>%
spread(lcr, num)
bias_sides
bias_sides_3 <- bias_sides[-c(5)] %>%
group_by(participant) %>%
spread(lcr, num)
bias_sides_3
bias_side_3[is.na(bias_sides_3)] <- 0
bias_sides_3[is.na(bias_sides_3)] <- 0
bias_sides_3$highest <- pmax(bias_sides_3$`1`, bias_sides_3$`-1`)
bias_sides_3$lowest <- pmin(bias_sides_3$`1`, bias_sides_3$`-1`)
temp_data <- matrix(c(mean(bias_sides_3$highest[bias_sides_3$bias_type == "biased"]),
mean(bias_sides_3$highest[bias_sides_3$bias_type == "random"]),
mean(bias_sides_3$lowest[bias_sides_3$bias_type == "biased"]),
mean(bias_sides_3$lowest[bias_sides_3$bias_type == "random"])),
ncol = 2)
colnames(temp_data) <- c("highest", "lowest")
rownames(temp_data) <- c("biased", "random")
temp <- glm(highest ~ bias_type,
data = bias_sides_2,
family = binomial())
prop.test(temp_data)
temp_data <- matrix(c(sum(bias_sides_3$highest[bias_sides_3$bias_type == "biased"]),
sum(bias_sides_3$highest[bias_sides_3$bias_type == "random"]),
sum(bias_sides_3$lowest[bias_sides_3$bias_type == "biased"]),
sum(bias_sides_3$lowest[bias_sides_3$bias_type == "random"])),
ncol = 2)
colnames(temp_data) <- c("highest", "lowest")
rownames(temp_data) <- c("biased", "random")
prop.test(temp_data)
ttest
chisq.test(temp_data)
mcnemar.test(temp_data)
mcnemar.exact(temp_data)
prop.test(temp_data)
chisq.test(temp_data)
mcnemar.test(temp_data)
descs_bias
1/0.2
