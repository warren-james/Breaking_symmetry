geom_segment(data = Fifty_overall,
aes(x = position, y = 0,
xend = position, yend = acc),
linetype = 1) +
geom_segment(data = Fifty_overall,
aes(x = 0, y = acc,
xend = position, yend = acc),
linetype = 1) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1))
plt_avg$labels$x <- "Distance (feet)"
# tidy
rm(m, ss, Est, p, seps, sub)
#### make plot ####
plt1 <- df %>%
ggplot(aes(Distance, Accuracy, colour = Person)) +
# geom_point() +
geom_smooth(#colour = "black",
method = glm,
method.args = list(family = "binomial"),
se = F,
fullrange = T) +
facet_wrap(~Person) +
see::scale_color_flat() +
theme_bw() +
theme(legend.position = "none",
strip.text.x = element_blank()) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) #+
# coord_cartesian(expand = F)
plt1$labels$x <- "Distance (feet)"
plt1 + geom_point()
### Add line to show the Fifty percent point ####
plt2 <- plt1 +
geom_segment(data = Fifty,
aes(x = position, y = 0,
xend = position, yend = acc),
linetype = 1) +
geom_segment(data = Fifty,
aes(x = 0, y = acc,
xend = position, yend = acc),
linetype = 1)
plt2
#### get choices ####
P1 <- 20
P2 <- 8
P3 <- 30
# choices for everyone
num_subs <- 20
choices <- c(round(rnorm(num_subs/2, Fifty$position, 2)), round(rnorm(num_subs/2, 4, 2)))
demo_version <- tibble(Person = seq(1,num_subs,1),
Group = rep(c("Achievement", "Accuracy"), each = num_subs/2),
Distance = choices)
# add in expected accuracy
demo <- merge(demo_version, acc_seps_overall)
# plot
plt_avg +
geom_segment(data = demo,
aes(x = Distance, y = 0,
xend = Distance, yend = Accuracy,
colour = Group),
linetype = 1,
size = 1.2,
alpha = 1) +
geom_segment(data = demo,
aes(x = 0, y = Accuracy,
xend = Distance, yend = Accuracy,
colour = Group),
linetype = 1,
size = 1.2,
alpha = 1) +
see::scale_color_flat()
demo %>%
ggplot(aes(Distance, colour = Group, fill = Group)) +
geom_histogram(binwidth = 1, position = "dodge")+
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw()
demo %>%
ggplot(aes(Distance, colour = Group, fill = Group)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw()
#### ENTER IN CHOICES FOR EVERYONE ####
# num_subs <- 20
choices <- c(P1, P2, P3, 1, 20,
7, 8, 7, 20, 15,
14, 20, 8, 6, 1,
13, 13, 1, 12, 24)
num_subs <- length(choices)
df_choices_overall <- tibble(Person = seq(1,num_subs,1),
Group = rep(c("Achievement", "Accuracy"), num_subs/2),
Distance = choices)
# add in expected accuracy
df_choices_overall <- merge(df_choices_overall, acc_seps_overall)
plt_avg1 <- plt_avg +
geom_segment(data = df_choices_overall,
aes(x = Distance, y = 0,
xend = Distance, yend = Accuracy,
colour = Group),
linetype = 1) +
geom_segment(data = df_choices_overall,
aes(x = 0, y = Accuracy,
xend = Distance, yend = Accuracy,
colour = Group),
linetype = 1) +
see::scale_color_flat()
plt_avg1
plt_avg2 <- df_choices_overall %>%
ggplot(aes(Distance, colour = Group, fill = Group)) +
# geom_density(alpha = 0.3) +
geom_histogram(position = "dodge") +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw()
plt_avg2
head(plt_avg[["data"]])
head(plt_avg2[["data"]])
head(df_choices_overall)
df_choices_overall %>% group_by(Group) %>% summarise(mu = mean(Distance))
df_choices_overall %>% group_by(Group) %>% summarise(mu = mean(Distance), sig = sd(Distance))
t.test(df_choices_overall$Distance ~ df_choices_overall$Group)
View(df_choices_overall)
tibble(participants = c(seq(97,94,1)))
temp <- tibble(participants = c(seq(97,94,1)))
####
# we want order to change...
# And that's it?
# so we just need to to do every other participant
library(tidyverse)
temp <- tibble(participants = c(seq(97,94,1)))
temp
(seq(97,94,1)
)
seq(1, 2, 0.5)
seq(1, -1, 0.5)
seq(97,94,-1)
library(tidyverse)
temp <- tibble(participants = c(seq(97,94,-1), seq(1,30,1)))
temp
View(temp)
library(tidyverse)
temp <- tibble(participants = c(seq(97,94,-1), seq(1,30,1)),
order = rep(c(1,2), length(participants)/2))
head(temp)
View(temp)
741e6
Eu_old <- 3300
Eu_present <- 741e6
# time
time_taken <- 42000
x <- seq(1,6,1)
y <- dnorm(x, mean = 3, 2)
plot(x, y )
x <- seq(1,6,1)
y <- dnorm(x, mean = 3.5, 2)
plot(x, y )
#simple sim
pairs <- Eu_old/2
going <- T
start_val <- Eu_old
count <- 1
while(going){
pairs <- start_val/2
start_val <- start_val + (pairs * 3)
count <- count + 1
if(start_val > Eu_present){
print(count)
}
}
pairs <- Eu_old/2
going <- T
start_val <- Eu_old
count <- 1
while(going){
pairs <- start_val/2
start_val <- start_val + (pairs * 3)
count <- count + 1
if(start_val > Eu_present){
print(count)
going = F
}
}
2^.25
2*(2*.25)
2^.25
4*sqrt(2^1)
help(nthroot)
??nthroot
log(4)
2^1.386
log2(4)
exp(1.386)
60*.65
60*.65
40*.65
60*.6
install.packages("lme4")
library(tidyverse)
library(lme4)
library(brms)
R.version()
#### load data ####
load("scratch/new_data/df_part2_fixed")
# processing
df_model <- df_part2_fixed %>%
filter(separation != 640) %>% # remove furthest point for now
select(participant, dist_type, bias_type, separation, st_box, accuracy) %>%
mutate(Ml_fix = ifelse(st_box == "most likely", 1, 0),
S_fix = ifelse(st_box != "centre", 1, 0))
setwd("F:/Uni/Github/Breaking_symmetry/Analyses/Experiment_4_Prob")
#### load data ####
load("scratch/new_data/df_part2_fixed")
# processing
df_model <- df_part2_fixed %>%
filter(separation != 640) %>% # remove furthest point for now
select(participant, dist_type, bias_type, separation, st_box, accuracy) %>%
mutate(Ml_fix = ifelse(st_box == "most likely", 1, 0),
S_fix = ifelse(st_box != "centre", 1, 0))
# fails to converge... try bayes for now
m_fix_S_sep.2 <- glmer(S_fix ~ bias_type * dist_type + (bias_type + dist_type|participant),
data = df_model,
family = "binomial")
isSingular(m_fix_S_sep.2)
summary.mermod(m_fix_S_sep.2)
VarCorr.mermod(m_fix_S_sep.2)
theta <- getME(model,"theta")
## diagonal elements are identifiable because they are fitted
##  with a lower bound of zero ...
diag.element <- getME(model,"lower")==0
any(theta[diag.element]<1e-5)
theta <- getME(m_fix_S_sep.2,"theta")
## diagonal elements are identifiable because they are fitted
##  with a lower bound of zero ...
diag.element <- getME(m_fix_S_sep.2,"lower")==0
any(theta[diag.element]<1e-5)
theta
diag.element
theta(m_fix_S_sep.2)
theta <- getME(m_fix_S_sep.2,"theta")
## diagonal elements are identifiable because they are fitted
##  with a lower bound of zero ...
diag.element <- getME(m_fix_S_sep.2,"lower")==0
any(theta[diag.element]<1e-4)
theta <- getME(m_fix_S_sep.2,"theta")
## diagonal elements are identifiable because they are fitted
##  with a lower bound of zero ...
diag.element <- getME(m_fix_S_sep.2,"lower")==0
any(theta[diag.element]<1e-3)
theta <- getME(m_fix_S_sep.2,"theta")
## diagonal elements are identifiable because they are fitted
##  with a lower bound of zero ...
diag.element <- getME(m_fix_S_sep.2,"lower")==0
any(theta[diag.element]<1e-2)
theta <- getME(m_fix_S_sep.2,"theta")
## diagonal elements are identifiable because they are fitted
##  with a lower bound of zero ...
diag.element <- getME(m_fix_S_sep.2,"lower")==0
any(theta[diag.element]<1e-1)
theta <- getME(m_fix_S_sep.2,"theta")
## diagonal elements are identifiable because they are fitted
##  with a lower bound of zero ...
diag.element <- getME(m_fix_S_sep.2,"lower")==0
any(theta[diag.element]<1)
theta
diag.element
?convergence
m_fix_S_sep.2@optinfo$derivs
summary(m_fix_S_sep.2)
tt <- getME(m_fix_S_sep.2,"theta")
ll <- getME(m_fix_S_sep.2,"lower")
min(tt[ll==0])
m_fix_S_sep.2 <- glmer(S_fix ~ bias_type * dist_type + (bias_type|participant),
data = df_model,
family = "binomial")
tt <- getME(m_fix_S_sep.2,"theta")
ll <- getME(m_fix_S_sep.2,"lower")
min(tt[ll==0])
tt
ll
m_fix_S_sep.2 <- glmer(S_fix ~ bias_type * dist_type + (bias_type + dist_type|participant),
data = df_model,
family = "binomial",
control=glmerControl(optCtrl=list(maxfun=2e4)))
tt <- getME(m_fix_S_sep.2,"theta")
ll <- getME(m_fix_S_sep.2,"lower")
min(tt[ll==0])
isSingular(m_fix_S_sep.2)
summary(m_fix_S_sep.2)
bm_fix_S_dt <- brm(S_fix ~ (bias_type + dist_type)^2 + (dist_type + bias_type|participant),
data = df_model,
family = "bernoulli",
chains = 1,
iter = 1000,
warmup = 500)
summary(bm_fix_S_dt)
head(df_model)
test <- df_model %>%
group_by(participant, bias_type, dist_type) %>%
summarise(prop = mean(S_fix)) %>%
ungroup()
head(test)
test <- df_model %>%
group_by(participant, bias_type, dist_type) %>%
summarise(prop = mean(S_fix)) %>%
ungroup() %>%
spread(dist_type, prop)
head(test)
test <- df_model %>%
group_by(participant, bias_type, dist_type) %>%
summarise(prop = mean(S_fix)) %>%
ungroup() %>%
spread(dist_type, prop) %>%
mutate(diff = Close - Far)
head(test)
test <- df_model %>%
group_by(participant, bias_type, dist_type) %>%
summarise(prop = mean(S_fix)) %>%
ungroup() %>%
spread(dist_type, prop) %>%
mutate(diff = Close - Far) %>%
ggplot(aes(diff, colour = bias_type, fill = bias_type)) +
geom_histogram(position = "dodge")
test
test <- df_model %>%
group_by(participant, bias_type, dist_type) %>%
summarise(prop = mean(S_fix),
logit_transform = logit(prop, percents = T)) %>%
ungroup() %>%
spread(dist_type, prop) %>%
mutate(diff = Close - Far) #%>%
#    ggplot(aes(diff, colour = bias_type, fill = bias_type)) +
#    geom_histogram(position = "dodge")
??logit
test <- df_model %>%
group_by(participant, bias_type, dist_type) %>%
summarise(prop = mean(S_fix),
logit_transform = gtools:logit(prop, percents = T)) %>%
ungroup() %>%
spread(dist_type, prop) %>%
mutate(diff = Close - Far) #%>%
#    ggplot(aes(diff, colour = bias_type, fill = bias_type)) +
#    geom_histogram(position = "dodge")
test <- df_model %>%
group_by(participant, bias_type, dist_type) %>%
summarise(prop = mean(S_fix),
logit_transform = gtools::logit(prop, percents = T)) %>%
ungroup() %>%
spread(dist_type, prop) %>%
mutate(diff = Close - Far) #%>%
#    ggplot(aes(diff, colour = bias_type, fill = bias_type)) +
#    geom_histogram(position = "dodge")
test <- df_model %>%
group_by(participant, bias_type, dist_type) %>%
summarise(prop = mean(S_fix),
logit_transform = gtools::logit(prop)) %>%
ungroup() %>%
spread(dist_type, prop) %>%
mutate(diff = Close - Far) #%>%
#    ggplot(aes(diff, colour = bias_type, fill = bias_type)) +
#    geom_histogram(position = "dodge")
head(test)
test <- df_model %>%
group_by(participant, bias_type, dist_type) %>%
summarise(prop = mean(S_fix),
logit_transform = gtools::logit(prop)) %>%
ungroup() %>%
spread(dist_type, values = c(prop, logit_transform) %>%
mutate(diff = Close - Far) #%>%
#    ggplot(aes(diff, colour = bias_type, fill = bias_type)) +
#    geom_histogram(position = "dodge")
)
test <- df_model %>%
group_by(participant, bias_type, dist_type) %>%
summarise(prop = mean(S_fix),
logit_transform = gtools::logit(prop)) %>%
ungroup() %>%
spread(dist_type, values = c(prop, logit_transform))%>%
mutate(diff = Close - Far) #%>%
#    ggplot(aes(diff, colour = bias_type, fill = bias_type)) +
#    geom_histogram(position = "dodge")
test <- df_model %>%
group_by(participant, bias_type, dist_type) %>%
summarise(prop = mean(S_fix)) %>%
ungroup() %>%
spread(dist_type, prop)%>%
mutate(diff = Close - Far) #%>%
#    ggplot(aes(diff, colour = bias_type, fill = bias_type)) +
#    geom_histogram(position = "dodge")
head(test)
test <- df_model %>%
group_by(participant, bias_type, dist_type) %>%
summarise(prop = mean(S_fix)) %>%
ungroup() %>%
spread(dist_type, prop)%>%
mutate(diff = Close - Far,
log_c = gtools::logit(Close),
log_f = gtools::logit(Far)) #%>%
#    ggplot(aes(diff, colour = bias_type, fill = bias_type)) +
#    geom_histogram(position = "dodge")
head(test)
test <- df_model %>%
group_by(participant, bias_type, dist_type) %>%
summarise(prop = mean(S_fix)) %>%
ungroup() %>%
spread(dist_type, prop)%>%
mutate(diff = Close - Far,
log_c = gtools::logit(Close, min = 0, max = 1),
log_f = gtools::logit(Far, min = 0, max = 1)) #%>%
#    ggplot(aes(diff, colour = bias_type, fill = bias_type)) +
#    geom_histogram(position = "dodge")
head(test)
help(logit)
logit(0.9)
boot::logit(0.9)
boot::logit(1)
test <- df_model %>%
group_by(participant, bias_type, dist_type) %>%
summarise(prop = mean(S_fix)) %>%
ungroup() %>%
spread(dist_type, prop)%>%
mutate(diff = Close - Far,
Close = Close * (0.9999 - 0.0001) + 0.0001,
Far = Far * (0.9999 - 0.0001) + 0.0001,
log_c = gtools::logit(Close, min = 0, max = 1),
log_f = gtools::logit(Far, min = 0, max = 1)) #%>%
#    ggplot(aes(diff, colour = bias_type, fill = bias_type)) +
#    geom_histogram(position = "dodge")
head(test)
test <- df_model %>%
group_by(participant, bias_type, dist_type) %>%
summarise(prop = mean(S_fix)) %>%
ungroup() %>%
spread(dist_type, prop)%>%
mutate(diff = Close - Far,
Close = Close * (0.9999 - 0.0001) + 0.0001,
Far = Far * (0.9999 - 0.0001) + 0.0001,
log_c = gtools::logit(Close, min = 0, max = 1),
log_f = gtools::logit(Far, min = 0, max = 1),
diff_log = log_c - log_f) %>%
ggplot(aes(diff_log, colour = bias_type, fill = bias_type)) +
geom_histogram(position = "dodge")
test
head(test[["data"]])
View(test)
View(test[["data"]])
gtools::logit(0.9)
base::logit(0.9)
boot::logit(0.9)
test
boot::logit(0.999999)
boot::logit(0.999999999999999999999)
boot::logit(0.9999999999999999)
boot::logit(0.999999999999999999)
boot::logit(0.99999999999999999)
boot::logit(0.9999999999999999)
boot::logit(0.99999999999999998)
head(df_model)
data = df_model,
family = categorial(link = "logit"),
chains = 1,
iter = 1000,
warmup = 500)
bm_allchoices <- brms(st_box ~ bias_type * dist_type + (bias_type + dist_type | participant),
data = df_model,
family = categorial(link = "logit"),
chains = 1,
iter = 1000,
warmup = 500)
bm_allchoices <- brm(st_box ~ bias_type * dist_type + (bias_type + dist_type | participant),
data = df_model,
family = categorial(link = "logit"),
chains = 1,
iter = 1000,
warmup = 500)
bm_allchoices <- brm(st_box ~ bias_type * dist_type + (bias_type + dist_type | participant),
data = df_model,
family = categorical(link = "logit"),
chains = 1,
iter = 1000,
warmup = 500)
bm_allchoices <- brm(st_box ~ bias_type * dist_type + (bias_type + dist_type | participant),
data = df_model,
family = multinomial(),
chains = 1,
iter = 1000,
warmup = 500)
bm_allchoices <- brm(st_box ~ bias_type * dist_type + (bias_type + dist_type | participant),
data = df_model,
family = multinomial(),
chains = 1,
iter = 1000,
warmup = 500)
N <- 15
dat <- data.frame(
y1 = rbinom(N, 10, 0.3), y2 = rbinom(N, 10, 0.5),
y3 = rbinom(N, 10, 0.7), x = rnorm(N)
)
dat$size <- with(dat, y1 + y2 + y3)
dat$y <- with(dat, cbind(y1, y2, y3))
head(dat)
bm_allchoices <- brm(st_box ~ bias_type * dist_type + (bias_type + dist_type | participant),
data = df_model,
family = categorical(link = "logit"),
chains = 1,
iter = 1000,
warmup = 500,
refresh = 2)
summary(bm_allchoices)
save(bm_allchoices, file = "modelling/BRMS/model_output/bm_multinomial")
plot(marginal_effects(bm_allchoices))
library(shinystan)
launch_shinystan(bm_allchoices)
