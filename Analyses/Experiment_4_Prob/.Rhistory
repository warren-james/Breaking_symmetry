scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,12),
labels = c("1","2","3","4","5","6","7","8","LP")) +
see::scale_fill_flat() +
see::scale_colour_flat() +
# theme(strip.text.x = element_blank()) +
# facet_wrap(participant ~ bias_type, ncol = 8)
facet_grid(participant ~ bias_type)
plt_stacked_bars_bt
plt_stacked_bars_bt <- df_fixed_boxtype %>%
select(participant, bias_type, separation, st_box) %>%
group_by(participant, bias_type) %>%
mutate(sep_factor = as.numeric(as.factor(separation)),
sep_factor = ifelse(separation == 640, 12, sep_factor)) %>%
ungroup() %>%
group_by(participant, bias_type, st_box, sep_factor) %>%
summarise(n = n()) %>%
ungroup() %>%
complete(sep_factor,
nesting(participant, bias_type, st_box)) %>%
complete(st_box,
nesting(participant, bias_type, sep_factor)) %>%
mutate(n = ifelse(is.na(n), 0, n),
bias_box = paste(bias_type, st_box)) %>%
# ungroup() %>%
group_by(participant, bias_type, sep_factor) %>%
mutate(total_n = sum(n),
prop = n/total_n,
st_box = factor(st_box, c("least likely", "centre", "most likely"),
labels = c("Leasy Likely", "Centre", "Most Likely"))) %>%
ggplot(aes(sep_factor,
prop,
colour = st_box,
fill = st_box)) +
geom_bar(stat = "identity",
alpha = .3) +
scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,12),
labels = c("1","2","3","4","5","6","7","8","LP")) +
see::scale_fill_flat() +
see::scale_colour_flat() +
# theme(strip.text.x = element_blank()) +
# facet_wrap(participant ~ bias_type, ncol = 8)
facet_grid(participant ~ bias_type)
plt_stacked_bars_bt
plt_stacked_bars_bt <- df_fixed_boxtype %>%
select(participant, bias_type, separation, st_box) %>%
group_by(participant, bias_type) %>%
mutate(sep_factor = as.numeric(as.factor(separation)),
sep_factor = ifelse(separation == 640, 12, sep_factor)) %>%
ungroup() %>%
group_by(participant, bias_type, st_box, sep_factor) %>%
summarise(n = n()) %>%
ungroup() %>%
complete(sep_factor,
nesting(participant, bias_type, st_box)) %>%
complete(st_box,
nesting(participant, bias_type, sep_factor)) %>%
mutate(n = ifelse(is.na(n), 0, n),
bias_box = paste(bias_type, st_box)) %>%
# ungroup() %>%
group_by(participant, bias_type, sep_factor) %>%
mutate(total_n = sum(n),
prop = n/total_n,
st_box = factor(st_box, c("least likely", "centre", "most likely"),
labels = c("Leasy Likely", "Centre", "Most Likely"))) %>%
ggplot(aes(sep_factor,
prop,
colour = st_box,
fill = st_box)) +
geom_bar(stat = "identity",
alpha = .3) +
scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,12),
labels = c("1","2","3","4","5","6","7","8","LP")) +
see::scale_fill_flat() +
see::scale_colour_flat() +
scale_y_continuous(breaks = c(0, .5, 1),
labels = scales::percent_format(accuracy = 1)) +
# theme(strip.text.x = element_blank()) +
# facet_wrap(participant ~ bias_type, ncol = 8)
facet_grid(participant ~ bias_type)
plt_stacked_bars_bt
plt_stacked_bars_bt <- df_fixed_boxtype %>%
select(participant, bias_type, separation, st_box) %>%
group_by(participant, bias_type) %>%
mutate(sep_factor = as.numeric(as.factor(separation)),
sep_factor = ifelse(separation == 640, 12, sep_factor)) %>%
ungroup() %>%
group_by(participant, bias_type, st_box, sep_factor) %>%
summarise(n = n()) %>%
ungroup() %>%
complete(sep_factor,
nesting(participant, bias_type, st_box)) %>%
complete(st_box,
nesting(participant, bias_type, sep_factor)) %>%
mutate(n = ifelse(is.na(n), 0, n),
bias_box = paste(bias_type, st_box)) %>%
# ungroup() %>%
group_by(participant, bias_type, sep_factor) %>%
mutate(total_n = sum(n),
prop = n/total_n,
st_box = factor(st_box, c("least likely", "centre", "most likely"),
labels = c("Leasy Likely", "Centre", "Most Likely")),
particiapnt = as.numeric(participant)) %>%
ggplot(aes(sep_factor,
prop,
colour = st_box,
fill = st_box)) +
geom_bar(stat = "identity",
alpha = .3) +
scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,12),
labels = c("1","2","3","4","5","6","7","8","LP")) +
see::scale_fill_flat() +
see::scale_colour_flat() +
scale_y_continuous(breaks = c(0, .5, 1),
labels = scales::percent_format(accuracy = 1)) +
# theme(strip.text.x = element_blank()) +
# facet_wrap(participant ~ bias_type, ncol = 8)
facet_grid(participant ~ bias_type)
plt_stacked_bars_bt
# try again with box type added in
plt_stacked_bars_bt <- df_fixed_boxtype %>%
select(participant, bias_type, separation, st_box) %>%
group_by(participant, bias_type) %>%
mutate(sep_factor = as.numeric(as.factor(separation)),
sep_factor = ifelse(separation == 640, 12, sep_factor)) %>%
ungroup() %>%
group_by(participant, bias_type, st_box, sep_factor) %>%
summarise(n = n()) %>%
ungroup() %>%
complete(sep_factor,
nesting(participant, bias_type, st_box)) %>%
complete(st_box,
nesting(participant, bias_type, sep_factor)) %>%
mutate(n = ifelse(is.na(n), 0, n),
bias_box = paste(bias_type, st_box)) %>%
# ungroup() %>%
group_by(participant, bias_type, sep_factor) %>%
mutate(total_n = sum(n),
prop = n/total_n,
st_box = factor(st_box, c("least likely", "centre", "most likely"),
labels = c("Leasy Likely", "Centre", "Most Likely")),
participant = as.numeric(participant)) %>%
ggplot(aes(sep_factor,
prop,
colour = st_box,
fill = st_box)) +
geom_bar(stat = "identity",
alpha = .3) +
scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,12),
labels = c("1","2","3","4","5","6","7","8","LP")) +
see::scale_fill_flat() +
see::scale_colour_flat() +
scale_y_continuous(breaks = c(0, .5, 1),
labels = scales::percent_format(accuracy = 1)) +
# theme(strip.text.x = element_blank()) +
# facet_wrap(participant ~ bias_type, ncol = 8)
facet_grid(participant ~ bias_type)
plt_stacked_bars_bt
plt_stacked_bars_bt <- df_fixed_boxtype %>%
select(participant, bias_type, separation, st_box) %>%
group_by(participant, bias_type) %>%
mutate(sep_factor = as.numeric(as.factor(separation)),
sep_factor = ifelse(separation == 640, 12, sep_factor)) %>%
ungroup() %>%
group_by(participant, bias_type, st_box, sep_factor) %>%
summarise(n = n()) %>%
ungroup() %>%
complete(sep_factor,
nesting(participant, bias_type, st_box)) %>%
complete(st_box,
nesting(participant, bias_type, sep_factor)) %>%
mutate(n = ifelse(is.na(n), 0, n),
bias_box = paste(bias_type, st_box)) %>%
# ungroup() %>%
group_by(participant, bias_type, sep_factor) %>%
mutate(total_n = sum(n),
prop = n/total_n,
st_box = factor(st_box, c("least likely", "centre", "most likely"),
labels = c("Leasy Likely", "Centre", "Most Likely"))) %>%
ungroup() %>%
mutate(participant = as.numeric(participant)) %>%
ggplot(aes(sep_factor,
prop,
colour = st_box,
fill = st_box)) +
geom_bar(stat = "identity",
alpha = .3) +
scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,12),
labels = c("1","2","3","4","5","6","7","8","LP")) +
see::scale_fill_flat() +
see::scale_colour_flat() +
scale_y_continuous(breaks = c(0, .5, 1),
labels = scales::percent_format(accuracy = 1)) +
# theme(strip.text.x = element_blank()) +
# facet_wrap(participant ~ bias_type, ncol = 8)
facet_grid(participant ~ bias_type)
plt_stacked_bars_bt
plt_stacked_bars_bt <- df_fixed_boxtype %>%
select(participant, bias_type, separation, st_box) %>%
group_by(participant, bias_type) %>%
mutate(sep_factor = as.numeric(as.factor(separation)),
sep_factor = ifelse(separation == 640, 10, sep_factor)) %>%
ungroup() %>%
group_by(participant, bias_type, st_box, sep_factor) %>%
summarise(n = n()) %>%
ungroup() %>%
complete(sep_factor,
nesting(participant, bias_type, st_box)) %>%
complete(st_box,
nesting(participant, bias_type, sep_factor)) %>%
mutate(n = ifelse(is.na(n), 0, n),
bias_box = paste(bias_type, st_box)) %>%
# ungroup() %>%
group_by(participant, bias_type, sep_factor) %>%
mutate(total_n = sum(n),
prop = n/total_n,
st_box = factor(st_box, c("least likely", "centre", "most likely"),
labels = c("Leasy Likely", "Centre", "Most Likely"))) %>%
ungroup() %>%
mutate(participant = as.numeric(participant)) %>%
ggplot(aes(sep_factor,
prop,
colour = st_box,
fill = st_box)) +
geom_bar(stat = "identity",
alpha = .3) +
scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,10),
labels = c("1","2","3","4","5","6","7","8","LP")) +
see::scale_fill_flat() +
see::scale_colour_flat() +
scale_y_continuous(breaks = c(0, .5, 1),
labels = scales::percent_format(accuracy = 1)) +
# theme(strip.text.x = element_blank()) +
# facet_wrap(participant ~ bias_type, ncol = 8)
facet_grid(participant ~ bias_type)
plt_stacked_bars_bt
rm(list = ls())
dev.off()
install.packages("neuralnet")
library(neuralnet)
df <- tibble(TKS = c(20, 10, 30, 20, 80, 30),
CSS = c(90, 20, 40, 50, 50, 80),
Placed = c(1, 0, 0, 0, 1, 1))
library(neuralnet)
library(tidyverse)
#### make data ####
df <- tibble(TKS = c(20, 10, 30, 20, 80, 30),
CSS = c(90, 20, 40, 50, 50, 80),
Placed = c(1, 0, 0, 0, 1, 1))
head(df)
nn = nerualnet(Placed~TKS + CSS,
data = df,
hidden = 3,
act.fct = "logistic",
linear.output = F)
library(neuralnet)
#### make network ####
nn = neuralnet(Placed~TKS + CSS,
data = df,
hidden = 3,
act.fct = "logistic",
linear.output = F)
nn
plot(nn)
test <- tibble(TKS = c(30, 40, 85),
CSS = c(85, 50, 40))
test <- tibble(TKS = c(30, 40, 85),
CSS = c(85, 50, 40))
Predict <- compute(nn, test)
Predict$net.result
# create a test set
test <- tibble(TKS = c(30, 40, 85),
CSS = c(85, 50, 40))
Predict <- neuralnet::compute(nn, test)
Predict$net.result
test <- data.frame(TKS = c(30, 40, 85),
CSS = c(85, 50, 40))
Predict <- neuralnet::compute(nn, test)
Predict$net.result
df
nn <- neuralnet(Placed~TKS + CSS,
data = df,
hidden = 3,
act.fct = "logistic",
linear.output = F)
nn
plot(nn)
nn <- neuralnet(Placed~TKS + CSS,
data = df,
hidden = 3,
act.fct = "logistic",
linear.output = F)
# plot this
plot(nn)
nn <- neuralnet(Placed~TKS + CSS,
data = df,
hidden = 3,
act.fct = "logistic",
linear.output = F)
# plot this
plot(nn)
# create a test set
test <- data.frame(TKS = c(30, 40, 85),
CSS = c(85, 50, 40))
Predict <- neuralnet::compute(nn, test)
Predict$net.result
rm(n)
rm(nn)
#### make network ####
nn <- neuralnet(Placed~TKS + CSS,
data = df,
hidden = 3,
act.fct = "logistic",
linear.output = F)
# plot this
plot(nn)
#### library ####
library(neuralnet)
library(tidyverse)
#### make data ####
# this is our training data
# supervised because we have given it labels
df <- data.frame(TKS = c(20, 10, 30, 20, 80, 30),
CSS = c(90, 20, 40, 50, 50, 80),
Placed = c(1, 0, 0, 0, 1, 1))
#### make network ####
nn <- neuralnet(Placed~TKS + CSS,
data = df,
hidden = 3,
act.fct = "logistic",
linear.output = F)
# plot this
plot(nn)
#### test the network ####
# create a test set
test <- data.frame(TKS = c(30, 40, 85),
CSS = c(85, 50, 40))
Predict <- neuralnet::compute(nn, test)
Predict$net.result
rm(list = ls())
dev.off()
#### setting up ####
set.seed(500)
library(MASS)
data <- Boston
head(data)
index <- sample(1:nrow(data), round(0.75 * nrow(data)))
# we're taking 75% of the data to train
index <- sample(1:nrow(data), round(0.75 * nrow(data)))
# set train and test samples
train <- data[index]
test <- data[-index]
# set train and test samples
train <- data[index,]
test <- data[-index,]
lm.fit <- glm(medv~., data = train)
summary(lm.fit
)
head(data)
lm.fit <- glm(medv~., data = train)
summary(lm.fit)
pr.lm <- predict(lm.fit, test)
MSE.lm <- sum((pr.lm - test$medv)^2)/nrow(test)
MSE.lm
maxs <- apply(data, 2, max)
mins <- apply(data, 2, min)
maxs
mins
scaled <- as.data.frame(scale(data,
center = mins,
scale = maxs-mins))
scaled
train_ <- scaled[index,]
test_ <- scaled[-index,]
train
View(test_)
head(data)
f <- as.formula(paste("medv ~", paste(n[!n %in% "medv"],
collapse = " + ")))
f <- as.formula(paste("medv ~", paste(n[!n %in% "medv"],
collapse = " + ")))
head(data)
paste(n[!n %in% "medv"],
collapse = " + ")
n <- names(train_)
f <- as.formula(paste("medv ~", paste(n[!n %in% "medv"],
collapse = " + ")))
f
n
nn <- neuralnet(f,
data = train_,
hidden = c(5, 3),
linear.output = T)
plot(nn)
nn
summary(nn)
pr.nn <- neuralnet::compute(nn, test_[,1:13])
pr.nn_ <- pr.nn$net.result * (max(data$medv) - min(data$medv)) + min(data$medv)
pr.nn <- neuralnet::compute(nn, test_[,1:13])
pr.nn_ <- pr.nn$net.result * (max(data$medv) - min(data$medv)) + min(data$medv)
test.r <- (test_$medv)*(max(data$medv) - min(data$medv)) + min(data$medv)
MSE.nn <- sum9(test.r - pr.nn_)^2)/nrow(nrow(test_))
MSE.nn <- sum9(test.r - pr.nn_)^2)/nrow(test_)
MSE.nn <- sum(test.r - pr.nn_)^2)/nrow(test_)
MSE.nn <- sum((test.r - pr.nn_)^2)/nrow(test_)
MSE.nn
print(paste("lm: ", MSE.lm, " nn: ", MSE.nn))
head(test)
pr.lm
# could combine the data to make a decent ggplot
test %>%
mutate(nn_pred = pr.nn,
lm_pred = pr.nn)
# could combine the data to make a decent ggplot
test %>%
mutate(nn_pred = t(pr.nn),
lm_pred = t(pr.nn))
head(t(nn_pred))
head(t(pr.nn))
pr.nn$net.result
pr.lm
pr.lm$medv
pr.lm
# could combine the data to make a decent ggplot
test %>%
mutate(nn_pred = pr.nn$net.result)
test %>%
mutate(nn_pred = pr.nn_$net.result)
# could combine the data to make a decent ggplot
test %>%
mutate(nn_pred = pr.nn_)
# could combine the data to make a decent ggplot
test %>%
mutate(nn_pred = pr.nn_,
lm_pred = pr.lm)
# could combine the data to make a decent ggplot
test %>%
mutate(nn_pred = pr.nn_,
lm_pred = pr.lm) %>%
gather(c(nn_pred, lm_pred),
key = "model",
value = "prediction")
# could combine the data to make a decent ggplot
test %>%
mutate(nn_pred = pr.nn_,
lm_pred = pr.lm)
test %>%
mutate(nn_pred = pr.nn_,
lm_pred = pr.lm) %>%
gather(c(nn_pred, lm_pred),
key = "model",
value = "prediction")
# could combine the data to make a decent ggplot
test %>%
mutate(nn_pred = pr.nn_,
lm_pred = pr.lm) %>%
gather(c(nn_pred, lm_pred),
key = "model",
value = "prediction") %>%
ggplot(aes(medv, prediciton,
colour = model)) +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
see::scale_color_flat()
# by making some simple plots
# could combine the data to make a decent ggplot
test %>%
mutate(nn_pred = pr.nn_,
lm_pred = pr.lm) %>%
gather(c(nn_pred, lm_pred),
key = "model",
value = "prediction") %>%
ggplot(aes(medv, prediciton,
colour = model)) +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
see::scale_color_flat()
test %>%
mutate(nn_pred = pr.nn_,
lm_pred = pr.lm) %>%
gather(c(nn_pred, lm_pred),
key = "model",
value = "prediction")
temp <- test %>%
mutate(nn_pred = pr.nn_,
lm_pred = pr.lm) %>%
gather(c(nn_pred, lm_pred),
key = "model",
value = "prediction")
head(temp)
test %>%
mutate(nn_pred = pr.nn_,
lm_pred = pr.lm) %>%
gather(c(nn_pred, lm_pred),
key = "model",
value = "prediction") %>%
ggplot(aes(medv, prediction,
colour = model)) +
geom_point() +
geom_abline(intercept = 0, slope = 1) +
see::scale_color_flat()
# could combine the data to make a decent ggplot
test %>%
mutate(nn_pred = pr.nn_,
lm_pred = pr.lm) %>%
gather(c(nn_pred, lm_pred),
key = "model",
value = "prediction") %>%
ggplot(aes(medv, prediction,
colour = model)) +
geom_point(alpha = .3) +
geom_abline(intercept = 0, slope = 1) +
see::scale_color_flat()
