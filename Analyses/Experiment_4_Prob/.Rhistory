# Need part 2
load("scratch/new_data/df_part2")
# set one column for swith_point
df_part2$switch_point <- ifelse(df_part2$bias_left == 0.5,
df_part2$Fifty_Fifty,
df_part2$Eighty_Twenty)
# trim df_part2 down to be just what is needed for now...
trimmed_bias <- select(df_part2[df_part2$bias_type == "biased",],
participant,
condition,
block,
trial,
separation,
bias_left,
cross_side,
accuracy,
lcr,
# Only need this for actual accuracy calculation, but isn't strictly necessary
standard_boxes,
switch_point)
trimmed_sym <- select(df_part2[df_part2$bias_type == "symmetric",],
participant,
condition,
block,
trial,
separation,
bias_left,
cross_side,
accuracy,
# Only need this for actual accuracy calculation, but isn't strictly necessary
lcr,
standard_boxes,
switch_point)
#### Sort data ####
# merge the data
trimmed_bias <- merge(trimmed_bias, acc_sep)
trimmed_sym <- merge(trimmed_sym, acc_sep)
# add in min_acc for 50-50 and 80-20
trimmed_bias$min_acc <- 0.82
trimmed_sym$min_acc <- 0.55
# get left and right bias
# Don't think this is needed
trimmed_bias$bias_right <- 1 - trimmed_bias$bias_left
trimmed_sym$bias_right <- 1 - trimmed_sym$bias_left
#### Getting standardised scores ####
#### BIAS ####
#### BIAS: EXPECTED ####
# Expected given startegy used
# Use this to select the side the option that's most likely... I think this should work
# temp$bias_test <- temp$temp * pmax(temp$bias_left, temp$bias_right, na.rm = TRUE)
trimmed_bias$ML_dist <- trimmed_bias$separation
trimmed_bias$LL_dist <- trimmed_bias$separation
trimmed_bias$ML_dist[trimmed_bias$standard_boxes == "most likely"] <- 1
trimmed_bias$ML_dist[trimmed_bias$standard_boxes == "least likely"] <- 2*trimmed_bias$separation[trimmed_bias$standard_boxes == "least likely"]
trimmed_bias$LL_dist[trimmed_bias$standard_boxes == "least likely"] <- 1
trimmed_bias$LL_dist[trimmed_bias$standard_boxes == "most likely"] <- 2*trimmed_bias$separation[trimmed_bias$standard_boxes == "most likely"]
# sort out ML acc first
acc_ML <- acc_sep
colnames(acc_ML) <- c("participant",
"ML_dist",
"ML_acc")
# merge
dat_bias <- merge(trimmed_bias, acc_ML)
# same again for LL
acc_LL <- acc_sep
colnames(acc_LL) <- c("participant",
"LL_dist",
"LL_acc")
# merge
dat_bias <- merge(dat_bias, acc_LL)
# tidy
# rm(ML_acc, LL_acc)
# Make lower limit for accuracy for chance
dat_bias$LL_acc[dat_bias$LL_acc < 0.11] <- 0.1
dat_bias$ML_acc[dat_bias$ML_acc < 0.11] <- 0.1
# Get expected acc
dat_bias$Exp_Acc <- (dat_bias$LL_acc * pmin(dat_bias$bias_left,
dat_bias$bias_right)) +
(dat_bias$ML_acc * pmax(dat_bias$bias_left,
dat_bias$bias_right))
#### BIAS: OPTIMAL ####
# trim dataset to what we need
dat_bias <- select(dat_bias,
participant,
separation,
block,
accuracy,
lcr,
standard_boxes,
switch_point,
Pred_Acc,
min_acc,
bias_left,
Exp_Acc)
# Add in opt_fix
dat_bias$opt_fix <- 0
dat_bias$opt_fix[dat_bias$separation > dat_bias$switch_point] <- 1
# Sort out distances and accuracy
dat_bias$ML_dist <- dat_bias$separation
dat_bias$LL_dist <- dat_bias$separation
dat_bias$ML_dist[dat_bias$opt_fix == 1] <- 1
dat_bias$LL_dist[dat_bias$opt_fix == 1] <- 2*dat_bias$LL_dist[dat_bias$opt_fix == 1]
# merge this with the acc_sep stuff
dat_bias <- merge(dat_bias, acc_ML)
dat_bias <- merge(dat_bias, acc_LL)
# set bottom to 10%
dat_bias$LL_acc[dat_bias$LL_acc < 0.11] <- 0.1
dat_bias$ML_acc[dat_bias$ML_dist == 1] <- 1
# Now get opt_acc
dat_bias$Opt_Acc <- (dat_bias$ML_acc*0.8)+(dat_bias$LL_acc*0.2)
# Keep only the needed data
dat_bias <- select(dat_bias,
participant,
separation,
block,
accuracy,
lcr,
standard_boxes,
switch_point,
Pred_Acc,
min_acc,
bias_left,
Exp_Acc,
Opt_Acc)
# Get temp measures of things
temp <- dat_bias %>%
group_by(participant, separation, bias_left, switch_point) %>%
summarise(Actual = mean(accuracy),
Centre = mean(Pred_Acc),
Expected = mean(Exp_Acc),
Optimal = mean(Opt_Acc))
# need to reshape this for plotting
AccMea_bias <- temp %>%
gather(Pred_type, Acc, Centre:Optimal)
AccMea_bias$condition <- "Bias"
# tidy
rm(temp)
# sort levels
# quick plot to check
plt <- ggplot(AccMea_bias, aes(get_VisDegs(separation/ppcm, Screen_dist),
Acc,
colour = Pred_type))
plt <- plt + geom_point()
plt <- plt + geom_line()
plt <- plt + theme_bw()
plt <- plt + ggtitle("Biased Condition")
plt <- plt + facet_wrap(~as.numeric(participant))
plt <- plt + scale_y_continuous(breaks = seq(0, 1, by = .2))
plt <- plt + theme(legend.position = "bottom")
plt$labels$x <- "Delta (Visual Degrees)"
plt$labels$y <- "Accuracy"
plt$labels$colour <- "Accuracy Type"
# plt$coordinates$limits$y <- c(0,1)
plt
# save
# ggsave("../../Figures/Experiment_4_prob/exp_vs_opt_bias.png",
#        height = 12,
#        width = 18,
#        units = "cm")
# tidy
rm(plt)
#### temp plot to check accuracy across distance for each participant ####
# temp_plt <- ggplot(acc_ML, aes(ML_dist, ML_acc))
# temp_plt <- temp_plt + geom_line()
# temp_plt <- temp_plt + facet_wrap(~participant)
# temp_plt
#### symmetric ####
#### symmetric: EXPECTED ####
# get distances
trimmed_sym$LL_dist <- trimmed_sym$separation
trimmed_sym$ML_dist <- trimmed_sym$separation
trimmed_sym$LL_dist[trimmed_sym$lcr != 0] <- 2*trimmed_sym$separation[trimmed_sym$lcr != 0]
trimmed_sym$ML_dist[trimmed_sym$lcr != 0] <- 1
# create new data
dat_sym <- merge(trimmed_sym, acc_ML)
dat_sym <- merge(dat_sym, acc_LL)
# set bottom to 10%
dat_sym$LL_acc[dat_sym$LL_acc < 0.11] <- 0.1
dat_sym$ML_acc[dat_sym$ML_acc < 0.11] <- 0.1
dat_sym$ML_acc[dat_sym$ML_dist == 1] <- 1
dat_sym$Exp_Acc <- (0.5*dat_sym$ML_acc) + (0.5*dat_sym$LL_acc)
# tidy dataset
dat_sym <- select(dat_sym,
participant,
separation,
condition,
block,
trial,
bias_left,
cross_side,
accuracy,
lcr,
min_acc,
standard_boxes,
switch_point,
Pred_Acc,
Exp_Acc)
#### symmetric: OPTIMAL ####
# Get optimal Fixations
dat_sym$Opt_Fix <- 0
dat_sym$Opt_Fix[dat_sym$separation > dat_sym$switch_point] <- 1
dat_sym$ML_dist <- dat_sym$separation
dat_sym$LL_dist <- dat_sym$separation
dat_sym$ML_dist[dat_sym$Opt_Fix == 1] <- 1
dat_sym$LL_dist[dat_sym$Opt_Fix == 1] <- 2*dat_sym$LL_dist[dat_sym$Opt_Fix == 1]
# merge with acc data
dat_sym <- merge(dat_sym, acc_ML)
dat_sym <- merge(dat_sym, acc_LL)
# set minvalue for chance
dat_sym$LL_acc[dat_sym$LL_acc < 0.11] <- 0.1
dat_sym$ML_acc[dat_sym$ML_acc < 0.11] <- 0.1
dat_sym$ML_acc[dat_sym$ML_dist == 1] <- 1
dat_sym$Opt_Acc <- (0.5*dat_sym$ML_acc) + (0.5*dat_sym$LL_acc)
# tidy dataset
dat_sym <- select(dat_sym,
participant,
separation,
condition,
block,
trial,
bias_left,
cross_side,
accuracy,
lcr,
min_acc,
standard_boxes,
switch_point,
Pred_Acc,
Exp_Acc,
Opt_Acc)
#set plot data
temp <- dat_sym %>%
group_by(participant, separation, bias_left, switch_point) %>%
summarise(Actual = mean(accuracy),
Centre = mean(Pred_Acc),
Expected = mean(Exp_Acc),
Optimal = mean(Opt_Acc))
# need to reshape this for plotting
AccMea_sym <- temp %>%
gather(Pred_type, Acc, Centre:Optimal)
AccMea_sym$condition <- "Symmetric"
# plot this
plt <- AccMea_sym %>%
ggplot(aes(get_VisDegs(separation/ppcm, Screen_dist),
Acc,
colour = Pred_type)) +
geom_point() +
geom_line() + ggtitle("symmetric Condition") +
theme_bw() +
facet_wrap(~as.numeric(participant)) +
see::scale_color_flat() +
scale_y_continuous(breaks = seq(0, 1, by = .2)) +
theme(legend.position = "bottom")
plt$labels$x <- "Delta (Visual Degrees)"
plt$labels$y <- "Accuracy"
plt$labels$colour <- "Accuracy Type"
# plt$coordinates$limits$y <- c(0,1)
plt
# save
# ggsave("../../Figures/Experiment_4_prob/exp_vs_opt_sym.png",
#        height = 12,
#        width = 18,
#        units = "cm")
#
# combine both and save
AccMea <- rbind(AccMea_bias, AccMea_sym)
save(AccMea, file = "scratch/new_data/AccMea")
#### Making plots for the paper ####
# probability matching
#### Library ####
library(tidyverse)
#### functions ####
#### Load data ####
load("scratch/new_data/df_part2")
load("scratch/new_data/AccMea")
#### Processing ####
df_part2 <- df_part2 %>%
mutate(dist_type = ifelse(separation < Switching_point,
"Close", "Far"),
bias_type = ifelse(bias_type == "biased", "Biased", "Symmetric")) %>%
select(participant,
block,
bias_type,
bias_left,
separation,
dist_type,
Switching_point,
lcr,
standard_boxes,
accuracy)
AccMea %>%
spread(Pred_type,
Acc) %>%
mutate(dist_type = ifelse(separation < switch_point, "Close", "Far"),
Diff_Opt_m_Acc = Optimal - Actual,
Diff_Opt_m_Exp = Optimal - Expected,
Diff_Opt_d_Exp = Expected/Optimal) %>%
group_by(participant, condition, dist_type) %>%
summarise(Diff_Opt_m_Acc = mean(Diff_Opt_m_Acc),
Diff_Opt_m_Exp = mean(Diff_Opt_m_Exp),
Diff_Opt_d_Exp = mean(Diff_Opt_d_Exp)) %>%
ggplot(aes(dist_type, Diff_Opt_d_Exp,
fill = condition,
colour = condition)) +
geom_boxplot(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw() +
scale_x_discrete("Distance Type") +
scale_y_continuous("Expected Accuracy / Optimal Accuracy")
View(acc_sep)
View(acc_ML)
View(acc_LL)
rm(list = ls()
)
load("scratch/new_data/acc_sep")
head(acc_sep)
View(acc_sep)
load("scratch/new_data/acc_sep")
load("scratch/new_data/df_part2")
head(df_part2)
# dists for each participant
dist <- df_part2 %>%
select(participant, condition, separation) %>%
group_by(participant, condition) %>%
summarise(separation = unique(separation))
dist <- df_part2 %>%
select(participant, condition, separation, accuracy) %>%
group_by(participant, condition, separation) %>%
summarise(remove = mean(accuracy))
head(dist)
# dists for each participant
dist <- df_part2 %>%
select(participant, condition, separation, accuracy) %>%
group_by(participant, condition) %>%
distinct(separation)
dist <- df_part2 %>%
select(participant, condition, separation, accuracy) %>%
group_by(participant, condition, separation) %>%
summarise(remove = mean(accuracy))
dist <- df_part2 %>%
select(participant, condition, separation) %>%
group_by(participant, condition) %>%
distinc(separation)
# dists for each participant
dist <- df_part2 %>%
select(participant, condition, separation) %>%
group_by(participant, condition) %>%
distinct(separation)
View(dist)
head(df_part2)
dist <- df_part2 %>%
select(participant, bias_type, separation) %>%
group_by(participant, bias_type) %>%
distinct(separation)
View(dist)
head(acc_sep)
head(dist)
c_acc <- merge(dist, acc_sep)
View(c_acc)
View(acc_sep)
s_dist <- c_dist %>%
mutate(ML_dist = min(separation),
LL_dist = separation * 2)
c_dist <- df_part2 %>%
select(participant, bias_type, separation) %>%
group_by(participant, bias_type) %>%
distinct(separation)
# get acc for this strat
c_acc <- merge(dist, acc_sep)
# side strat version
s_dist <- c_dist %>%
mutate(ML_dist = min(separation),
LL_dist = separation * 2)
View(s_dist)
# side strat version
s_dist <- c_dist %>%
ungroup() %>%
mutate(ML_dist = min(separation),
LL_dist = separation * 2)
View(s_dist)
View(c_dist)
s_dist <- c_dist %>%
ungroup() %>%
mutate(ML_dist = 1),
LL_dist = separation * 2)
# side strat version
s_dist <- c_dist %>%
ungroup() %>%
mutate(ML_dist = 1,
LL_dist = separation * 2)
View(s_dist)
s_acc <- acc_sep %>%
mutate(ML_dist = 1,
LL_dist = separation * 2)
View(s_acc)
ml_acc <- acc_sep %>%
mutate(ML_dist = separation)
View(ml_acc)
test <- merge(s_dist, ml_acc)
View(test)
View(test)
View(s_acc)
head(acc_sep)
ml_acc <- acc_sep %>%
mutate(ML_dist = separation) %>%
select(-separation)
ll_acc <- acc_sep %>%
mutate(LL_dist = separation) %>%
select(-separation)
test <- merge(s_dist, ml_acc)
View(test)
ml_acc <- acc_sep %>%
mutate(ML_dist = separation,
ML_acc = accuracy) %>%
select(-separation,
-accuracy)
ll_acc <- acc_sep %>%
mutate(LL_dist = separation,
LL_acc = accuracy) %>%
select(-separation,
-accuracy)
test <- merge(s_dist, ml_acc)
View(test)
test <- merge(s_dist, ml_acc) %>%
merge(ll_acc)
View(test)
head(c_acc)
heac(c_dist)
View(c_acc)
head(c_acc)
head(df_part2)
df_part2 <- df_part2 %>%
mutate(max_chance = ifelse(bias_type == "symmetric", 0.5, 0.8))
head(df_part2)
# dists for each participant
c_dist <- df_part2 %>%
select(participant, bias_type, separation, max_chance) %>%
group_by(participant, bias_type) %>%
distinct(separation)
# get acc for this strat
c_acc <- merge(dist, acc_sep) %>%
mutate(acc_type = "Centre"))
View(c_acc)
# dists for each participant
c_dist <- df_part2 %>%
select(participant, bias_type, separation, max_chance) %>%
group_by(participant, bias_type, max_chance) %>%
distinct(separation)
# get acc for this strat
c_acc <- merge(dist, acc_sep) %>%
mutate(acc_type = "Centre"))
View(c_acc)
View(c_dist)
# dists for each participant
c_dist <- df_part2 %>%
select(participant, bias_type, separation, max_chance) %>%
group_by(participant, bias_type, max_chance) %>%
distinct(separation)
View(c_dist)
# get acc for this strat
c_acc <- merge(dist, acc_sep) %>%
mutate(acc_type = "Centre"))
View(c_acc)
View(acc_sep)
merge(dist, acc_sep)
df_part2 %>%
mutate(max_chance = ifelse(bias_type == "symmetric", 0.5, 0.8))
df_part2 %>%
select(participant, bias_type, separation, max_chance) %>%
group_by(participant, bias_type, max_chance) %>%
distinct(separation)
View(acc_sep)
View(c_dist)
View(c_acc)
merge(dist, acc_sep)
c_acc <- merge(dist, acc_sep) %>%
mutate(acc_type = "Centre",max_chance = ifelse(bias_type == "symmetric", 0.5, 0.8))
View(c_acc)
c_dist <- df_part2 %>%
select(participant, bias_type, separation, max_chance) %>%
group_by(participant, bias_type, max_chance) %>%
distinct(separation)
# get acc for this strat
c_acc <- merge(dist, acc_sep) %>%
mutate(acc_type = "Centre"))
# dists for each participant
c_dist <- df_part2 %>%
select(participant, bias_type, separation, max_chance) %>%
group_by(participant, bias_type, max_chance) %>%
distinct(separation)
# get acc for this strat
c_acc <- merge(dist, acc_sep) %>%
mutate(acc_type = "Centre")
View(c_acc)
c_dist <- df_part2 %>%
select(participant, bias_type, separation, max_chance) %>%
group_by(participant) %>%
distinct(separation)
# dists for each participant
c_dist <- df_part2 %>%
select(participant, bias_type, separation, max_chance) %>%
group_by(participant, bias_type, max_chance) %>%
distinct(separation)
View(c_dist)
distinct(separation)
# get acc for this strat
c_acc <- merge(dist, acc_sep) %>%
mutate(acc_type = "Centre")
c_acc <- merge(dist, acc_sep) %>%
mutate(acc_type = "Centre")
View(c_acc)
