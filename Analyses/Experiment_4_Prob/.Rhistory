#### Making plots ####
# setup data
prop_sides <- df
prop_sides$lcr <- as.factor(prop_sides$lcr)
prop_sides$prop_boxes <- prop_sides$lcr
prop_sides <- prop_sides %>%
group_by(participant, separation, bias, bias_type, prop_boxes) %>%
summarise(n = n()) %>%
complete(prop_boxes, fill = list(n = 0)) %>%
mutate(prop = n / sum(n))
# use switch_points to get switch points for both bias types
switch_bias <- select(switch_points,
participant,
Eighty_Twenty)
# change colnames
colnames(switch_bias) <- c("participant",
"switch_point")
# add bias_type
switch_bias$bias_type <- "biased"
# again for random
switch_random <- select(switch_points,
participant,
Fifty_Fifty)
# change colnames
colnames(switch_random) <- c("participant",
"switch_point")
# add bias_type
switch_random$bias_type <- "random"
# change back to numeric?
prop_sides$prop_boxes <- as.numeric(prop_sides$prop_boxes)-2
# get separate datasets
prop_sides_random <- prop_sides[prop_sides$bias_type == "random",]
prop_sides_bias <- prop_sides[prop_sides$bias_type == "biased",]
# add in switch points
prop_sides_random <- merge(prop_sides_random, switch_random)
prop_sides_bias <- merge(prop_sides_bias, switch_bias)
# rename levels in prop_boxes for each set
prop_sides_bias$prop_boxes[prop_sides_bias$prop_boxes == 0] <- "Centre"
# left bias
prop_sides_bias$prop_boxes[prop_sides_bias$prop_boxes == -1 &
prop_sides_bias$bias == "left bias"] <- "Common side"
prop_sides_bias$prop_boxes[prop_sides_bias$prop_boxes == 1 &
prop_sides_bias$bias == "left bias"] <- "Uncommon side"
# right bias
prop_sides_bias$prop_boxes[prop_sides_bias$prop_boxes == -1 &
prop_sides_bias$bias == "right bias"] <- "Uncommon side"
prop_sides_bias$prop_boxes[prop_sides_bias$prop_boxes == 1 &
prop_sides_bias$bias == "right bias"] <- "Common side"
# for random condition we just want left, right, and centre
prop_sides_random$prop_boxes[prop_sides_random$prop_boxes == 0] <- "Centre"
prop_sides_random$prop_boxes[prop_sides_random$prop_boxes == 1] <- "Right"
prop_sides_random$prop_boxes[prop_sides_random$prop_boxes == -1] <- "Left"
# tidy
rm(switch_bias, switch_random)
# can edit prop_boxes to be appropriately named now as well...
# make plot(s)
# random plt
prop_plt(prop_sides_random, "random", "pixels")
ggsave("scratch/plots/Part_2_prop_random_pixels.pdf", height = 10, width = 10)
prop_plt(prop_sides_random, "random", "Visual Degrees")
ggsave("../../Figures/Experiment_4_Prob/Part_2_prop_random_vdegs.png",
height = 12,
width = 18,
units = "cm")
prop_plt(prop_sides_bias, "biased", "pixels")
ggsave("scratch/plots/Part_2_prop_biased_pixels.pdf")
prop_plt(prop_sides_bias, "biased", "Visual Degrees")
ggsave("../../Figures/Experiment_4_Prob/Part_2_prop_biased_vdegs.png",
height = 12,
width = 18,
units = "cm")
prop_sides$cen_sid <- "Side"
prop_sides$cen_sid[prop_sides$prop_boxes == 0] <- "Centre"
# get summary
cen_side <- prop_sides %>%
group_by(participant, separation, bias_type, cen_sid) %>%
summarise(n = sum(n)) %>%
mutate(prop = n / sum(n))
cen_side <- merge(cen_side, switch_points)
# make the plots like the rest
centre <- cen_side[cen_side$cen_sid == "Centre",]
side <- cen_side[cen_side$cen_sid == "Side",]
dot_plt <- ggplot(side, aes(get_VisDegs(separation/ppcm, Screen_dist),
prop,
colour = bias_type))
dot_plt <- dot_plt + geom_point(aes(shape = bias_type,
colour = bias_type)) +
scale_shape_manual(values=c(3,4))
# make 80_20 switch
dot_plt <- dot_plt + geom_vline(aes(xintercept = get_VisDegs(Eighty_Twenty/ppcm, Screen_dist)),
linetype = "dashed",
colour = "red")
# make 50_50 switch
dot_plt <- dot_plt + geom_vline(aes(xintercept = get_VisDegs(Fifty_Fifty/ppcm, Screen_dist)),
linetype = "dashed",
colour = "blue")
dot_plt <- dot_plt + facet_wrap(~participant)
dot_plt <- dot_plt + theme(legend.position="bottom")
dot_plt$labels$y <- "Proportion of Fixations to the side boxes"
dot_plt$labels$x <- "Delta (Visual Degrees)"
dot_plt$labels$colour <- "Bias Type"
dot_plt$labels$shape <- "Bias Type"
dot_plt
ggsave("scratch/plots/SideVSCentre.pdf", height = 10, width = 10)
df_just_side <- df[df$lcr != 0,]
bias_sides <- df_just_side %>%
group_by(participant, bias_type, lcr) %>%
summarise(num = n()) %>%
mutate(prop = num/sum(num))
bias_sides_2 <- bias_sides[-c(4)] %>%
group_by(participant) %>%
spread(lcr, prop)
bias_sides_2[is.na(bias_sides_2)] <- 0
# these give the exact same results
bias_sides_2$score <- abs(bias_sides_2$`1` - bias_sides_2$`-1`)
bias_sides_2$highest <- pmax(bias_sides_2$`1`, bias_sides_2$`-1`)
bias_sides_2$lowest <- pmin(bias_sides_2$`1`, bias_sides_2$`-1`)
# make it a factor
bias_sides_2$participant <- as.factor(bias_sides_2$participant)
bias_sides_2$bias_type <- as.factor(bias_sides_2$bias_type)
# really simple t test of these results
ttest <- t.test(bias_sides_2$score~bias_sides_2$bias_type, paired = T)
ttest
# fix it for proportions...
bias_sides_3 <- bias_sides[-c(5)] %>%
group_by(participant) %>%
spread(lcr, num)
bias_sides_3[is.na(bias_sides_3)] <- 0
bias_sides_3$highest <- pmax(bias_sides_3$`1`, bias_sides_3$`-1`)
bias_sides_3$lowest <- pmin(bias_sides_3$`1`, bias_sides_3$`-1`)
temp_data <- matrix(c(mean(bias_sides_3$highest[bias_sides_3$bias_type == "biased"]),
mean(bias_sides_3$highest[bias_sides_3$bias_type == "random"]),
mean(bias_sides_3$lowest[bias_sides_3$bias_type == "biased"]),
mean(bias_sides_3$lowest[bias_sides_3$bias_type == "random"])),
ncol = 2)
colnames(temp_data) <- c("highest", "lowest")
rownames(temp_data) <- c("biased", "random")
# all these show that they are significant... Maybe
# ask Alasdair about it?
prop.test(temp_data)
chisq.test(temp_data)
mcnemar.test(temp_data)
# temp <- glm(highest ~ bias_type,
#             data = bias_sides_2,
#             family = binomial())
# this is significant so get some descriptives
descs_bias <- bias_sides_2 %>%
group_by(bias_type) %>%
summarise(meanshigh = mean(highest),
sdshigh = sd(highest),
meanscore = mean(score),
sdscore = sd(score))
desc_minus5 <- bias_sides_2[bias_sides_2$participant != "5",] %>%
group_by(bias_type) %>%
summarise(means = mean(highest))
m1 <- glm(prop ~ separation,
data = side,
family = binomial())
summary(m1)
m2 <- glm(prop ~ separation + as.factor(bias_type),
data = side,
family = binomial())
summary(m2)
m3 <- glm(prop ~ as.factor(bias_type),
data = side,
family = binomial)
summary(m3)
glm_dat <- select(df_just_side,
participant,
bias,
block,
trial,
separation,
cross_side,
bias_type,
lcr,
standard_boxes)
glm_dat$fixated_left <- 0
glm_dat$fixated_left[glm_dat$lcr == -1] <- 1
glm_dat$fixated_common <- 0
glm_dat$fixated_common[glm_dat$standard_boxes == "most likely"] <- 1
glm_dat$bias_box_left <- 0
glm_dat$bias_box_left[glm_dat$bias == "left bias"] <- 1
# make bias_type a factor
glm_dat$bias_type <- as.factor(glm_dat$bias_type)
glm_dat$bias_box_left <- as.factor(glm_dat$bias_box_left)
m4 <- glmer(fixated_common ~ bias_type + (1|participant),
data = glm_dat,
family = binomial())
summary(m4)
library(lme4)
m4 <- glmer(fixated_common ~ bias_type + (1|participant),
data = glm_dat,
family = binomial())
summary(m4)
m5 <- glmer(fixated_common ~ bias_type + bias_box_left + (1|participant),
data = glm_dat,
family = binomial())
summary(m5)
m6 <- glmer(fixated_common ~ bias_type + cross_side + (1|participant),
data = glm_dat,
family = binomial())
summary(m6)
m7 <- glmer(fixated_common ~ (bias_type + cross_side)^2 + (1|participant),
data = glm_dat,
family = binomial())
summary(m7)
rm(list = ls())
library(tidyverse)
# library(psyphy)
#### any functions ####
# To convert pixels to visual degrees
get_VisDegs <- function(separation,distance){
((2*atan2(separation,(2*distance)))*180)/pi
}
#### Constants ####
Screen_dist <- 54.4
ppcm <- 1920/54
#### load data ####
# Accuracy over distance
load("scratch/new_data/acc_sep")
# Change colnames so accuracy isn't repeated
colnames(acc_sep) <- c("participant",
"separation",
"Pred_Acc")
# Need part 2
load("scratch/new_data/df_part2")
# set one column for swith_point
df_part2$switch_point <- df_part2$Eighty_Twenty
df_part2$switch_point[df_part2$bias_left == 0.5] <- df_part2$Fifty_Fifty[df_part2$bias_left == 0.5]
# trim df_part2 down to be just what is needed for now...
trimmed_bias <- select(df_part2[df_part2$bias_type == "biased",],
participant,
condition,
block,
trial,
separation,
bias_left,
cross_side,
accuracy,
lcr,
# Only need this for actual accuracy calculation, but isn't strictly necessary
standard_boxes,
switch_point)
trimmed_rand <- select(df_part2[df_part2$bias_type == "random",],
participant,
condition,
block,
trial,
separation,
bias_left,
cross_side,
accuracy,
# Only need this for actual accuracy calculation, but isn't strictly necessary
lcr,
standard_boxes,
switch_point)
#### Sort data ####
# merge the data
trimmed_bias <- merge(trimmed_bias, acc_sep)
trimmed_rand <- merge(trimmed_rand, acc_sep)
# add in min_acc for 50-50 and 80-20
trimmed_bias$min_acc <- 0.82
trimmed_rand$min_acc <- 0.55
# get left and right bias
# Don't think this is needed
trimmed_bias$bias_right <- 1 - trimmed_bias$bias_left
trimmed_rand$bias_right <- 1 - trimmed_rand$bias_left
#### Getting standardised scores ####
#### BIAS ####
#### BIAS: EXPECTED ####
# Expected given startegy used
# Use this to select the side the option that's most likely... I think this should work
# temp$bias_test <- temp$temp * pmax(temp$bias_left, temp$bias_right, na.rm = TRUE)
trimmed_bias$ML_dist <- trimmed_bias$separation
trimmed_bias$LL_dist <- trimmed_bias$separation
trimmed_bias$ML_dist[trimmed_bias$standard_boxes == "most likely"] <- 1
trimmed_bias$ML_dist[trimmed_bias$standard_boxes == "least likely"] <- 2*trimmed_bias$separation[trimmed_bias$standard_boxes == "least likely"]
trimmed_bias$LL_dist[trimmed_bias$standard_boxes == "least likely"] <- 1
trimmed_bias$LL_dist[trimmed_bias$standard_boxes == "most likely"] <- 2*trimmed_bias$separation[trimmed_bias$standard_boxes == "most likely"]
# sort out ML acc first
acc_ML <- acc_sep
colnames(acc_ML) <- c("participant",
"ML_dist",
"ML_acc")
# merge
dat_bias <- merge(trimmed_bias, acc_ML)
# same again for LL
acc_LL <- acc_sep
colnames(acc_LL) <- c("participant",
"LL_dist",
"LL_acc")
# merge
dat_bias <- merge(dat_bias, acc_LL)
# tidy
# rm(ML_acc, LL_acc)
# Make lower limit for accuracy for chance
dat_bias$LL_acc[dat_bias$LL_acc < 0.11] <- 0.1
dat_bias$ML_acc[dat_bias$ML_acc < 0.11] <- 0.1
# Get expected acc
dat_bias$Exp_Acc <- (dat_bias$LL_acc * pmin(dat_bias$bias_left,
dat_bias$bias_right)) +
(dat_bias$ML_acc * pmax(dat_bias$bias_left,
dat_bias$bias_right))
#### BIAS: OPTIMAL ####
# trim dataset to what we need
dat_bias <- select(dat_bias,
participant,
separation,
block,
accuracy,
lcr,
standard_boxes,
switch_point,
Pred_Acc,
min_acc,
bias_left,
Exp_Acc)
# Add in opt_fix
dat_bias$opt_fix <- 1
#dat_bias$opt_fix[dat_bias$separation > dat_bias$switch_point] <- 1
# Sort out distances and accuracy
dat_bias$ML_dist <- dat_bias$separation
dat_bias$LL_dist <- dat_bias$separation
dat_bias$ML_dist[dat_bias$opt_fix == 1] <- 1
dat_bias$LL_dist[dat_bias$opt_fix == 1] <- 2*dat_bias$LL_dist[dat_bias$opt_fix == 1]
# merge this with the acc_sep stuff
dat_bias <- merge(dat_bias, acc_ML)
dat_bias <- merge(dat_bias, acc_LL)
# set bottom to 10%
dat_bias$LL_acc[dat_bias$LL_acc < 0.11] <- 0.1
dat_bias$ML_acc[dat_bias$ML_dist == 1] <- 1
# Now get opt_acc
dat_bias$Opt_Acc <- (dat_bias$ML_acc*0.8)+(dat_bias$LL_acc*0.2)
# Keep only the needed data
dat_bias <- select(dat_bias,
participant,
separation,
block,
accuracy,
lcr,
standard_boxes,
switch_point,
Pred_Acc,
min_acc,
bias_left,
Exp_Acc,
Opt_Acc)
# Get temp measures of things
temp <- dat_bias %>%
group_by(participant, separation, bias_left) %>%
summarise(Actual = mean(accuracy),
Centre = mean(Pred_Acc),
Expected = mean(Exp_Acc),
Optimal = mean(Opt_Acc))
# need to reshape this for plotting
AccMea_bias <- temp %>%
gather(Pred_type, Acc, Centre:Optimal)
AccMea_bias$condition <- "Bias"
# tidy
rm(temp)
# sort levels
# quick plot to check
plt <- ggplot(AccMea_bias, aes(get_VisDegs(separation/ppcm, Screen_dist),
Acc,
colour = Pred_type))
plt <- plt + geom_point()
plt <- plt + geom_line()
plt <- plt + theme_bw()
plt <- plt + ggtitle("Biased Condition")
plt <- plt + facet_wrap(~as.numeric(participant))
plt <- plt + scale_y_continuous(breaks = seq(0, 1, by = .2))
plt <- plt + theme(legend.position = "bottom")
plt$labels$x <- "Delta (Visual Degrees)"
plt$labels$y <- "Accuracy"
plt$labels$colour <- "Accuracy Type"
# plt$coordinates$limits$y <- c(0,1)
plt
ggsave("../../Figures/Experiment_4_prob/exp_vs_opt_bias.png",
height = 12,
width = 18,
units = "cm")
rm(plt)
trimmed_rand$LL_dist <- trimmed_rand$separation
trimmed_rand$ML_dist <- trimmed_rand$separation
trimmed_rand$LL_dist[trimmed_rand$lcr != 0] <- 2*trimmed_rand$separation[trimmed_rand$lcr != 0]
trimmed_rand$ML_dist[trimmed_rand$lcr != 0] <- 1
# create new data
dat_rand <- merge(trimmed_rand, acc_ML)
dat_rand <- merge(dat_rand, acc_LL)
# set bottom to 10%
dat_rand$LL_acc[dat_rand$LL_acc < 0.11] <- 0.1
dat_rand$ML_acc[dat_rand$ML_acc < 0.11] <- 0.1
dat_rand$ML_acc[dat_rand$ML_dist == 1] <- 1
dat_rand$Exp_Acc <- (0.5*dat_rand$ML_acc) + (0.5*dat_rand$LL_acc)
# tidy dataset
dat_rand <- select(dat_rand,
participant,
separation,
condition,
block,
trial,
bias_left,
cross_side,
accuracy,
lcr,
min_acc,
standard_boxes,
switch_point,
Pred_Acc,
Exp_Acc)
#### RANDOM: OPTIMAL ####
# Get optimal Fixations
dat_rand$Opt_Fix <- 0
dat_rand$Opt_Fix[dat_rand$separation > dat_rand$switch_point] <- 1
dat_rand$ML_dist <- dat_rand$separation
dat_rand$LL_dist <- dat_rand$separation
dat_rand$ML_dist[dat_rand$Opt_Fix == 1] <- 1
dat_rand$LL_dist[dat_rand$Opt_Fix == 1] <- 2*dat_rand$LL_dist[dat_rand$Opt_Fix == 1]
# merge with acc data
dat_rand <- merge(dat_rand, acc_ML)
dat_rand <- merge(dat_rand, acc_LL)
# set minvalue for chance
dat_rand$LL_acc[dat_rand$LL_acc < 0.11] <- 0.1
dat_rand$ML_acc[dat_rand$ML_acc < 0.11] <- 0.1
dat_rand$ML_acc[dat_rand$ML_dist == 1] <- 1
dat_rand$Opt_Acc <- (0.5*dat_rand$ML_acc) + (0.5*dat_rand$LL_acc)
# tidy dataset
dat_rand <- select(dat_rand,
participant,
separation,
condition,
block,
trial,
bias_left,
cross_side,
accuracy,
lcr,
min_acc,
standard_boxes,
switch_point,
Pred_Acc,
Exp_Acc,
Opt_Acc)
#set plot data
temp <- dat_rand %>%
group_by(participant, separation, bias_left) %>%
summarise(Actual = mean(accuracy),
Centre = mean(Pred_Acc),
Expected = mean(Exp_Acc),
Optimal = mean(Opt_Acc))
# need to reshape this for plotting
AccMea_rand <- temp %>%
gather(Pred_type, Acc, Centre:Optimal)
AccMea_rand$condition <- "Random"
# plot this
plt <- ggplot(AccMea_rand, aes(get_VisDegs(separation/ppcm, Screen_dist),
Acc,
colour = Pred_type))
plt <- plt + geom_point()
plt <- plt + geom_line()
plt <- plt + ggtitle("Random Condition")
plt <- plt + theme_bw()
plt <- plt + facet_wrap(~as.numeric(participant))
plt <- plt + scale_y_continuous(breaks = seq(0, 1, by = .2))
plt <- plt + theme(legend.position = "bottom")
plt$labels$x <- "Delta (Visual Degrees)"
plt$labels$y <- "Accuracy"
plt$labels$colour <- "Accuracy Type"
# plt$coordinates$limits$y <- c(0,1)
plt
# save
ggsave("../../Figures/Experiment_4_prob/exp_vs_opt_rand.png",
height = 12,
width = 18,
units = "cm")
All_Acc <- rbind(AccMea_bias, AccMea_rand)
plt_dat_Rand <- All_Acc[All_Acc$condition == "Random" & All_Acc$Pred_type == "Optimal",]
plt_dat_Bias <- All_Acc[All_Acc$condition == "Bias" & All_Acc$Pred_type == "Optimal",]
plt_dat_Centre <- All_Acc[All_Acc$condition == "Bias" & All_Acc$Pred_type == "Centre",]
# make plot
plt <- ggplot(All_Acc, aes(get_VisDegs(separation/ppcm, Screen_dist),
Acc))#,
#fill = Pred_type))
plt <- plt + theme_bw()
plt <- plt + geom_area(data = plt_dat_Bias, aes(get_VisDegs(separation/ppcm, Screen_dist),
Acc),
fill = "blue",
alpha = 0.2)
plt <- plt + geom_area(data = plt_dat_Rand, aes(get_VisDegs(separation/ppcm, Screen_dist),
Acc),
fill = "blue",
alpha = 0.2)
plt <- plt + geom_area(data = plt_dat_Centre, aes(get_VisDegs(separation/ppcm, Screen_dist),
Acc),
fill = "red",
alpha = 0.4)
plt <- plt + geom_line(data = All_Acc[All_Acc$Pred_type == "Expected",],
aes(linetype = condition),
size = 1)
plt <- plt + theme(legend.position = "bottom")
# plt <- plt + geom_point()
# plt <- plt + geom_line(aes(linetype = condition))
plt <- plt + facet_wrap(~as.numeric(participant))
plt$labels$x <- "Delta (Visual Degrees"
plt$labels$y <- "Accuracy"
plt$labels$linetype <- "Expected Accuracy for:"
plt
ggsave("../../Figures/Experiment_4_prob/Estimated_Accuracy_both.png",
height = 12,
width = 18,
units = "cm")
