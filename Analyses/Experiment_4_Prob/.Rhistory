colour = slab_measures),
alpha = .3) +
scale_y_continuous(labels = c("Big", "Centre", "Small"),
breaks = c(-1, 0, 1)) +
theme_bw() +
see::scale_color_flat() +
see::scale_fill_flat() +
theme(legend.position = "none",
axis.title.y = element_blank(),
axis.title.x = element_blank())
# see::theme_abyss() +
# see::scale_color_pizza() +
# see::scale_fill_pizza()
plt_box
head(plt_box[["data"]])
plt_dst_overall
box_sep <- plt_box[["data"]] %>%
select(norm_dist, slab_measures)
box_ober <- plt_dst_overall[["data"]] %>%
select(norm_dist, slab_measures) %>%
mutate(slab_measures = "Overall")
box_over <- plt_dst_overall[["data"]] %>%
select(norm_dist, slab_measures) %>%
mutate(slab_measures = "Overall") %>%
merge(box_sep)
box_over <- plt_dst_overall[["data"]] %>%
select(norm_dist, slab_measures) %>%
mutate(slab_measures = "Overall") %>%
rbind(box_sep)
box_sep <- plt_box[["data"]] %>%
select(norm_dist, slab_measures)
box_over <- plt_dst_overall[["data"]] %>%
select(norm_dist, slab_measures) %>%
mutate(slab_measures = "Overall") %>%
rbind(box_sep)
plt_dst_overall[["data"]] %>%
select(norm_dist, slab_measures) %>%
mutate(slab_measures = "Overall") %>%
rbind(box_sep) %>%
ggplot(aes(slab_measures, norm_dist)) +
geom_boxplot(fill = slab_measures,
colour = slab_measures) +
theme_bw() +
see::scale_color_flat() +
see::scale_fill_flat() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank())
head(box_over)
plt_dst_overall[["data"]] %>%
select(norm_dist, slab_measures) %>%
mutate(slab_measures = "Overall") %>%
rbind(box_sep) %>%
ggplot(aes(slab_measures, norm_dist)) +
geom_boxplot(aes(fill = slab_measures,
colour = slab_measures),
alpha = .3) +
theme_bw() +
see::scale_color_flat() +
see::scale_fill_flat() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank())
ggsave("../../Figures/Experiment_3_Hoop_size/box_position_overall.png",
width = 5.6,
height = 3.5)
plt_dst_overall[["data"]] %>%
select(norm_dist, slab_measures) %>%
mutate(slab_measures = "Overall") %>%
rbind(box_sep) %>%
ggplot(aes(slab_measures, norm_dist)) +
geom_boxplot(aes(fill = slab_measures,
colour = slab_measures),
alpha = .3) +
theme_bw() +
see::scale_color_flat() +
see::scale_fill_flat() +
scale_y_continuous(breaks = c(-1, 0, 1),
labels = c("Big", "Centre", "Small")) +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank())
ggsave("../../Figures/Experiment_3_Hoop_size/box_position_overall.png",
width = 5.6,
height = 3.5)
plt_dst_overall[["data"]] %>%
select(norm_dist, slab_measures) %>%
mutate(slab_measures = "Overall") %>%
rbind(box_sep) %>%
ggplot(aes(slab_measures, norm_dist)) +
geom_boxplot(aes(fill = slab_measures,
colour = slab_measures),
alpha = .1) +
theme_bw() +
see::scale_color_flat() +
see::scale_fill_flat() +
scale_y_continuous(breaks = c(-1, 0, 1),
labels = c("Big", "Centre", "Small")) +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank())
rm(list = ls())
setwd("F:/Uni/Github/Breaking_symmetry/Analyses/Experiment_4_Prob")
#### Analysis for Probability study ####
# These are the analyses that will be included in the paper
#### Library ####
library(tidyverse)
library(lme4)
library(brms)
#### functions ####
# should I write a function for plotting predictions?
draw_post <- function(model) {
draws_df <- model %>%
spread_draws(b_Intercept,
b_bias_typeSymmetric,
b_dist_typeFar,
`b_bias_typeSymmetric:dist_typeFar`) %>%
mutate(Biastype_Bias.Disttype_Close = b_Intercept,
Biastype_Symmetric.Disttype_Close = b_Intercept + b_bias_typeSymmetric,
Biastype_Bias.Disttype_Far = b_Intercept + b_dist_typeFar,
Biastype_Symmetric.Disttype_Far = b_Intercept + b_bias_typeSymmetric +
`b_bias_typeSymmetric:dist_typeFar`) %>%
select(.iteration,
Biastype_Bias.Disttype_Close,
Biastype_Symmetric.Disttype_Close,
Biastype_Bias.Disttype_Far,
Biastype_Symmetric.Disttype_Far) %>%
gather(c(Biastype_Bias.Disttype_Close:Biastype_Symmetric.Disttype_Far),
key = "parameter",
value = "estimate") %>%
separate(c(parameter),
into = c("temp1", "temp2"),
sep = "\\.") %>%
separate(temp1,
into = c("remove", "Bias_type")) %>%
select(-remove) %>%
separate(temp2,
into = c("remove", "Dist_type")) %>%
select(-remove)
# estimates
plt_estimates <- draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
ggplot(aes(prop, colour = Bias_type,
fill = Bias_type)) +
geom_density(alpha = .3) +
# geom_histogram(position = "dodge") +
facet_wrap(~Dist_type)
# difference
diff <- draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
select(-estimate) %>%
spread(Bias_type,
prop) %>%
mutate(diff = Bias - Symmetric)
plt_diff <- diff %>%
ggplot(aes(diff, colour = Dist_type,
fill = Dist_type)) +
geom_density(alpha = .3)
prop_diff <- diff %>% mutate(above0 = ifelse(diff > 0, 1, 0)) %>%
group_by(Dist_type) %>%
summarise(above0 = mean(above0))
# get hdi
draws_hdi <- draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
group_by(Bias_type, Dist_type) %>%
summarise(lower = hdi(prop)[,1],
mean = mean(prop),
upper = hdi(prop)[,2],
med = median(prop))
output <- list(draws_df,
plt_estimates,
diff,
plt_diff,
draws_hdi)
names(output) <- c("draws_df",
"plt_estimates",
"difference_df",
"plt_difference",
"draws_HDI")
return(output)
}
#### load data ####
load("scratch/new_data/df_part2_fixed")
# processing
df_model <- df_part2_fixed %>%
filter(separation != 640) %>% # remove furthest point for now
select(participant, dist_type, bias_type, separation, st_box, accuracy) %>%
mutate(Ml_fix = ifelse(st_box == "most likely", 1, 0),
S_fix = ifelse(st_box != "centre", 1, 0))
bm_fix_like_dt <- brm(Ml_fix ~ (bias_type + dist_type)^2 + (dist_type * bias_type|participant),
data = df_model,
family = "bernoulli",
prior = c(set_prior("student_t(3, -.7, 4)", class = "b"),
set_prior("student_t(3, 0, 4)", class = "b", coef = "bias_typeSymmetric"),
set_prior("student_t(3, 0, 4)", class = "b", coef = "bias_typeSymmetric:dist_typeFar"),
set_prior("student_t(3, 0, 4)", class = "b", coef = "dist_typeFar")),
chains = 1,
iter = 1000,
warmup = 500)
pairs()
pairs(bm_fix_like_dt)
summary(bm_fix_like_dt)
fix_like_post <- draw_post(bm_fix_like_dt)
fix_like_post[2]
fix_like_post[4]
as.data.frame(fix_like_post[3]) %>%
group_by(Dist_type) %>%
summarise(lower = hdi(diff)[,1],
mu = mean(diff),
upper = hdi(diff)[,2])
fix_like_post[5]
head(fix_like_post[3])
#### Analysis for Probability study ####
# These are the analyses that will be included in the paper
#### Library ####
library(tidyverse)
library(lme4)
library(brms)
#### functions ####
# should I write a function for plotting predictions?
draw_post <- function(model) {
draws_df <- model %>%
spread_draws(b_Intercept,
b_bias_typeSymmetric,
b_dist_typeFar,
`b_bias_typeSymmetric:dist_typeFar`) %>%
mutate(Biastype_Bias.Disttype_Close = b_Intercept,
Biastype_Symmetric.Disttype_Close = b_Intercept + b_bias_typeSymmetric,
Biastype_Bias.Disttype_Far = b_Intercept + b_dist_typeFar,
Biastype_Symmetric.Disttype_Far = b_Intercept + b_bias_typeSymmetric +
`b_bias_typeSymmetric:dist_typeFar`) %>%
select(.iteration,
Biastype_Bias.Disttype_Close,
Biastype_Symmetric.Disttype_Close,
Biastype_Bias.Disttype_Far,
Biastype_Symmetric.Disttype_Far) %>%
gather(c(Biastype_Bias.Disttype_Close:Biastype_Symmetric.Disttype_Far),
key = "parameter",
value = "estimate") %>%
separate(c(parameter),
into = c("temp1", "temp2"),
sep = "\\.") %>%
separate(temp1,
into = c("remove", "Bias_type")) %>%
select(-remove) %>%
separate(temp2,
into = c("remove", "Dist_type")) %>%
select(-remove)
# estimates
plt_estimates <- draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
ggplot(aes(prop, colour = Bias_type,
fill = Bias_type)) +
geom_density(alpha = .3) +
# geom_histogram(position = "dodge") +
facet_wrap(~Dist_type)
# difference
diff <- draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
select(-estimate) %>%
spread(Bias_type,
prop) %>%
mutate(diff = Bias - Symmetric)
plt_diff <- diff %>%
ggplot(aes(diff, colour = Dist_type,
fill = Dist_type)) +
geom_density(alpha = .3)
prop_diff <- diff %>% mutate(above0 = ifelse(diff > 0, 1, 0)) %>%
group_by(Dist_type) %>%
summarise(above0 = mean(above0))
# get hdi
draws_hdi <- draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
group_by(Bias_type, Dist_type) %>%
summarise(lower = hdi(prop)[,1],
mean = mean(prop),
upper = hdi(prop)[,2],
med = median(prop))
# get hdi difference
hdi_diff_overall <- diff %>%
summarise(lower = hdi(diff)[,1],
mu = mean(diff),
upper = hdi(diff)[,2])
hdi_diff_dist <- diff %>%
group_by(Dist_type) %>%
summarise(lower = hdi(diff)[,1],
mu = mean(diff),
upper = hdi(diff)[,2])
Hdi_list <- list(hdi_diff_dist,
hdi_diff_overall)
output <- list(draws_df,
plt_estimates,
diff,
plt_diff,
Hdi_list,
draws_hdi)
names(output) <- c("draws_df",
"plt_estimates",
"difference_df",
"HDI_Diff"
"plt_difference",
"draws_HDI")
return(output)
}
#### Analysis for Probability study ####
# These are the analyses that will be included in the paper
#### Library ####
library(tidyverse)
library(lme4)
library(brms)
#### functions ####
# should I write a function for plotting predictions?
draw_post <- function(model) {
draws_df <- model %>%
spread_draws(b_Intercept,
b_bias_typeSymmetric,
b_dist_typeFar,
`b_bias_typeSymmetric:dist_typeFar`) %>%
mutate(Biastype_Bias.Disttype_Close = b_Intercept,
Biastype_Symmetric.Disttype_Close = b_Intercept + b_bias_typeSymmetric,
Biastype_Bias.Disttype_Far = b_Intercept + b_dist_typeFar,
Biastype_Symmetric.Disttype_Far = b_Intercept + b_bias_typeSymmetric +
`b_bias_typeSymmetric:dist_typeFar`) %>%
select(.iteration,
Biastype_Bias.Disttype_Close,
Biastype_Symmetric.Disttype_Close,
Biastype_Bias.Disttype_Far,
Biastype_Symmetric.Disttype_Far) %>%
gather(c(Biastype_Bias.Disttype_Close:Biastype_Symmetric.Disttype_Far),
key = "parameter",
value = "estimate") %>%
separate(c(parameter),
into = c("temp1", "temp2"),
sep = "\\.") %>%
separate(temp1,
into = c("remove", "Bias_type")) %>%
select(-remove) %>%
separate(temp2,
into = c("remove", "Dist_type")) %>%
select(-remove)
# estimates
plt_estimates <- draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
ggplot(aes(prop, colour = Bias_type,
fill = Bias_type)) +
geom_density(alpha = .3) +
# geom_histogram(position = "dodge") +
facet_wrap(~Dist_type)
# difference
diff <- draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
select(-estimate) %>%
spread(Bias_type,
prop) %>%
mutate(diff = Bias - Symmetric)
plt_diff <- diff %>%
ggplot(aes(diff, colour = Dist_type,
fill = Dist_type)) +
geom_density(alpha = .3)
prop_diff <- diff %>% mutate(above0 = ifelse(diff > 0, 1, 0)) %>%
group_by(Dist_type) %>%
summarise(above0 = mean(above0))
# get hdi
draws_hdi <- draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
group_by(Bias_type, Dist_type) %>%
summarise(lower = hdi(prop)[,1],
mean = mean(prop),
upper = hdi(prop)[,2],
med = median(prop))
# get hdi difference
hdi_diff_overall <- diff %>%
summarise(lower = hdi(diff)[,1],
mu = mean(diff),
upper = hdi(diff)[,2])
hdi_diff_dist <- diff %>%
group_by(Dist_type) %>%
summarise(lower = hdi(diff)[,1],
mu = mean(diff),
upper = hdi(diff)[,2])
Hdi_list <- list(hdi_diff_dist,
hdi_diff_overall)
output <- list(draws_df,
plt_estimates,
diff,
plt_diff,
Hdi_list,
draws_hdi)
names(output) <- c("draws_df",
"plt_estimates",
"difference_df",
"HDI_Diff",
"plt_difference",
"draws_HDI")
return(output)
}
fix_S_post <- draw_post(bm_fix_S_dt)
# get post
fix_like_post <- draw_post(bm_fix_like_dt)
# plots
fix_like_post[2]
fix_like_post[4]
fix_like_post$HDI_Diff
#### Analysis for Probability study ####
# These are the analyses that will be included in the paper
#### Library ####
library(tidyverse)
library(lme4)
library(brms)
#### functions ####
# should I write a function for plotting predictions?
draw_post <- function(model) {
draws_df <- model %>%
spread_draws(b_Intercept,
b_bias_typeSymmetric,
b_dist_typeFar,
`b_bias_typeSymmetric:dist_typeFar`) %>%
mutate(Biastype_Bias.Disttype_Close = b_Intercept,
Biastype_Symmetric.Disttype_Close = b_Intercept + b_bias_typeSymmetric,
Biastype_Bias.Disttype_Far = b_Intercept + b_dist_typeFar,
Biastype_Symmetric.Disttype_Far = b_Intercept + b_bias_typeSymmetric +
`b_bias_typeSymmetric:dist_typeFar`) %>%
select(.iteration,
Biastype_Bias.Disttype_Close,
Biastype_Symmetric.Disttype_Close,
Biastype_Bias.Disttype_Far,
Biastype_Symmetric.Disttype_Far) %>%
gather(c(Biastype_Bias.Disttype_Close:Biastype_Symmetric.Disttype_Far),
key = "parameter",
value = "estimate") %>%
separate(c(parameter),
into = c("temp1", "temp2"),
sep = "\\.") %>%
separate(temp1,
into = c("remove", "Bias_type")) %>%
select(-remove) %>%
separate(temp2,
into = c("remove", "Dist_type")) %>%
select(-remove)
# estimates
plt_estimates <- draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
ggplot(aes(prop, colour = Bias_type,
fill = Bias_type)) +
geom_density(alpha = .3) +
# geom_histogram(position = "dodge") +
facet_wrap(~Dist_type)
# difference
diff <- draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
select(-estimate) %>%
spread(Bias_type,
prop) %>%
mutate(diff = Bias - Symmetric)
plt_diff <- diff %>%
ggplot(aes(diff, colour = Dist_type,
fill = Dist_type)) +
geom_density(alpha = .3)
prop_diff <- diff %>% mutate(above0 = ifelse(diff > 0, 1, 0)) %>%
group_by(Dist_type) %>%
summarise(above0 = mean(above0))
# get hdi
draws_hdi <- draws_df %>%
mutate(prop = boot::inv.logit(estimate)) %>%
group_by(Bias_type, Dist_type) %>%
summarise(lower = hdi(prop)[,1],
mean = mean(prop),
upper = hdi(prop)[,2],
med = median(prop))
# get hdi difference
hdi_diff_overall <- diff %>%
summarise(lower = hdi(diff)[,1],
mu = mean(diff),
upper = hdi(diff)[,2])
hdi_diff_dist <- diff %>%
group_by(Dist_type) %>%
summarise(lower = hdi(diff)[,1],
mu = mean(diff),
upper = hdi(diff)[,2])
Hdi_list <- list(hdi_diff_dist,
hdi_diff_overall)
output <- list(draws_df,
plt_estimates,
diff,
plt_diff,
Hdi_list,
draws_hdi)
names(output) <- c("draws_df",
"plt_estimates",
"difference_df",
"plt_difference",
"HDI_Diff",
"draws_HDI")
return(output)
}
fix_like_post <- draw_post(bm_fix_like_dt)
# plots
fix_like_post[4]
fix_like_post$HDI_Diff
head(fix_like_post$difference_df)
t.test(fix_like_post$difference_df$diff, mu = 0)
temp <- df_model %>%
group_by(participant, bias_type) %>%
summarise(mu = mean(Ml_fix))
head(temp)
t.test(temp$mu ~ temp$bias_type)
t.test(temp$mu ~ temp$bias_type, paired = T)
temp <- df_model %>%
group_by(participant, bias_type) %>%
summarise(mu = mean(Ml_fix))
head(temp)
rm(list = ls())
