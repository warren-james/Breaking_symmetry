# setup data_frame
df_screen_info <- data.frame(participant = character(),
Hz = numeric(),
x_res = numeric(),
y_res = numeric())
df_deltas <- data.frame(participant = character(),
delta = numeric())
df_beta <- data.frame(participant = character(),
beta1 = numeric(),
beta2 = numeric())
df_avatar_info <- data.frame(participant = character(),
travel_time = numeric(),
max_speed = numeric(),
reach = numeric())
# loop throuh and read in data
for(f in dir(results_files)){
# read in file
temp_df <- readMat(paste(results_files, f, sep = ""))
# get participant name
Participant <- strsplit(f, '[_.]')[[1]]
Participant <- Participant[1]
# resolutions
x_res <- as.numeric(temp_df$params[1])*2
y_res <- as.numeric(temp_df$params[2])*2
# frame rate
Hz <- round(1/as.numeric(temp_df$params[4]))
# betas
betas <- temp_df$box[[2]]
beta1 <- betas[1]
beta2 <- betas[2]
# Delta
Delta <- unlist(temp_df$params[3])
# reach
reach <- as.numeric(temp_df$box[4])
# travel time
travel_time <- as.numeric(temp_df$box[3])
# max_speed
max_speed <- as.numeric(temp_df$box[1])
# fill data frame
# screen
df_screen_info <- rbind(df_screen_info, data.frame(participant = Participant,
Hz = Hz,
x_res = x_res,
y_res = y_res))
# deltas
df_deltas <- rbind(df_deltas, data.frame(participant = Participant,
delta = Delta))
# beta
df_beta <- rbind(df_beta, data.frame(participant = Participant,
beta1 = beta1,
beta2 = beta2))
# avatar
df_avatar_info <- rbind(df_avatar_info, data.frame(participant = Participant,
travel_time = travel_time,
max_speed = max_speed,
reach = reach))
}
# tidy
rm(betas,
temp_df,
beta1,
beta2,
Delta,
f,
max_speed,
Participant,
reach,
results_files,
x_res,
y_res,
Hz,
travel_time)
# save these
save(df_avatar_info, file = "scratch/df_avatar_info")
save(df_beta, file = "scratch/df_beta")
save(df_deltas, file = "scratch/df_deltas")
save(df_screen_info, file = "scratch/df_screen_info")
#### Read in Decision data ####
results_files <- "data/Pilot/enddata/"
files <- dir(results_files)
df_decisions <- tibble()
df_decisions <- read_data(files, results_files, df_decisions)
# save
save(df_decisions, file = "scratch/df_decisions")
#### Read in confidence data ####
results_files <- "data/Pilot/confidence/"
files <- dir(results_files)
df_confidence <- tibble()
df_confidence <- read_data(files, results_files, df_confidence)
View(df_confidence)
rm(list = ls())
setwd("F:/Uni/Github/In_the_drivers_seat")
#### In the Driver's seat ####
# Script to read in the data and save in a sensible format
#### Library ####
library(tidyverse)
library(R.matlab)
#### Functions ####
# read in data
read_data <- function(file, directory, df){
for(f in files){
d <- read_csv(paste(directory, f, sep = ""), col_types = cols()) %>%
mutate(Participant =  strsplit(f, '[_.]')[[1]][1]) %>%
select(Participant, everything())
df <- rbind(df, d)
}
return(df)
}
#### Constants ####
#### Read in Screen Info ####
# set path
results_files <- "data/Pilot/screen_inf/"
# setup data_frame
df_screen_info <- data.frame(participant = character(),
Hz = numeric(),
x_res = numeric(),
y_res = numeric())
df_deltas <- data.frame(participant = character(),
delta = numeric())
df_beta <- data.frame(participant = character(),
beta1 = numeric(),
beta2 = numeric())
df_avatar_info <- data.frame(participant = character(),
travel_time = numeric(),
max_speed = numeric(),
reach = numeric())
# loop throuh and read in data
for(f in dir(results_files)){
# read in file
temp_df <- readMat(paste(results_files, f, sep = ""))
# get participant name
Participant <- strsplit(f, '[_.]')[[1]]
Participant <- Participant[1]
# resolutions
x_res <- as.numeric(temp_df$params[1])*2
y_res <- as.numeric(temp_df$params[2])*2
# frame rate
Hz <- round(1/as.numeric(temp_df$params[4]))
# betas
betas <- temp_df$box[[2]]
beta1 <- betas[1]
beta2 <- betas[2]
# Delta
Delta <- unlist(temp_df$params[3])
# reach
reach <- as.numeric(temp_df$box[4])
# travel time
travel_time <- as.numeric(temp_df$box[3])
# max_speed
max_speed <- as.numeric(temp_df$box[1])
# fill data frame
# screen
df_screen_info <- rbind(df_screen_info, data.frame(participant = Participant,
Hz = Hz,
x_res = x_res,
y_res = y_res))
# deltas
df_deltas <- rbind(df_deltas, data.frame(participant = Participant,
delta = Delta))
# beta
df_beta <- rbind(df_beta, data.frame(participant = Participant,
beta1 = beta1,
beta2 = beta2))
# avatar
df_avatar_info <- rbind(df_avatar_info, data.frame(participant = Participant,
travel_time = travel_time,
max_speed = max_speed,
reach = reach))
}
# tidy
rm(betas,
temp_df,
beta1,
beta2,
Delta,
f,
max_speed,
Participant,
reach,
results_files,
x_res,
y_res,
Hz,
travel_time)
# save these
save(df_avatar_info, file = "scratch/df_avatar_info")
save(df_beta, file = "scratch/df_beta")
save(df_deltas, file = "scratch/df_deltas")
save(df_screen_info, file = "scratch/df_screen_info")
#### Read in Decision data ####
results_files <- "data/Pilot/enddata/"
files <- dir(results_files)
df_decisions <- tibble()
df_decisions <- read_data(files, results_files, df_decisions)
# save
save(df_decisions, file = "scratch/df_decisions")
#### Read in confidence data ####
results_files <- "data/Pilot/confidence/"
files <- dir(results_files)
df_confidence <- tibble()
df_confidence <- read_data(files, results_files, df_confidence)
# save
save(df_confidence, file = "scratch/df_confidence")
rm(list = ls())
#### In the driver's seat ####
# Script to make some quick plots
#### Library ####
library(tidyverse)
#### Functions ####
#### Load data ####
load("scratch/df_decisions")
#### Plotting ####
# Simple dot plot for now should be good
df_decisions %>%
mutate(norm_delta = Delta/max(Delta),
norm_place = abs(Placed_x/max(Delta)),
Performance = ifelse(Spread == 1, "Certain", "Random")) %>%
ggplot(aes(norm_delta, norm_place, colour = Performance)) +
geom_point(alpha = .3) +
see::scale_color_flat() +
scale_y_continuous(breaks = seq(0, 1, .25),
limits = c(0, 1)) +
theme_bw() +
theme(strip.text.x = element_blank()) +
facet_wrap(~Participant + Performance, ncol = 2)
load("scratch/df_confidence")
head(df_confidence)
load("scratch/df_screen_info")
head(df_screen_info)
plt_fix[["data"]] %>%
group_by(prop_type, bias_type, dist_type) %>%
summarise(mu = mean(proportion),
med = median(proportion),
upper = quantile(proportion, .95),
lower = quantile(proportion, .5))
rm(list = ls())
setwd("F:/Uni/Github/Breaking_symmetry/Analyses/Experiment_4_Prob")
#### Making plots for the paper ####
# probability matching
#### Library ####
library(tidyverse)
#### functions ####
mu <- function(a, b){
a/(a + b)
}
variance <- function(a, b){
(a*b)/(((a+b)^2)*(a+b+1))
}
phi <- function(a, b){
1/variance(a, b)
}
skew <- function(a, b){
((2*(b - a))*sqrt(a + b + 1))/((a + b + 2)*sqrt(a*b))
}
#### Load data ####
load("scratch/new_data/df_part2")
load("scratch/new_data/AccMea")
#### Processing ####
df_part2 <- df_part2 %>%
mutate(dist_type = ifelse(separation < Switching_point,
"Close", "Far"),
bias_type = ifelse(bias_type == "biased", "Biased", "Symmetric")) %>%
select(participant,
block,
bias_type,
bias_left,
separation,
dist_type,
Switching_point,
lcr,
standard_boxes,
accuracy)
#### NB: Really close... one point isn't working for some reason.... ####
# Need to work on labels
# labels should reflect participants' own biases in the "symmetric" condition
check <- df_part2 %>%
select(participant, bias_type, lcr, standard_boxes, dist_type) %>%
group_by(participant, bias_type, lcr, standard_boxes, dist_type) %>%
summarise(n = n()) %>%
ungroup() %>%
complete(lcr, nesting(participant, bias_type, standard_boxes, dist_type), fill = list(n = 0)) %>%
ungroup() %>%
group_by(participant, bias_type, dist_type) %>%
spread(lcr, n) %>%
mutate(most = ifelse(sum(`-1`) > sum(`1`), -1, 1),
least = ifelse(sum(`-1`) < sum(`1`), -1, 1),
# need to make sure that the biased group does not change
# will need to do this in the main df
lcr2 = ifelse(standard_boxes == "centre", 0,
ifelse(standard_boxes == "most likely", most, least)),
n = ifelse(lcr2 == 0, max(`0`),
ifelse(lcr2 == 1, max(`1`), max(`-1`)))) %>%
select(participant, bias_type, standard_boxes, lcr2, most, least, dist_type) %>%
merge(df_part2) %>%
mutate(st_box = ifelse(bias_type == "Biased", standard_boxes,
ifelse(lcr == 0, "centre",
ifelse(lcr == most, "most likely", "least likely"))))
# make plot of this
plt_fix <- check %>%
ungroup() %>%
group_by(participant, bias_type, dist_type) %>%
mutate(centre = ifelse(st_box == "centre", 1, 0),
ML = ifelse(st_box == "most likely", 1, 0),
LL = ifelse(st_box == "least likely", 1, 0),
n = n()) %>%
summarise(centre = mean(centre),
ML = mean(ML),
LL = mean(LL)) %>%
gather(centre:LL,
key = "prop_type",
value = "proportion") %>%
mutate(prop_type = factor(prop_type, c("centre", "ML", "LL"),
labels = c("Centre", "Most Likely", "Least Likely"))) %>%
ggplot(aes(dist_type, proportion,
fill = bias_type,
colour = bias_type)) +
geom_boxplot(alpha = .3) +
# ggplot(aes(proportion, fill = prop_type)) +
# geom_density(alpha = .3) +
# geom_histogram(position = "dodge") +
scale_y_continuous(element_blank(),
breaks = seq(0,1,.2),
labels = scales::percent_format(accuracy = 1)) +
facet_wrap(~prop_type) +
see::scale_fill_flat(name = "Condition") +
see::scale_color_flat(name = "Condition") +
scale_x_discrete("Delta") +
theme_bw()
plt_fix
# some quick descriptives
plt_fix[["data"]] %>%
group_by(prop_type, bias_type, dist_type) %>%
summarise(mu = mean(proportion),
med = median(proportion),
upper = quantile(proportion, .95),
lower = quantile(proportion, .5))
plt_fix[["data"]] %>%
group_by(prop_type, bias_type, dist_type) %>%
summarise(mu = mean(proportion),
med = median(proportion),
upper = quantile(proportion, .95),
lower = quantile(proportion, .5),
sumry = summary(proportion))
plt_fix[["data"]] %>%
group_by(prop_type, bias_type, dist_type) %>%
summarise(mu = mean(proportion),
med = median(proportion),
upper = quantile(proportion, .95),
lower = quantile(proportion, .05))
quantile(plt_fix[["data"]]$proportion)
summary(plt_fix[["data"]]$proportion)
tapply(plt_fix[["data"]]$proportion, plt_fix[["data"]]$prop_type, summary)
test <- split(plt_fix[["data"]], plt_fix[["data"]]$prop_type)
quantile(test)
summary(test)
install.packages("qwraps2")
quartile(plt_fix[["data"]]$proportion)
quantile(plt_fix[["data"]]$proportion)
IQR(plt_fix[["data"]]$proportion)
qwraps2::median_iqr(plt_fix[["data"]]$proportion)
plt_fix[["data"]] %>%
group_by(prop_type, bias_type, dist_type) %>%
summarise(mu = mean(proportion),
med = median(proportion),
iqr = qwraps2::median_iqr(proportion))
plt_fix[["data"]] %>%
group_by(prop_type, bias_type, dist_type) %>%
summarise(mu = mean(proportion),
med = median(proportion),
qurts = quantile(proportion),
iqr = qwraps2::median_iqr(proportion))
plt_fix[["data"]] %>%
group_by(prop_type, bias_type, dist_type) %>%
summarise(mu = mean(proportion),
med = median(proportion),
qurts = list(quantile(proportion)),
iqr = qwraps2::median_iqr(proportion))
plt_fix[["data"]] %>%
group_by(prop_type, bias_type, dist_type) %>%
summarise(mu = mean(proportion),
med = median(proportion),
qurts = list(quantile(proportion)),
iqr = qwraps2::median_iqr(proportion)) %>%
unlist
plt_fix[["data"]] %>%
group_by(prop_type, bias_type, dist_type) %>%
summarise(mu = mean(proportion),
med = median(proportion),
qurts = list(quantile(proportion)),
iqr = qwraps2::median_iqr(proportion)) %>%
unnest
plt_fix[["data"]] %>%
group_by(prop_type, bias_type, dist_type) %>%
summarise(mu = mean(proportion),
med = median(proportion),
qurts = list(quantile(proportion)),
iqr = qwraps2::median_iqr(proportion)) %>%
unnest %>%
mutate(Q = rep(c("min","Q1","med", "Q3", "max"), length(qrts)/2)) %>%
spread(key = Q, value = qrts)
# some quick descriptives
plt_fix[["data"]] %>%
group_by(prop_type, bias_type, dist_type) %>%
summarise(mu = mean(proportion),
med = median(proportion),
qurts = list(quantile(proportion)),
iqr = qwraps2::median_iqr(proportion)) %>%
unnest %>%
mutate(Q = rep(c("min","Q1","med", "Q3", "max"), length(mu)/2)) %>%
spread(key = Q, value = qrts)
plt_fix[["data"]] %>%
group_by(prop_type, bias_type, dist_type) %>%
summarise(mu = mean(proportion),
med = median(proportion),
qurts = list(quantile(proportion)),
iqr = qwraps2::median_iqr(proportion)) %>%
unnest %>%
mutate(Q = rep(c("min","Q1","med", "Q3", "max"), length(mu)/5)) %>%
spread(key = Q, value = qrts)
plt_fix[["data"]] %>%
group_by(prop_type, bias_type, dist_type) %>%
summarise(mu = mean(proportion),
med = median(proportion),
qurts = list(quantile(proportion)),
iqr = qwraps2::median_iqr(proportion)) %>%
unnest %>%
mutate(Q = rep(c("min","Q1","med", "Q3", "max"), length(mu)/5))
plt_fix[["data"]] %>%
group_by(prop_type, bias_type, dist_type) %>%
summarise(mu = mean(proportion),
med = median(proportion),
qurts = list(quantile(proportion)),
iqr = qwraps2::median_iqr(proportion)) %>%
unnest %>%
mutate(Q = rep(c("min","Q1","med","Q3","max"), length(mu)/5)) %>%
spread(key = Q, value = qurts)
plt_fix[["data"]] %>%
group_by(prop_type, bias_type, dist_type) %>%
summarise(mu = mean(proportion),
med = median(proportion),
qurts = list(quantile(proportion)),
iqr = qwraps2::median_iqr(proportion)) %>%
unnest %>%
mutate(Q = rep(c("min","Q1","median","Q3","max"), length(mu)/5)) %>%
spread(key = Q, value = qurts) %>%
select(-max, -min, - median)
# some quick descriptives
plt_fix[["data"]] %>%
group_by(prop_type, bias_type, dist_type) %>%
summarise(mu = mean(proportion),
med = median(proportion),
qurts = list(quantile(proportion))) %>%
# iqr = qwraps2::median_iqr(proportion)) %>%
unnest %>%
mutate(Q = rep(c("min","Q1","median","Q3","max"), length(mu)/5)) %>%
spread(key = Q, value = qurts) %>%
select(-max, -min, - median) %>%
something
# some quick descriptives
plt_fix[["data"]] %>%
group_by(prop_type, bias_type, dist_type) %>%
summarise(mu = mean(proportion),
med = median(proportion),
qurts = list(quantile(proportion))) %>%
# iqr = qwraps2::median_iqr(proportion)) %>%
unnest %>%
mutate(Q = rep(c("min","Q1","median","Q3","max"), length(mu)/5)) %>%
spread(key = Q, value = qurts) %>%
select(-max, -min, - median) %>%
mutate(iqr = Q1 - Q3)
plt_fix[["data"]] %>%
group_by(prop_type, bias_type, dist_type) %>%
summarise(mu = mean(proportion),
med = median(proportion),
qurts = list(quantile(proportion))) %>%
# iqr = qwraps2::median_iqr(proportion)) %>%
unnest %>%
mutate(Q = rep(c("min","Q1","median","Q3","max"), length(mu)/5)) %>%
spread(key = Q, value = qurts) %>%
select(-max, -min, - median) %>%
mutate(iqr = Q3 - Q1)
plt_fix[["data"]] %>%
group_by(prop_type, bias_type, dist_type) %>%
summarise(mu = mean(proportion),
med = median(proportion),
qurts = list(quantile(proportion))) %>%
# iqr = qwraps2::median_iqr(proportion)) %>%
unnest %>%
mutate(Q = rep(c("min","Q1","median","Q3","max"), length(mu)/5)) %>%
spread(key = Q, value = qurts) %>%
select(-max, -min, - median)
# some quick descriptives
plt_fix[["data"]] %>%
group_by(prop_type, bias_type, dist_type) %>%
summarise(mu = mean(proportion),
med = median(proportion),
quantiles = list(quantile(proportion))) %>%
# iqr = qwraps2::median_iqr(proportion)) %>%
unnest %>%
mutate(Q = rep(c("min","Q1","median","Q3","max"), length(mu)/5)) %>%
spread(key = Q, value = quantiles) %>%
select(-max, -min, - median)
plt_fix[["data"]] %>%
group_by(prop_type, dist_type, bias_type) %>%
summarise(mu = mean(proportion),
med = median(proportion),
quantiles = list(quantile(proportion))) %>%
# iqr = qwraps2::median_iqr(proportion)) %>%
unnest %>%
mutate(Q = rep(c("min","Q1","median","Q3","max"), length(mu)/5)) %>%
spread(key = Q, value = quantiles) %>%
select(-max, -min, - median)
