grid.arrange(plt_prop_gamble_types,plt_standing_pos, ncol = 2)
plt_together <- arrangeGrob(plt_prop_gamble_types, plt_standing_pos, ncol = 2)
setwd("F:/Uni/Github/Breaking_symmetry/Analyses/Experiment_5_Unequal_Reward")
#### Gambling Study - Throwing Task ####
# read in part 1 and get their accuracy scores
#### Packages ####
library(tidyverse)
#### Constants ####
slab_size <- 0.46
#### Load in data ####
# set path
results_files <- dir("data/Part1/")
# set up empty data frame
df_part1 <- data.frame(Participant = character(),
Slab = numeric(),
InHoop = numeric())
# read in files
for(f in results_files){
# read in each file
d <- read.csv(paste("data/Part1/", f, sep = ""), header = T)
# add in Participant
Participant <- strsplit(f, '[_.]')[[1]]
Participant <- Participant[2]
# add in Participant
d$Participant <- Participant
# add to empty data frame
df_part1 <- rbind(df_part1, d)
}
# tidy
rm(results_files, f, d, Participant)
# rearrange
df_part1 <- select(df_part1,
Participant,
everything())
#### sort new columns ####
# get accuracy value
df_part1$Trials <- 12
df_part1$Accuracy <- df_part1$InHoop / df_part1$Trials
# make Participant a Factor
df_part1$Participant <- as.factor(df_part1$Participant)
# save this file
save(df_part1, file = "scratch/data/df_part1")
#### run GLM ####
m <- glm(data = df_part1, Accuracy~Slab:Participant,
family = binomial)
df_part1$p <- predict(m, type = "response")
#### make plot ####
plt <- ggplot(df_part1, aes(Slab, Accuracy))
plt <- plt + geom_point()
plt <- plt + theme_bw()
plt <- plt + geom_smooth(colour="blue", method=glm,
method.args = list(family = "binomial"),
aes(y=p), fullrange=T, se=F)
plt <- plt + facet_wrap(~Participant)
plt
# tidy
rm(m)
#### get slabs_to_test ####
# empty data.frame
slabs_to_test <- data.frame(Participant = character(),
Acc_level = numeric(),
Test_slab = numeric())
# acc_levels we want
acc_levels <- c(90,75,25,10)
colours <- c("R","Y","B","G")
# separations we want
separations <- c(1:30)
for(P in levels(df_part1$Participant)) {
# get subset
ss <- df_part1[df_part1$Participant == P,]
# run glm for each participant
m <- glm(data = ss,
Accuracy ~ Slab,
family = binomial)
# get predictions
p <- predict(m, data.frame(Slab = separations), type = "response")
p <- as.numeric(p)
for(a in acc_levels){
slab = which(abs(p-a/100)==min(abs(p-a/100)))
slabs_to_test <- rbind(slabs_to_test, data.frame(Participant = P,
Acc_level = a,
Slab = separations[slab]))
}
}
# add in colours
slabs_to_test$Colours <- rep(colours, max(as.numeric(slabs_to_test$Participant)))
# tidy
rm(m, ss, a, acc_levels, p, P, separations, slab, colours)
# save this
save(slabs_to_test, file = "scratch/data/slabs_to_test")
rm(list = ls())
#### Gambling Study - Throwing Task ####
# sort out part 2
# read it in and make some plots
#### Notes ####
# participant 9 was tested using the wrong hoops
# They were tested using participant 7's distances so this should
# reflected in the data...
# This only changes their R value, so it's fine for the most part
#### Libraries ####
library(tidyverse)
#### Constants ####
slab_size <- 0.46
#### Read in data ####
# dir
results_files <- dir("data/Part2/")
# set up empty frame
df_part2 <- data.frame(Participant = character(),
Trial = numeric(),
Colour = character(),
Direction = character(),
Left_Gamble = numeric(),
Rght_Gamebl = numeric(),
Subject_Position = numeric(),
Accuracy = numeric(),
Winnings = numeric())
# loop through files
for(f in results_files){
d <- read.csv(paste("data/Part2/", f, sep = ""), header = T)
# add in Participant
Participant <- strsplit(f, '[_.]')[[1]]
Participant <- Participant[2]
# add in Participant
d$Participant <- Participant
# add to empty data frame
df_part2 <- rbind(df_part2, d)
}
# reorder
df_part2 <- select(df_part2,
Participant,
everything())
# tidy
rm(d, f, Participant, results_files)
#### Sort out data ####
# add in slabs tested
# load in slabs_to_test
load("scratch/data/slabs_to_test")
# make this wide
tested_hoops <- slabs_to_test %>%
select(-Acc_level) %>%
spread(Colours, Slab)
# add this frame to df_part2
df_part2 <- merge(df_part2,tested_hoops)
# Sort out participant 9's tested to reflect what they were actually tested at
df_part2$R[df_part2$Participant == "9"] <- tested_hoops$R[tested_hoops$Participant == "7"]
# get HoopDelta
for (row in 1:nrow(df_part2))
{
df_part2$HoopDelta[row] = df_part2[row,as.character(df_part2$Colour[row])]
}
# tidy
rm(tested_hoops,slabs_to_test,row)
# add in gamble type
df_part2$Gamble_Type <- ifelse(df_part2$Left_Gamble == 25, "Equal", "Unequal")
# get norm_dist
df_part2$Norm_Dist <- abs(df_part2$Subject_Position/df_part2$HoopDelta)
# make participant a factor
df_part2$Participant <- as.factor(df_part2$Participant)
# save this file
save(df_part2, file = "scratch/data/df_part2")
rm(list =ls())
#### Gambling Study ####
# Plotting
# proportion of equal vs. unequal for each participant
# Accuracy data
# Standing positions
# Total earnings
#### Library ####
library(tidyverse)
# library(rstan)
library(gridExtra)
library(forcats)
library(ggthemes)
#### Constants ####
slab_size <- 0.46
#### load in data ####
load("scratch/data/df_part2")
load("scratch/data/df_part1")
# relevel factors
#### Summaries and Plotting ####
# proportion of equal vs unequal
plt_prop_gamble_types <- df_part2 %>%
mutate(Participant = as.factor(as.numeric(Participant))) %>%
group_by(Participant, Gamble_Type) %>%
summarise(n = n()) %>%
ggplot(aes(Participant, n, fill = Gamble_Type)) +
scale_fill_ptol() +
geom_bar(stat = "identity", width = 0.5) +
theme_bw() +
scale_y_discrete(limits = seq(0,12,2)) +
theme(legend.position = "bottom")
plt_prop_gamble_types$labels$y <- "No. of each split"
plt_prop_gamble_types$labels$fill <- "Split"
plt_prop_gamble_types
# probably want to save these as well
# add that in later
# choices made
plt_standing_pos <- df_part2 %>%
mutate(Participant = as.factor(as.numeric(Participant))) %>%
ggplot(aes(HoopDelta, Norm_Dist, colour = Gamble_Type)) +
scale_colour_ptol() +
geom_jitter() +
theme_bw() +
facet_wrap(~Participant, ncol = 4) +
theme(legend.position = "bottom",
strip.text.x = element_text(margin = margin(0.01,0,0.01,0, "mm")))
plt_standing_pos$labels$x <- "Delta (Metres)"
plt_standing_pos$labels$y <- "Nomalised Standing Position"
plt_standing_pos$labels$colour <- "Split"
plt_standing_pos
# plot together
grid.arrange(plt_prop_gamble_types,plt_standing_pos, ncol = 2)
plt_together <- arrangeGrob(plt_prop_gamble_types, plt_standing_pos, ncol = 2)
prop_split <- plt_prop_gamble_types[["data"]]
head(prop_split)
prop_split <- plt_prop_gamble_types[["data"]] %>%
ungroup() %>%
spread(Gamble_type, n)
plt_prop_gamble_types[["data"]] %>%
ungroup() %>%
spread(Gamble_Type, n)
plt_prop_gamble_types[["data"]] %>%
ungroup() %>%
select(-group) %>%
spread(Gamble_Type, n)
plt_prop_gamble_types[["data"]] %>%
ungroup() %>%
select(-.group) %>%
spread(Gamble_Type, n)
1 + NA
plt_prop_gamble_types[["data"]] %>%
ungroup() %>%
select(-.group) %>%
spread(Gamble_Type, n) %>%
replace_na(list(Equal = 0, Unequal = 0))
plt_prop_gamble_types[["data"]] %>%
ungroup() %>%
select(-.group) %>%
spread(Gamble_Type, n) %>%
replace_na(list(Equal = 0, Unequal = 0)) %>%
mutate(prop_equal = Equal/(Equal + Unequal))
plt_prop_gamble_types[["data"]] %>%
ungroup() %>%
select(-.group) %>%
spread(Gamble_Type, n) %>%
replace_na(list(Equal = 0, Unequal = 0)) %>%
mutate(prop_equal = Equal/(Equal + Unequal),
prop_unequal = 1 - prop_equal)
plt_prop_gamble_types[["data"]] %>%
ungroup() %>%
select(-.group) %>%
spread(Gamble_Type, n) %>%
replace_na(list(Equal = 0, Unequal = 0)) %>%
mutate(Equal = Equal/(Equal + Unequal),
prop_unequal = 1 - Equal)
plt_prop_gamble_types[["data"]] %>%
ungroup() %>%
select(-.group) %>%
spread(Gamble_Type, n) %>%
replace_na(list(Equal = 0, Unequal = 0)) %>%
mutate(Equal = Equal/(Equal + Unequal),
Unequal = 1 - Equal)
plt_prop_gamble_types[["data"]] %>%
ungroup() %>%
select(-.group) %>%
spread(Gamble_Type, n) %>%
replace_na(list(Equal = 0, Unequal = 0)) %>%
mutate(Equal = Equal/(Equal + Unequal),
Unequal = 1 - Equal) %>%
gather(Equal:Unequal,
key = "Gamble_Type",
value = "prop")
prop_split <- plt_prop_gamble_types[["data"]] %>%
ungroup() %>%
select(-.group) %>%
spread(Gamble_Type, n) %>%
replace_na(list(Equal = 0, Unequal = 0)) %>%
mutate(Equal = Equal/(Equal + Unequal),
Unequal = 1 - Equal) %>%
gather(Equal:Unequal,
key = "Gamble_Type",
value = "prop")
plt_combined <- plt_standing_pos
plt_combined
plt_prop_gamble_types[["data"]] %>%
ungroup() %>%
select(-.group) %>%
spread(Gamble_Type, n) %>%
replace_na(list(Equal = 0, Unequal = 0)) %>%
mutate(Equal = Equal/(Equal + Unequal),
Unequal = 1 - Equal,
Norm_dist = 1.2) %>%
gather(Equal:Unequal,
key = "Gamble_Type",
value = "prop")
prop_split <- plt_prop_gamble_types[["data"]] %>%
ungroup() %>%
select(-.group) %>%
spread(Gamble_Type, n) %>%
replace_na(list(Equal = 0, Unequal = 0)) %>%
mutate(Equal = Equal/(Equal + Unequal),
Unequal = 1 - Equal,
Norm_dist = 1.2) %>%
gather(Equal:Unequal,
key = "Gamble_Type",
value = "prop")
range(df_part2$HoopDelta)
plt_standing_pos +
geom_bar(data = prop_split,
aes(HoopDelta, prop, fill = Gamble_Type))
prop_split <- plt_prop_gamble_types[["data"]] %>%
ungroup() %>%
select(-.group) %>%
spread(Gamble_Type, n) %>%
replace_na(list(Equal = 0, Unequal = 0)) %>%
mutate(Equal = Equal/(Equal + Unequal),
Unequal = 1 - Equal,
HoopDelta = 20) %>%
gather(Equal:Unequal,
key = "Gamble_Type",
value = "prop")
plt_standing_pos +
geom_bar(data = prop_split,
aes(HoopDelta, prop, fill = Gamble_Type))
plt_standing_pos +
geom_bar(data = prop_split,
aes(HoopDelta, prop, fill = Gamble_Type),
stat = "identity")
plt_combined
plt_standing_pos +
geom_bar(data = prop_split,
aes(HoopDelta, prop, fill = Gamble_Type),
stat = "identity")
plt_standing_pos +
geom_bar(data = prop_split,
aes(HoopDelta, prop, fill = Gamble_Type,
colour = Gamble_Type),
stat = "identity") +
see::scale_color_flat() +
see::scale_fill_flat()
prop_split <- plt_prop_gamble_types[["data"]] %>%
ungroup() %>%
select(-.group) %>%
spread(Gamble_Type, n) %>%
replace_na(list(Equal = 0, Unequal = 0)) %>%
mutate(Equal = Equal/(Equal + Unequal),
Unequal = 1 - Equal,
HoopDelta = 20) %>%
gather(Equal:Unequal,
key = "Split",
value = "prop")
plt_combined <- plt_standing_pos +
geom_bar(data = prop_split,
aes(HoopDelta, prop,
fill = Split,
colour = Split),
stat = "identity") +
see::scale_color_flat() +
see::scale_fill_flat()
plt_combined
prop_split <- plt_prop_gamble_types[["data"]] %>%
ungroup() %>%
select(-.group) %>%
spread(Gamble_Type, n) %>%
replace_na(list(Equal = 0, Unequal = 0)) %>%
mutate(Equal = Equal/(Equal + Unequal),
Unequal = 1 - Equal,
order = Equal,
HoopDelta = 20) %>%
gather(Equal:Unequal,
key = "Split",
value = "prop")
head(prop_split)
plt_combined <- plt_standing_pos +
geom_bar(data = prop_split,
aes(HoopDelta, prop,
fill = Split,
colour = Split),
stat = "identity") +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~ order + participant)
plt_combined
plt_standing_pos[["data"]] %>%
mutate(Participant = as.factor(as.numeric(Participant))) %>%
ggplot(aes(HoopDelta, Norm_Dist, colour = Gamble_Type)) +
scale_colour_ptol() +
geom_jitter() +
theme_bw() +
geom_bar(data = prop_split,
aes(HoopDelta, prop,
fill = Split,
colour = Split),
stat = "identity") +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~ order + participant)
plt_standing_pos[["data"]] %>%
mutate(Participant = as.factor(as.numeric(Participant))) %>%
merge(prop_split)
plt_standing_pos[["data"]] %>%
mutate(Participant = as.factor(as.numeric(Participant))) %>%
ggplot(aes(HoopDelta, Norm_Dist, colour = Gamble_Type)) +
scale_colour_ptol() +
geom_jitter() +
theme_bw() +
geom_bar(data = prop_split,
aes(HoopDelta, prop,
fill = Split,
colour = Split),
stat = "identity") +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~ order + participant)
plt_combined
plt_standing_pos[["data"]] %>%
mutate(Participant = as.factor(as.numeric(Participant))) %>%
ggplot(aes(HoopDelta, Norm_Dist, colour = Gamble_Type)) +
scale_colour_ptol() +
geom_jitter() +
theme_bw() +
geom_bar(data = prop_split,
aes(HoopDelta, prop,
fill = Split,
colour = Split),
stat = "identity") +
see::scale_color_flat() +
see::scale_fill_flat()
plt_standing_pos[["data"]] %>%
mutate(Participant = as.factor(as.numeric(Participant)),
Split = Gamble_Type) %>%
ggplot(aes(HoopDelta, Norm_Dist, colour = Split)) +
scale_colour_ptol() +
geom_jitter() +
theme_bw() +
geom_bar(data = prop_split,
aes(HoopDelta, prop,
fill = Split,
colour = Split),
stat = "identity") +
see::scale_color_flat() +
see::scale_fill_flat()
plt_combined <- plt_standing_pos[["data"]] %>%
mutate(Participant = as.factor(as.numeric(Participant)),
Split = Gamble_Type) %>%
ggplot(aes(HoopDelta, Norm_Dist, colour = Split)) +
scale_colour_ptol() +
geom_jitter() +
theme_bw() +
geom_bar(data = prop_split,
aes(HoopDelta, prop,
fill = Split,
colour = Split),
stat = "identity") +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~ participant)
plt_combined
plt_standing_pos[["data"]] %>%
mutate(Participant = as.factor(as.numeric(Participant)),
Split = Gamble_Type) %>%
ggplot(aes(HoopDelta, Norm_Dist, colour = Split)) +
scale_colour_ptol() +
geom_jitter() +
theme_bw() +
geom_bar(data = prop_split,
aes(HoopDelta, prop,
fill = Split,
colour = Split),
stat = "identity") +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~participant)
plt_standing_pos +
geom_bar(data = prop_split,
aes(HoopDelta, prop,
fill = Split,
colour = Split),
stat = "identity") +
see::scale_color_flat() +
see::scale_fill_flat()
prop_split <- plt_prop_gamble_types[["data"]] %>%
ungroup() %>%
select(-.group) %>%
spread(Gamble_Type, n) %>%
replace_na(list(Equal = 0, Unequal = 0)) %>%
mutate(Equal = Equal/(Equal + Unequal),
Unequal = 1 - Equal,
order = Equal,
HoopDelta = 21) %>%
gather(Equal:Unequal,
key = "Split",
value = "prop")
plt_combined <- plt_standing_pos +
geom_bar(data = prop_split,
aes(HoopDelta, prop,
fill = Split,
colour = Split),
stat = "identity") +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~participant)
plt_combined
plt_standing_pos +
geom_bar(data = prop_split,
aes(HoopDelta, prop,
fill = Split,
colour = Split),
stat = "identity") +
see::scale_color_flat() +
see::scale_fill_flat()
plt_standing_pos[["data"]]
