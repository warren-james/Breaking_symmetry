rbinom(1,1,.8)
rbinom(1,1,.8)
rbinom(1,1,.8)
rbinom(1,1,.8)
rbinom(1,1,.8)
rbinom(1,1,.8)
rbinom(1,1,.8)
rbinom(1,1,.8)
rbinom(1,1,.8)
rbinom(1,1,.8)
rbinom(1,1,.8)
rbinom(1,1,.8)
rbinom(1,1,.8)
rbinom(1,1,.8)
rbinom(1,1,.8)
rbinom(1,1,.8)
rbinom(1,1,.8)
rbinom(1,1,1)
rbinom(1,1,1)
rbinom(1,1,1)
rbinom(1,1,1)
rbinom(1,1,1)
rbinom(1,1,1)
rbinom(1,1,1)
rbinom(1,1,1)
rbinom(1,1,1)
rbinom(1,1,1)
rbinom(1,1,1)
rbinom(1,1,1)
rbinom(1,1,1)
for(st in unique(strats)){
if(st == "max"){
guess <- prob
} else {
guess <- 1
}
for(rep in 1:n_reps){
for(t in unique(n_trial)){
print(t)
}
}
}
prob <- .8
n_trial <- seq(10, 100, 10)
n_reps <- 1000
strats <- c("max", "match")
# setup df
df_sim <- tibble(sim = numeric(),
n_trials = numeric(),
prob = numeric(),
strat = character(),
success = numeric())
for(st in unique(strats)){
if(st == "max"){
guess <- prob
} else {
guess <- 1
}
for(rep in 1:n_reps){
for(t in unique(n_trial)){
print(t)
success <- 0
for(trial in 1:t){
result <- rbinom(1,1,prob)
guess_thisT <- rbinom(1,1,prob)
if(result == guess_thisT){
success <- success + 1
}
}
df_sim <- rbind(df_sim, tibble(sim = rep,
n_trials = t,
prob = prob,
strat = st,
success = success/t))
}
}
}
2 * length(n_trial) * n_reps
2 * length(n_trial) * n_reps / 100
prob <- .8
n_trial <- seq(10, 100, 10)
n_reps <- 1000
strats <- c("max", "match")
# setup df
df_sim <- tibble(sim = numeric(),
n_trials = numeric(),
prob = numeric(),
strat = character(),
success = numeric())
count <- 1
for(st in unique(strats)){
if(st == "max"){
guess <- prob
} else {
guess <- 1
}
for(rep in 1:n_reps){
if(count %% 200 == 0){
print(count/20000, "%", sep = "")
}
count <- count + 1
for(t in unique(n_trial)){
success <- 0
for(trial in 1:t){
result <- rbinom(1,1,prob)
guess_thisT <- rbinom(1,1,prob)
if(result == guess_thisT){
success <- success + 1
}
}
df_sim <- rbind(df_sim, tibble(sim = rep,
n_trials = t,
prob = prob,
strat = st,
success = success/t))
}
}
}
prob <- .8
n_trial <- seq(10, 100, 10)
n_reps <- 1000
strats <- c("max", "match")
# setup df
df_sim <- tibble(sim = numeric(),
n_trials = numeric(),
prob = numeric(),
strat = character(),
success = numeric())
count <- 1
for(st in unique(strats)){
if(st == "max"){
guess <- prob
} else {
guess <- 1
}
for(rep in 1:n_reps){
if(count %% 200 == 0){
print(paste(count/20000, "%", sep = ""))
}
count <- count + 1
for(t in unique(n_trial)){
success <- 0
for(trial in 1:t){
result <- rbinom(1,1,prob)
guess_thisT <- rbinom(1,1,prob)
if(result == guess_thisT){
success <- success + 1
}
}
df_sim <- rbind(df_sim, tibble(sim = rep,
n_trials = t,
prob = prob,
strat = st,
success = success/t))
}
}
}
length(strats)
total <- length(strats) * n_reps * length(n_trial)
# # let's simulate probability matching an maximising
prob <- .8
n_trial <- seq(10, 100, 20)
n_reps <- 1000
strats <- c("max", "match")
total <- length(strats) * n_reps * length(n_trial)
prob <- .8
n_trial <- seq(10, 100, 20)
n_reps <- 1000
strats <- c("max", "match")
total <- length(strats) * n_reps * length(n_trial)
# setup df
df_sim <- tibble(sim = numeric(),
n_trials = numeric(),
prob = numeric(),
strat = character(),
success = numeric())
count <- 1
for(st in unique(strats)){
if(st == "max"){
guess <- prob
} else {
guess <- 1
}
for(rep in 1:n_reps){
if(count %% total/100 == 0){
print(paste(count/(total/100), "%", sep = ""))
}
count <- count + 1
for(t in unique(n_trial)){
success <- 0
for(trial in 1:t){
result <- rbinom(1,1,prob)
guess_thisT <- rbinom(1,1,prob)
if(result == guess_thisT){
success <- success + 1
}
}
df_sim <- rbind(df_sim, tibble(sim = rep,
n_trials = t,
prob = prob,
strat = st,
success = success/t))
}
}
}
head(df_sim)
df_sim %>%
ggplot(aes(success,
colour = strat,
fill = strat)) +
geom_density() +
facet_wrap(~n_trials)
prob <- .8
n_trial <- seq(10, 100, 20)
n_reps <- 1000
strats <- c("max", "match")
total <- length(strats) * n_reps * length(n_trial)
# setup df
df_sim <- tibble(sim = numeric(),
n_trials = numeric(),
prob = numeric(),
strat = character(),
success = numeric())
count <- 1
for(st in unique(strats)){
if(st == "max"){
guess <- prob
} else {
guess <- 1
}
for(rep in 1:n_reps){
if(count %% 100 == 0){
print(paste(count/(total/100), "%", sep = ""))
}
count <- count + 1
for(t in unique(n_trial)){
success <- 0
for(trial in 1:t){
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
if(result == guess_thisT){
success <- success + 1
}
}
df_sim <- rbind(df_sim, tibble(sim = rep,
n_trials = t,
prob = prob,
strat = st,
success = success/t))
}
}
}
df_sim %>%
ggplot(aes(success,
colour = strat,
fill = strat)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat()
df_sim %>%
ggplot(aes(success,
colour = strat,
fill = strat)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~n_trials)
guess = .8
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
result <- rbinom(1,1,guess)
guess_thisT <- rbinom(1,1,guess)
prob <- .8
n_trial <- seq(10, 100, 20)
n_reps <- 1000
strats <- c("max", "match")
total <- length(strats) * n_reps * length(n_trial)
# setup df
df_sim <- tibble(sim = numeric(),
n_trials = numeric(),
prob = numeric(),
strat = character(),
success = numeric())
count <- 1
for(st in unique(strats)){
if(st == "max"){
guess <- prob
} else {
guess <- 1
}
for(rep in 1:n_reps){
if(count %% 100 == 0){
print(paste(count/total, "%", sep = ""))
}
count <- count + 1
for(t in unique(n_trial)){
success <- 0
for(trial in 1:t){
result <- rbinom(1,1,prob)
guess_thisT <- rbinom(1,1,guess)
if(result == guess_thisT){
success <- success + 1
}
}
df_sim <- rbind(df_sim, tibble(sim = rep,
n_trials = t,
prob = prob,
strat = st,
success = success/t))
}
}
}
# plot this
df_sim %>%
ggplot(aes(success,
colour = strat,
fill = strat)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~n_trials)
2 * 1000 * length(n_trial)
prob <- .8
n_trial <- seq(10, 100, 20)
n_reps <- 1000
strats <- c("max", "match")
total <- length(strats) * n_reps * length(n_trial)
# setup df
df_sim <- tibble(sim = numeric(),
n_trials = numeric(),
prob = numeric(),
strat = character(),
success = numeric())
count <- 1
for(st in unique(strats)){
if(st == "max"){
guess <- 1
} else {
guess <- prob
}
for(rep in 1:n_reps){
if(count %% total/100 == 0){
print(paste((count/total)*100, "%", sep = ""))
}
count <- count + 1
for(t in unique(n_trial)){
success <- 0
for(trial in 1:t){
result <- rbinom(1,1,prob)
guess_thisT <- rbinom(1,1,guess)
if(result == guess_thisT){
success <- success + 1
}
}
df_sim <- rbind(df_sim, tibble(sim = rep,
n_trials = t,
prob = prob,
strat = st,
success = success/t))
}
}
}
# plot this
df_sim %>%
ggplot(aes(success,
colour = strat,
fill = strat)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~n_trials)
100 %% total/100
total/100
100 %% (total/100)
prob <- .8
n_trial <- seq(10, 100, 20)
n_reps <- 1000
strats <- c("max", "match")
total <- length(strats) * n_reps * length(n_trial)
# setup df
df_sim <- tibble(sim = numeric(),
n_trials = numeric(),
prob = numeric(),
strat = character(),
success = numeric())
count <- 1
for(st in unique(strats)){
if(st == "max"){
guess <- 1
} else {
guess <- prob
}
for(rep in 1:n_reps){
if(count %% (total/100) == 0){
print(paste((count/total)*100, "%", sep = ""))
}
count <- count + 1
for(t in unique(n_trial)){
success <- 0
for(trial in 1:t){
result <- rbinom(1,1,prob)
guess_thisT <- rbinom(1,1,guess)
if(result == guess_thisT){
success <- success + 1
}
}
df_sim <- rbind(df_sim, tibble(sim = rep,
n_trials = t,
prob = prob,
strat = st,
success = success/t))
}
}
}
df_sim %>%
ggplot(aes(success,
colour = strat,
fill = strat)) +
geom_density(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~n_trials)
