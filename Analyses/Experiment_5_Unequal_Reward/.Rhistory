m_cen_op = Centre - Optimal) %>%
group_by(participant, condition, separation) %>%
summarise(mean_centre = mean(ratio_cen_opt))
# Exp / Opt
plt <- AccMea %>%
filter(separation != 640) %>%
group_by(participant, condition, separation) %>%
spread(Pred_type,
Acc) %>%
ungroup() %>%
mutate(Expected = round(Expected, 2),
Optimal = round(Optimal, 2),
Diff = Expected/Optimal,
separation = separation/switch_point) %>%
ggplot(aes(separation, Diff, colour = condition)) +
# geom_line(data = plt_region,
#           aes(separation,
#               mean_centre,
#               group = condition,
#               linetype = condition),
#           colour = "green") +
geom_hline(yintercept = 1, colour = "black",
linetype = "dashed") +
geom_segment(aes(x = 1, y = 0,
xend = 1, yend = 1),
colour = "black",
linetype = "dashed") +
# geom_vline(xintercept = 1, colour = "black",
#            linetype = "dashed") +
geom_path(aes(group = interaction(condition, participant)),
alpha = 1) +
see::scale_colour_flat() +
theme_bw() +
# see::theme_modern() +
coord_cartesian(expand = F)
plt$labels$y <- "Accuracy ratio (Expected/Optimal)"
plt$labels$x <- "Distance relative to switch point"
plt$labels$colour <- "Condition"
plt
# show by participant
# plt + facet_wrap(~participant)
#### Region of worst and best performance ####
# some pre processing
df_part2 <- df_part2 %>%
mutate(max_chance = ifelse(bias_type == "symmetric", 0.5, 0.8))
# dists for each participant
c_dist <- df_part2 %>%
select(participant, bias_type, separation, max_chance) %>%
group_by(participant, bias_type, max_chance) %>%
distinct(separation)
# get acc for this strat
c_acc <- merge(c_dist, acc_sep) %>%
mutate(acc_type = "Centre")
# side strat version
s_dist <- c_dist %>%
ungroup() %>%
mutate(ML_dist = 1,
LL_dist = separation * 2)
ml_acc <- acc_sep %>%
mutate(ML_dist = separation,
ML_acc = accuracy) %>%
select(-separation,
-accuracy)
ll_acc <- acc_sep %>%
mutate(LL_dist = separation,
LL_acc = accuracy) %>%
select(-separation,
-accuracy)
s_acc <- merge(s_dist, ml_acc) %>%
merge(ll_acc) %>%
mutate(acc_type = "Side",
accuracy = (ML_acc * max_chance) + (LL_acc * (1 - max_chance))) %>%
select(separation, participant, bias_type, max_chance, accuracy, acc_type)
acc_c <- acc_sep %>%
rbind(acc_sep) %>%
mutate(acc_type = "Centre") %>%
mutate(bias_type = rep(c("symmetric", "bias"), each = length(acc_sep$separation)))
acc_ml <- acc_sep %>%
mutate(ML_dist = separation,
ML_acc = accuracy) %>%
select(-separation,
-accuracy)
acc_ll <- acc_sep %>%
mutate(LL_dist = separation,
LL_acc = accuracy) %>%
select(-separation,
-accuracy)
acc_s <- acc_sep %>%
mutate(ML_dist = 1,
LL_dist = separation * 2) %>%
merge(acc_ml) %>%
merge(acc_ll) %>%
mutate(bias = (ML_acc * 0.8) + (LL_acc * 0.2),
symmetric = (ML_acc * 0.5) + (LL_acc * 0.5)) %>%
select(-accuracy) %>%
# select(participant, separation, accuracy_bias, accuracy_symmetric) %>%
gather(c(bias, symmetric),
key = "bias_type",
value = "accuracy") %>%
mutate(acc_type = "Side") %>%
select(participant, separation, accuracy, acc_type, bias_type)
# all together
acc_all <- rbind(acc_c, acc_s) %>%
spread(acc_type, accuracy) %>%
drop_na() %>%
mutate(opt_side = ifelse(Centre > Side, 0, 1))
acc_opt <- acc_all %>%
mutate(Optimal = pmax(Centre, Side)) %>%
select(participant, separation, Optimal) %>%
distinct()
r_acc <- acc_c %>%
mutate(r_dist = separation,
r_acc = accuracy) %>%
select(participant, r_dist, r_acc) %>%
distinct()
l_acc <- acc_c %>%
mutate(l_dist = separation,
l_acc = accuracy) %>%
select(participant, l_dist, l_acc) %>%
distinct()
c_acc <- acc_c %>%
mutate(c_dist = separation,
c_acc = accuracy) %>%
select(participant, c_dist, c_acc) %>%
distinct()
fix_acc <- acc_c %>%
mutate(fix_dist = separation,
fix_acc = accuracy) %>%
select(participant, fix_dist, fix_acc) %>%
distinct()
far_acc <- acc_c %>%
mutate(far_dist = separation,
far_acc = accuracy) %>%
select(participant, far_dist, far_acc) %>%
distinct()
new_acc_measures <- df_part2 %>%
select(participant, block, trial, lcr, standard_boxes, bias_type, bias_left, separation, fixated_box, accuracy) %>%
mutate(l_dist = ifelse(fixated_box == 1, separation,
ifelse(fixated_box == 2, 1, 2*separation)),
r_dist = ifelse(fixated_box == 1, separation,
ifelse(fixated_box == 3, 1, 2*separation)),
c_dist = separation,
fix_dist = 1,
far_dist = separation * 2,
ll_bias = 1 - bias_left) %>%
merge(l_acc) %>%
merge(r_acc) %>%
merge(c_acc) %>%
merge(far_acc) %>%
merge(fix_acc) %>%
mutate(Expected = (l_acc * bias_left) + (r_acc * ll_bias),
Centre = (c_acc * bias_left) + (c_acc * ll_bias),
Side_opt = (fix_acc * pmax(bias_left, ll_bias)) + (far_acc * (pmin(bias_left, ll_bias))),
Side_nopt = (fix_acc * pmin(bias_left, ll_bias)) + (far_acc * (pmax(bias_left, ll_bias))),
Optimal = pmax(Side_opt, Centre))%>%
select(participant,
block,
trial,
lcr,
standard_boxes,
separation,
bias_type,
accuracy,
Expected,
Centre,
Side_opt,
Side_nopt,
Optimal)
head(new_acc_measures)
save(df_part2_fixed, file = "scratch/new_data/df_part2_fixed")
rm(list= ls())
#### Analysis for Probability study ####
# These are the analyses that will be included in the paper
#### Library ####
library(tidyverse)
library(lme4)
#### functions ####
#### load data ####
load("scratch/new_data/df_part2_fixed")
dev.off()
df_model <- df_part2_fixed %>%
select(participant, bias_type, separation, st_box, accuracy) %>%
mutate(Ml_fix = ifelse(st_box == "most likely", 1, 0),
C_fix = ifelse(st_box == "centre", 1, 0))
head(df_model)
m_fix_like <- glmer(Ml_fix ~ bias_type + (1|participant), # (bias_type|participant)
data = df_model,
family = "binomial")
summary(m_fix_like)
m_fix_like <- glmer(Ml_fix ~ bias_type + (bias_type|participant),
data = df_model,
family = "binomial")
summary(m_fix_like)
head(df_model)
m_fix_like_sep <- glmer(Ml_fix ~ bias_type + separation + (bias_type|participant),
data = df_model,
family = "binomial")
head(df_part2_fixed)
df_model <- df_part2_fixed %>%
filter(separation != 640) %>% # remove furthest point for now
select(participant, dist_type, bias_type, separation, st_box, accuracy) %>%
mutate(Ml_fix = ifelse(st_box == "most likely", 1, 0),
C_fix = ifelse(st_box == "centre", 1, 0),
) # rescale separation to avoid
m_fix_like_sep <- glmer(Ml_fix ~ bias_type + dist_type + (bias_type|participant),
data = df_model,
family = "binomial")
summary(m_fix_like_sep)
m_fix_like_sep <- glmer(Ml_fix ~ (bias_type + dist_type)^2 + (bias_type|participant),
data = df_model,
family = "binomial")
summary(m_fix_like_sep)
m_fix_like_sep <- glmer(Ml_fix ~ (bias_type + dist_type)^2 + (dist_type + bias_type|participant),
data = df_model,
family = "binomial")
summary(m_fix_like_sep)
library(brms)
bm_fix_like_dt <- brms(Ml_fix ~ (bias_type + dist_type)^2 + (dist_type + bias_type|participant),
data = df_model,
family = "binomial",
chains = 1,
iter = 2000,
warmup = 1000)
bm_fix_like_dt <- brm(Ml_fix ~ (bias_type + dist_type)^2 + (dist_type + bias_type|participant),
data = df_model,
family = "binomial",
chains = 1,
iter = 2000,
warmup = 1000)
bm_fix_like_dt <- brm(Ml_fix ~ (bias_type + dist_type)^2 + (dist_type + bias_type|participant),
data = df_model,
family = "bernoulli",
chains = 1,
iter = 1000,
warmup = 500)
summary(bm_fix_like_dt)
summary(m_fix_like_sep)
plot(marginal_effects(bm_fix_like_dt))
test <- brm(Ml_fix ~ (bias_type + dist_type)^2,
data = df_model,
family = "bernoulli",
chains = 1,
iter = 1000,
warmup = 500)
plot(marginal_effects(test))
summary(m_fix_like)
summary(m_fix_like_sep)
rm(list = ls())
load("scratch/model_outputs/m_brms_v2")
# plot
plt <- model_data %>%
add_predicted_draws(m_brms_v2) %>%
ggplot(aes(.prediction,
colour = Gamble_Type,
fill = Gamble_Type)) +
geom_density(alpha = 0.3) +
theme_minimal() +
ggthemes::scale_colour_ptol() +
ggthemes::scale_fill_ptol() +
facet_wrap(~dist_type)
plt
setwd("F:/Uni/Github/Breaking_symmetry/Analyses/Experiment_5_Unequal_Reward")
load("scratch/model_outputs/m_brms_v2")
# plot
plt <- model_data %>%
add_predicted_draws(m_brms_v2) %>%
ggplot(aes(.prediction,
colour = Gamble_Type,
fill = Gamble_Type)) +
geom_density(alpha = 0.3) +
theme_minimal() +
ggthemes::scale_colour_ptol() +
ggthemes::scale_fill_ptol() +
facet_wrap(~dist_type)
plt
load("scratch/data/model_data")
plt <- model_data %>%
add_predicted_draws(m_brms_v2) %>%
ggplot(aes(.prediction,
colour = Gamble_Type,
fill = Gamble_Type)) +
geom_density(alpha = 0.3) +
theme_minimal() +
ggthemes::scale_colour_ptol() +
ggthemes::scale_fill_ptol() +
facet_wrap(~dist_type)
plt
#### library ####
library(tidyverse)
library(rstan)
library(tidybayes)
library(brms)
plt <- model_data %>%
add_predicted_draws(m_brms_v2) %>%
ggplot(aes(.prediction,
colour = Gamble_Type,
fill = Gamble_Type)) +
geom_density(alpha = 0.3) +
theme_minimal() +
ggthemes::scale_colour_ptol() +
ggthemes::scale_fill_ptol() +
facet_wrap(~dist_type)
plt
rm(list= ls())
dev.off()
#### Gambling Study ####
# Plotting
# proportion of equal vs. unequal for each participant
# Accuracy data
# Standing positions
# Total earnings
#### Library ####
library(tidyverse)
# library(rstan)
library(gridExtra)
library(forcats)
library(ggthemes)
#### Constants ####
slab_size <- 0.46
#### load in data ####
load("scratch/data/df_part2")
load("scratch/data/df_part1")
head(df_part2)
df_gamble_side <- df_part2 %>%
filter(Left_Gamble != 25)
View(df_gamble_side)
df_part2 %>%
filter(Left_Gamble != 25) %>%
mutate(HV_r = ifelse(Right_Gamble == 40, 1, 0))
head(df_part2)
df_part2 %>%
filter(Left_Gamble != 25) %>%
mutate(HV_r = ifelse(Right_Gamble == 40, 1, 0),
Normalised_dist = Subject_Position/HoopDelta) %>%
select(Participant, Normalised_dist, HV_r)
head(df_part2)
df_gamble_side <- df_part2 %>%
filter(Left_Gamble != 25) %>%
mutate(HV_r = ifelse(Right_Gamble == 40, 1, 0),
Normalised_dist = Subject_Position/HoopDelta) %>%
select(Participant, Trial, Normalised_dist, HV_r)
head(df_gamble_side)
#### Did participants stand closer to the more valuable option? ####
df_gamble_side <- df_part2 %>%
filter(Left_Gamble != 25) %>%
mutate(HV_r = ifelse(Right_Gamble == 40, 1, 0),
Normalised_dist = Subject_Position/HoopDelta) %>%
select(Participant, Trial, Normalised_dist, HoopDelta, HV_r)
head(df_gamble_side)
df_part2 %>%
filter(Left_Gamble != 25) %>%
mutate(HV_r = ifelse(Right_Gamble == 40, 1, 0),
Normalised_dist = Subject_Position/HoopDelta) %>%
select(Participant, Trial, Normalised_dist, HoopDelta, HV_r) %>%
ggplot(aes(Trial, Normalised_dist,
colour = HV_r)) +
geom_point() +
geom_abline(intercept = 0, slope = 0)
df_part2 %>%
filter(Left_Gamble != 25) %>%
mutate(HV_r = ifelse(Right_Gamble == 40, 1, 0),
Normalised_dist = Subject_Position/HoopDelta) %>%
select(Participant, Trial, Normalised_dist, HoopDelta, HV_r) %>%
ggplot(aes(Trial, Normalised_dist,
colour = HV_r)) +
geom_point() +
geom_abline(intercept = 0, slope = 0) +
facet_wrap(~participant)
df_part2 %>%
filter(Left_Gamble != 25) %>%
mutate(HV_r = ifelse(Right_Gamble == 40, 1, 0),
Normalised_dist = Subject_Position/HoopDelta) %>%
select(Participant, Trial, Normalised_dist, HoopDelta, HV_r) %>%
ggplot(aes(Trial, Normalised_dist,
colour = HV_r)) +
geom_point() +
geom_abline(intercept = 0, slope = 0) +
facet_wrap(~Participant)
df_part2 %>%
filter(Left_Gamble != 25) %>%
mutate(HV_r = as.factor(ifelse(Right_Gamble == 40, 1, 0)),
Normalised_dist = Subject_Position/HoopDelta) %>%
select(Participant, Trial, Normalised_dist, HoopDelta, HV_r) %>%
ggplot(aes(Trial, Normalised_dist,
colour = HV_r)) +
geom_point() +
geom_abline(intercept = 0, slope = 0) +
facet_wrap(~Participant)
df_part2 %>%
filter(Left_Gamble != 25) %>%
mutate(HV_r = as.factor(ifelse(Right_Gamble == 40, 1, 0)),
Normalised_dist = Subject_Position/HoopDelta) %>%
select(Participant, Trial, Normalised_dist, HoopDelta, HV_r) %>%
ggplot(aes(Normalised_dist, Trial,
colour = HV_r)) +
geom_point() +
geom_abline(intercept = 0, slope = 0) +
facet_wrap(~Participant)
df_part2 %>%
filter(Left_Gamble != 25) %>%
mutate(HV_r = as.factor(ifelse(Right_Gamble == 40, 1, 0)),
Normalised_dist = Subject_Position/HoopDelta) %>%
select(Participant, Trial, Normalised_dist, HoopDelta, HV_r) %>%
ggplot(aes(Normalised_dist, Trial,
colour = HV_r)) +
geom_point() +
geom_vline(xintercept = 0) +
facet_wrap(~Participant)
plt_gamble_side <- df_part2 %>%
filter(Left_Gamble != 25) %>%
mutate(HV_side = ifelse(Right_Gamble == 40, "Right", "Left"),
Normalised_dist = Subject_Position/HoopDelta) %>%
select(Participant, Trial, Normalised_dist, HoopDelta, HV_r) %>%
ggplot(aes(Normalised_dist, Trial,
colour = HV_r)) +
geom_point() +
geom_vline(xintercept = 0) +
facet_wrap(~Participant)
plt_gamble_side
plt_gamble_side <- df_part2 %>%
filter(Left_Gamble != 25) %>%
mutate(HV_side = ifelse(Right_Gamble == 40, "Right", "Left"),
Normalised_dist = Subject_Position/HoopDelta) %>%
select(Participant, Trial, Normalised_dist, HoopDelta, HV_r) %>%
ggplot(aes(Normalised_dist, Trial,
colour = HV_side)) +
geom_point() +
geom_vline(xintercept = 0) +
facet_wrap(~Participant)
plt_gamble_side
plt_gamble_side <- df_part2 %>%
filter(Left_Gamble != 25) %>%
mutate(HV_side = ifelse(Right_Gamble == 40, "Right", "Left"),
Normalised_dist = Subject_Position/HoopDelta) %>%
select(Participant, Trial, Normalised_dist, HoopDelta, HV_side) %>%
ggplot(aes(Normalised_dist, Trial,
colour = HV_side)) +
geom_point() +
geom_vline(xintercept = 0) +
facet_wrap(~Participant)
plt_gamble_side
plt_gamble_side <- df_part2 %>%
filter(Left_Gamble != 25) %>%
mutate(HV_side = ifelse(Right_Gamble == 40, "Right", "Left"),
Normalised_dist = Subject_Position/HoopDelta) %>%
# select(Participant, Trial, Normalised_dist, HoopDelta, HV_side) %>%
ggplot(aes(Normalised_dist, Trial,
colour = HV_side)) +
geom_point() +
geom_vline(xintercept = 0) +
facet_wrap(~Participant)
plt_gamble_side
head(plt_gamble_side[["data"]])
df_part2 %>%
mutate(HV_side = ifelse(Gamble_Type == "Equal", "Na", ifelse(Right_Gamble == 40, "Right", "Left")),
Normalised_dist = Subject_Position/HoopDelta)
df_part2 %>%
mutate(HV_side = ifelse(Gamble_Type == "Equal", "Na", ifelse(Right_Gamble == 40, "Right", "Left")),
Normalised_dist = Subject_Position/HoopDelta,
HV_pos = ifese(HV_side == "Na", 0, ifelse(HV_side == "Right", 1, -1)))
df_part2 %>%
mutate(HV_side = ifelse(Gamble_Type == "Equal", "Na", ifelse(Right_Gamble == 40, "Right", "Left")),
Normalised_dist = Subject_Position/HoopDelta,
HV_pos = ifelse(HV_side == "Na", 0, ifelse(HV_side == "Right", 1, -1)))
df_part2 %>%
mutate(HV_side = ifelse(Gamble_Type == "Equal", "Na", ifelse(Right_Gamble == 40, "Right", "Left")),
Normalised_dist = Subject_Position/HoopDelta,
HV_pos = ifelse(HV_side == "Na", 0, ifelse(HV_side == "Right", 1, -1)),
HV_dist = abs(HV_side - HV_pos))
df_part2 %>%
mutate(HV_side = ifelse(Gamble_Type == "Equal", "Na", ifelse(Right_Gamble == 40, "Right", "Left")),
Normalised_dist = Subject_Position/HoopDelta,
HV_pos = ifelse(HV_side == "Na", 0, ifelse(HV_side == "Right", 1, -1)),
HV_dist = abs(Normalised_dist - HV_pos))
# maybe distance from closest hoop for equal, and distance from hv hoop for unequal?
df_part2 %>%
mutate(HV_side = ifelse(Gamble_Type == "Equal", "Na", ifelse(Right_Gamble == 40, "Right", "Left")),
Normalised_dist = Subject_Position/HoopDelta,
HV_pos = ifelse(HV_side == "Na", 0, ifelse(HV_side == "Right", 1, -1)),
HV_dist = abs(Normalised_dist - HV_pos),
HV_dist = ifelse(HV_pos == 0, 1 - abs(Normalised_dist), HV_dist))
df_part2 %>%
mutate(HV_side = ifelse(Gamble_Type == "Equal", "Na", ifelse(Right_Gamble == 40, "Right", "Left")),
Normalised_dist = Subject_Position/HoopDelta,
HV_pos = ifelse(HV_side == "Na", 0, ifelse(HV_side == "Right", 1, -1)),
HV_dist = abs(Normalised_dist - HV_pos),
HV_dist = ifelse(HV_pos == 0, abs(1 - abs(Normalised_dist)), HV_dist))
df_part2 %>%
mutate(HV_side = ifelse(Gamble_Type == "Equal", "Na", ifelse(Right_Gamble == 40, "Right", "Left")),
Normalised_dist = Subject_Position/HoopDelta,
HV_pos = ifelse(HV_side == "Na", 0, ifelse(HV_side == "Right", 1, -1)),
HV_dist = abs(Normalised_dist - HV_pos),
HV_dist = ifelse(HV_pos == 0, abs(1 - abs(Normalised_dist)), HV_dist)) %>%
ggplot(aes(HV_dist,
colour = Gamble_Type,
fill = Gamble_Type)) +
geom_histogram(aes(position = "dodge"),
alpha = .3)
# Maybe we can look at distance from "best target"
# Easy for the unequal ones, less so for the equal
# maybe distance from closest hoop for equal, and distance from hv hoop for unequal?
df_part2 %>%
mutate(HV_side = ifelse(Gamble_Type == "Equal", "Na", ifelse(Right_Gamble == 40, "Right", "Left")),
Normalised_dist = Subject_Position/HoopDelta,
HV_pos = ifelse(HV_side == "Na", 0, ifelse(HV_side == "Right", 1, -1)),
HV_dist = abs(Normalised_dist - HV_pos),
HV_dist = ifelse(HV_pos == 0, abs(1 - abs(Normalised_dist)), HV_dist)) %>%
ggplot(aes(HV_dist,
colour = Gamble_Type,
fill = Gamble_Type)) +
geom_histogram(position = "dodge",
alpha = .3)
