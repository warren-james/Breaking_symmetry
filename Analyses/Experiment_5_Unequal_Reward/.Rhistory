rm(betas, skew, y, temp)
# now make plot
plt <- beta_frame %>%
ggplot(aes(Delta, estimate, colour = skew)) +
geom_point() +
stat_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = estimate),
se = F) +
scale_x_continuous(breaks = seq(100,900,100)) +
scale_colour_ptol()
plt$labels$x = "Delta (Pixels)"
plt$labels$y = "Estimated success rate"
plt$labels$colour = "Shape"
plt
rm(list = ls())
setwd("F:/Uni/PhD/2nd Year/Experiments/1st_semester/Avatar")
#### Avatar - Make some plots ####
# plots of decisions
# compare estimates to actual performance curves
# Something with number of clicks?
# RT may only be useful for modelling?
#### Notes ####
# max speed is max(df_deltas)/100
# for Condition, 1 = Avatar, 2 = Truck
# for Spread 1 = Randunif, 2 = Hard cutoff
#### Constants ####
travel_time <- 100
#### Libraries ####
library(tidyverse)
#### Load in data ####
# Distribution info
load("scratch/data/df_beta")
# Click History
load("scratch/data/df_clickhist")
# Decision phase
load("scratch/data/df_decisions")
# Separations
load("scratch/data/df_deltas")
# Estimate phase
load("scratch/data/df_estimates")
# Screen information
load("scratch/data/df_screen_info")
# get max speed for each participant
df_max_speed <- df_deltas %>%
group_by(Participant) %>%
summarise(max_speed = max(Delta)/100 - 1)
#### PLOTS: ####
#### PLOTS: decision phase ####
plt_decisions <- df_decisions %>%
mutate(Condition = as.factor(Condition),
Spread = as.factor(Spread),
Norm_Placement = abs(Placed_x/Delta)) %>%
ggplot(aes(Delta, Norm_Placement, colour = Condition)) +
geom_point() +
facet_wrap(~Participant + Spread)
plt_decisions
#### NB: Need to fix below here to work with new datasets/ideas ####
#### PLOTS: Estimates vs actual ####
# need to get an easy way to sim trial data
# something like this might work?
# setup empty frame
df_curve_betas <- data.frame(Participant = character(),
Delta = numeric(),
Estimate = numeric(),
Estimate_Type = character())
# loop
for(p in unique(df_beta$Participant)){
# get this participant's information
# betas
beta1 <- df_beta$beta1[df_beta$Participant == p]
beta2 <- df_beta$beta2[df_beta$Participant == p]
# max_speed
max_speed <- df_max_speed$max_speed[df_max_speed$Participant == p]
# deltas
delta_frame <- data.frame(Participant = p,
Delta = df_deltas$Delta[df_deltas$Participant == p],
Estimate_Type = "Simulated")
# sort out chance performance
y <- (round(rbeta(1000000, beta1, beta2)*max_speed)+1)*travel_time
delta_frame <- delta_frame %>%
group_by(Participant, Delta) %>%
mutate(Estimate = sum(y > Delta)/length(y))
# bind to existing frame
df_curve_betas <- rbind(df_curve_betas, as.data.frame(delta_frame))
}
# tidy
rm(delta_frame,beta1,beta2,max_speed,p,y)
# make a plot of this?
plt_curves <- rbind(df_curve_betas, df_estimates) %>%
ggplot(aes(Delta, Estimate, colour = Estimate_Type)) +
geom_point() +
stat_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = Estimate),
se = F) +
facet_wrap(~Participant)
plt_curves
plt_decisions
setwd("F:/Uni/PhD/2nd Year/Experiments/1st_semester/Athletes study/Analysis/Throwing")
rm(list = ls())
#### Athlete study - Throwing Task ####
# read in part 1 and get their accuracy scores
#### Packages ####
library(tidyverse)
#### Constants ####
slab_size <- 0.46
#### Load in data ####
# set path
results_files <- dir("data/Part1/")
# set up empty data frame
df_part1 <- data.frame(Participant = character(),
Direction = character(),
Slab = numeric(),
InHoop = numeric(),
Athlete = character())
# column name
import_names <- c("Participant",
"Direction",
"Slab",
"InHoop",
"Athlete")
# read in files
for(f in results_files){
# read in each file
d <- read.csv(paste("data/Part1/", f, sep = ""), header = T)
# name columns
colnames(d) <- import_names
# add to empty data frame
df_part1 <- rbind(df_part1, d)
}
# tidy
rm(results_files, import_names, f, d)
#### sort new columns ####
# get accuracy value
df_part1$Trials <- 12
df_part1$Accuracy <- df_part1$InHoop / df_part1$Trials
# make Participant a Factor
df_part1$Participant <- as.factor(df_part1$Participant)
# save this file
save(df_part1, file = "scratch/df_part1")
#### run GLM ####
m <- glm(data = df_part1, Accuracy~Slab:Participant,
family = binomial)
df_part1$p <- predict(m, type = "response")
#### make plot ####
plt <- ggplot(df_part1, aes(Slab, Accuracy))
plt <- plt + geom_point()
plt <- plt + theme_bw()
plt <- plt + geom_smooth(colour="blue", method=glm,
method.args = list(family = "binomial"),
aes(y=p), fullrange=T, se=F)
plt <- plt + facet_wrap(~Participant)
plt
# tidy
rm(m)
#### get slabs_to_test ####
# empty data.frame
slabs_to_test <- data.frame(Participant = character(),
Acc_level = numeric(),
Test_slab = numeric())
# acc_levels we want
acc_levels <- c(90,75,25,10)
# separations we want
separations <- c(1:30)
for(P in levels(df_part1$Participant)) {
# get subset
ss <- df_part1[df_part1$Participant == P,]
# run glm for each participant
m <- glm(data = ss,
Accuracy ~ Slab,
family = binomial)
# get predictions
p <- predict(m, data.frame(Slab = separations), type = "response")
p <- as.numeric(p)
for(a in acc_levels){
slab = which(abs(p-a/100)==min(abs(p-a/100)))
slabs_to_test <- rbind(slabs_to_test, data.frame(Participant = P,
Acc_level = a,
Slab = separations[slab]))
}
}
# tidy
rm(m, ss, a, acc_levels, p, P, separations, slab)
slabs_to_test[slabs_to_test$Participant == "23"]
slabs_to_test[slabs_to_test$Participant == "23",]
a <- c(1,
1,
2,
2,
1,
1,
2,
2,
1,
1,
2,
2,
1,
1,
2,
2,
1,
1,
2,
2,
1,
2,
1,
2,
1,
2,
2,
1,
1,
2,
2,)
a <- c(1,
1,
2,
2,
1,
1,
2,
2,
1,
1,
2,
2,
1,
1,
2,
2,
1,
1,
2,
2,
1,
2,
1,
2,
1,
2,
2,
1,
1,
2,
2)
b <- c(1,
2,
1,
2,
1,
2,
1,
2,
1,
2,
1,
2,
1,
2,
1,
2,
1,
2,
1,
2,
2,
2,
2,
2,
2,
1,
2,
1,
2,
1,
2)
temp <- data.frame(a = a, b = b)
temp
temp %>% gather(a:b, key = "a_b")
head(temp)
temp %>% gather(a:b, key = "a_b") %>% head()
temp %>% mutate(rand = seq(1,length(a),1) %>% gather(a:b, key = "a_b") %>% head()
)
temp %>% mutate(rand = seq(1,length(a),1)) %>% gather(a:b, key = "a_b") %>% head()
temp %>% mutate(rand = seq(1,length(a),1))
temp %>% mutate(rand = seq(1,length(a),1)) %>% gather(a:b, key = "a_b", value = rand)
temp %>% mutate(rand = seq(1,length(a),1)) %>% unite(a:b, sep = "_")
temp %>% mutate(rand = seq(1,length(a),1)) %>% unite(a:b, c("a","b"), sep = "_")
temp %>% mutate(rand = seq(1,length(a),1)) %>% unite(a:b, c("a","b"), sep = "_") %>% head()
temp %>% mutate(rand = seq(1,length(a),1)) %>% unite(a:b, c("a","b"), sep = "_") %>% group_by(a:b) %>% head()
temp %>% mutate(rand = seq(1,length(a),1)) %>% unite(a_b, c("a","b"), sep = "_") %>% group_by(a:b) %>% head()
temp %>% mutate(rand = seq(1,length(a),1)) %>% unite(a_b, c("a","b"), sep = "_") %>% group_by(a:b)
View(temp)
temp %>% mutate(rand = seq(1,length(a),1)) %>% unite(a_b, c("a","b"), sep = "_") %>% group_by(a_b)
head(temp)
temp %>% mutate(rand = seq(1,length(a),1)) %>% unite(a_b, c("a","b"), sep = "_") %>% group_by(a_b) %>% summarise(n = n())
d <- c(0,
0,
0,
1,
0,
1,
0,
1,
0,
1,
1,
0,
0,
0,
0,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
0,
0,
0,
0,
0)
temp <- data.frame(a = a, b = b, d = d)
temp %>% unite(a_b, c("a","b"), sep = "_") %>% group_by(a_b) %>% summarise(n = n())
temp %>% unite(a_b, c("a","b"), sep = "_") %>% filter(d >0 ) %>% group_by(a_b) %>% summarise(n = n())
temp %>% unite(a_b, c("a","b"), sep = "_") %>% filter(d < 1) %>% group_by(a_b) %>% summarise(n = n())
e <- c(1:31)
temp <- data.frame(a = a, b = b, d = d, e = e)
temp %>% unite(a_b, c("a","b"), sep = "_") %>% filter(d < 1,) %>% group_by(a_b) %>% summarise(n = n())
temp %>% unite(a_b, c("a","b"), sep = "_") %>% filter(d < 1, e < 28) %>% group_by(a_b) %>% summarise(n = n())
temp %>% unite(a_b, c("a","b"), sep = "_") %>% filter(d < 0, e < 28) %>% group_by(a_b) %>% summarise(n = n())
temp %>% unite(a_b, c("a","b"), sep = "_") %>% filter(d > 0, e < 28) %>% group_by(a_b) %>% summarise(n = n())
mean(21,
25,
29,
37,
22,
65,
20,
23,
21,
23,
42,
19,
23,
23,
27,
24,
24,
25,
25,
32,
23,
24,
21,
23,
21,
22,
24
)
sd(21,
25,
29,
37,
22,
65,
20,
23,
21,
23,
42,
19,
23,
23,
27,
24,
24,
25,
25,
32,
23,
24,
21,
23,
21,
22,
24
)
sd(c(21,
25,
29,
37,
22,
65,
20,
23,
21,
23,
42,
19,
23,
23,
27,
24,
24,
25,
25,
32,
23,
24,
21,
23,
21,
22,
24
))
rm(list = ls())
dev.off()
setwd("F:/Uni/Github/Breaking_symmetry/Analyses/Experiment_5_Unequal_Reward")
#### Gambling Study ####
# Plotting
# proportion of equal vs. unequal for each participant
# Accuracy data
# Standing positions
# Total earnings
#### Library ####
library(tidyverse)
# library(rstan)
library(gridExtra)
library(forcats)
library(ggthemes)
#### Constants ####
slab_size <- 0.46
#### load in data ####
load("scratch/data/df_part2")
load("scratch/data/df_part1")
# relevel factors
#### Summaries and Plotting ####
# proportion of equal vs unequal
plt_prop_gamble_types <- df_part2 %>%
mutate(Participant = as.factor(as.numeric(Participant))) %>%
group_by(Participant, Gamble_Type) %>%
summarise(n = n()) %>%
ggplot(aes(Participant, n, fill = Gamble_Type)) +
scale_fill_ptol() +
geom_bar(stat = "identity", width = 0.5) +
theme_bw() +
scale_y_discrete(limits = seq(0,12,2)) +
theme(legend.position = "bottom")
plt_prop_gamble_types$labels$y <- "No. of each split"
plt_prop_gamble_types$labels$fill <- "Split"
plt_prop_gamble_types
# probably want to save these as well
# add that in later
# choices made
plt_standing_pos <- df_part2 %>%
mutate(Participant = as.factor(as.numeric(Participant))) %>%
ggplot(aes(HoopDelta, Norm_Dist, colour = Gamble_Type)) +
scale_colour_ptol() +
geom_jitter() +
theme_bw() +
facet_wrap(~Participant, ncol = 4) +
theme(legend.position = "bottom",
strip.text.x = element_text(margin = margin(0.01,0,0.01,0, "mm")))
plt_standing_pos$labels$x <- "Delta (Metres)"
plt_standing_pos$labels$y <- "Nomalised Standing Position"
plt_standing_pos$labels$colour <- "Split"
plt_standing_pos
# plot together
grid.arrange(plt_prop_gamble_types,plt_standing_pos, ncol = 2)
plt_together <- arrangeGrob(plt_prop_gamble_types, plt_standing_pos, ncol = 2)
# save this
ggsave(file = "../../Figures/Experiment_5_Unequal_Reward/prop_and_position.png", plt_together)
# just plot everything with equal and unequal gamebles
plt_everything <- df_part2 %>%
mutate(Participant = as.factor(as.numeric(Participant))) %>%
filter(Norm_Dist < 1.001) %>%
ggplot(aes(HoopDelta, Norm_Dist, colour = Gamble_Type)) +
scale_colour_ptol() +
geom_jitter() +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = FALSE) +
theme_bw() +
theme(legend.position = "bottom")
plt_everything$labels$x <- "Delta (Metres)"
plt_everything$labels$y <- "Normalised Standing Position"
plt_everything
# With trial info?
plt_trials <- df_part2 %>%
mutate(Participant = as.factor(as.numeric(Participant))) %>%
unite(Colour_Gamble, c(Colour, Gamble_Type)) %>%
mutate(Colour_Gamble = fct_reorder(Colour_Gamble, HoopDelta)) %>%
ggplot(aes(Trial, Norm_Dist, colour = Colour_Gamble, shape = Colour_Gamble)) +
geom_point() +
theme_bw() +
scale_color_manual(name = "Gamble type and Distance",
values = rep(c("red", "yellow", "blue", "green"), each = 2)) +
scale_shape_manual(name = "Gamble type and Distance",
values = rep(c(15,17), 4)) +
facet_wrap(~Participant)
plt_trials$labels$y <- "Normalise Standing Position"
plt_trials
plt_trials
