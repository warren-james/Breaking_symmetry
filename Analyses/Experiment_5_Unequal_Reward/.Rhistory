end_dist = end_dist,
success = success))
}
}
}
}
# tidy
rm(b1,b2,beta1,beta2,dist,end_dist,iter,skew,spreads,success,temp)
#### Moving truck ####
# packages
library(tidyverse)
# some constants
# screen x res
x_res <- 1920
# first make sigmoid function
delta <- seq(1, x_res/2, 1)
a <- (15/max(delta))*-1
c <- max(delta)/2
success_rate <- 1/(1+exp(-a*(delta-c)))
plot(delta, success_rate, type = "l")
# tidy
rm(a,c, delta)
# make list of deltas
delta_list = seq(100, x_res/2, 100)
travel_time <- 100
max_speed <- (max(delta_list)/travel_time) - 1
# different distribution combinations
betas <- data.frame(skew = c("left", "centre", "right"),
beta1 = c(3, 3, 7),
beta2 = c(7, 3, 3))
spread_settings <- c(1, 10)
# setup data frame for loop
beta_frame <- data.frame(iter = numeric(),
skew = character(),
spread = numeric(),
delta = numeric(),
end_dist = numeric(),
success = numeric())
# now loop
for(skew in unique(betas$skew)){
# temp frame
temp <- betas[betas$skew == skew,]
# now loop through sizes
for(spreads in unique(spread_settings)){
beta1 <- temp$beta1 * spreads
beta2 <- temp$beta2 * spreads
# loop through dists
for(dist in unique(delta_list)){
for(iter in 1:1000){
# set speed
end_dist <- (round(rbeta(1,beta1,beta2)*max_speed) + 1) * travel_time
# set success
success <- 0
# check
if(end_dist >= dist){
success <- 1
end_dist <- dist
}
# add to data frame
beta_frame <- rbind(beta_frame, data.frame(iter = iter,
skew = skew,
spread = spreads,
delta = dist,
end_dist = end_dist,
success = success))
}
}
}
}
# tidy
rm(b1,b2,beta1,beta2,dist,end_dist,iter,skew,spreads,success,temp)
beta_frame %>%
mutate(spread = as.factor(spread)) %>%
group_by(skew, spread, delta) %>%
mutate(avg_success = mean(success)) %>%
ggplot(aes(delta, avg_success, colour = spread)) +
geom_point() +
stat_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = success),
se = F) +
scale_x_continuous(breaks = seq(100,900,200)) +
facet_wrap(~skew)
ggplot(aes(x = seq(0,1,0.01), y =  dbeta(x, 3,3))) + geom_line()
ggplot(data = data.frame(x = seq(0,1,0.01), y =  dbeta(x, 3,3)), aes(x,y)) + geom_line()
head(beta)
head(betas)
distr_plots <- data.frame(x = numeric(),
y = numeric())
# set x
x <- seq(0,1,0.01)
for(skew in unique(betas$skew)){
temp <- betas[betas$skew == skew,]
# now spread
for(spread in unique(spread_settings)){
y <- dbeta(x, temp$beta1*spread, temp$beta2*spread)
# add to frame
distr_plots <- rbind(distr_plots, data.frame(skew = skew,
spread = spread,
x = x,
y = y))
}
}
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x,y, colour = spread)) +
geom_line() +
facet_wrap(~skew)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(round(x*max_speed)+1,y, colour = spread)) +
geom_line() +
facet_wrap(~skew)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = spread)) +
geom_line() +
facet_wrap(~skew)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = skew)) +
geom_line() +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = skew)) +
geom_line() +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = skew, fill = skew)) +
geom_line() +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = skew)) +
geom_line() +
facet_wrap(~spread)
beta_frame %>%
mutate(spread = as.factor(spread)) %>%
group_by(skew, spread, delta) %>%
mutate(avg_success = mean(success)) %>%
ggplot(aes(delta, avg_success, colour = skew)) +
geom_point() +
stat_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = success),
se = F) +
scale_x_continuous(breaks = seq(100,900,200)) +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed,y, colour = skew)) +
geom_line() +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed + 1,y, colour = skew)) +
geom_line() +
facet_wrap(~spread)
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed + 1,y, colour = skew)) +
geom_line() +
scale_x_continuous(breaks = c(2,4,6,8)) +
facet_wrap(~spread)
beta_frame %>%
mutate(spread = as.factor(spread)) %>%
group_by(skew, spread, delta) %>%
mutate(avg_success = mean(success)) %>%
ggplot(aes(delta, avg_success, colour = skew)) +
geom_point() +
stat_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = success),
se = F) +
scale_x_continuous(breaks = seq(100,900,200)) +
facet_wrap(~spread)
# packages
library(tidyverse)
# some constants
# screen x res
x_res <- 1920
# first make sigmoid function
delta <- seq(1, x_res/2, 1)
a <- (15/max(delta))*-1
c <- max(delta)/2
success_rate <- 1/(1+exp(-a*(delta-c)))
plot(delta, success_rate, type = "l")
# tidy
rm(a,c, delta)
# make list of deltas
delta_list = seq(100, x_res/2, 100)
travel_time <- 100
max_speed <- (max(delta_list)/travel_time) - 1
# different distribution combinations
betas <- data.frame(skew = c("left", "centre", "right"),
beta1 = c(3, 3, 7),
beta2 = c(7, 3, 3))
spread_settings <- c(1, 10)
# setup data frame for loop
beta_frame <- data.frame(iter = numeric(),
skew = character(),
spread = numeric(),
delta = numeric(),
end_dist = numeric(),
success = numeric())
# now loop
for(skew in unique(betas$skew)){
# temp frame
temp <- betas[betas$skew == skew,]
# now loop through sizes
for(spreads in unique(spread_settings)){
beta1 <- temp$beta1 * spreads
beta2 <- temp$beta2 * spreads
# loop through dists
for(dist in unique(delta_list)){
for(iter in 1:1000){
# set speed
end_dist <- (round(rbeta(1,beta1,beta2)*max_speed) + 1) * travel_time
# set success
success <- 0
# check
if(end_dist >= dist){
success <- 1
end_dist <- dist
}
# add to data frame
beta_frame <- rbind(beta_frame, data.frame(iter = iter,
skew = skew,
spread = spreads,
delta = dist,
end_dist = end_dist,
success = success))
}
}
}
}
# tidy
rm(beta1,beta2,dist,end_dist,iter,skew,spreads,success,temp)
distr_plots <- data.frame(skew = character(),
spread = spread(),
x = numeric(),
y = numeric())
# set x
x <- seq(0,1,0.01)
for(skew in unique(betas$skew)){
temp <- betas[betas$skew == skew,]
# now spread
for(spread in unique(spread_settings)){
y <- dbeta(x, temp$beta1*spread, temp$beta2*spread)
# add to frame
distr_plots <- rbind(distr_plots, data.frame(skew = skew,
spread = spread,
x = x,
y = y))
}
}
distr_plots <- data.frame(skew = character(),
spread = spread(),
x = numeric(),
y = numeric())
distr_plots <- data.frame(skew = character(),
spread = character(),
x = numeric(),
y = numeric())
x <- seq(0,1,0.01)
for(skew in unique(betas$skew)){
temp <- betas[betas$skew == skew,]
# now spread
for(spread in unique(spread_settings)){
y <- dbeta(x, temp$beta1*spread, temp$beta2*spread)
# add to frame
distr_plots <- rbind(distr_plots, data.frame(skew = skew,
spread = spread,
x = x,
y = y))
}
}
# make plots of this
distr_plots %>%
mutate(spread = as.factor(spread)) %>%
ggplot(aes(x*max_speed + 1,y, colour = skew)) +
geom_line() +
scale_x_continuous(breaks = c(2,4,6,8)) +
facet_wrap(~spread)
beta_frame %>%
mutate(spread = as.factor(spread)) %>%
group_by(skew, spread, delta) %>%
mutate(avg_success = mean(success)) %>%
ggplot(aes(delta, avg_success, colour = skew)) +
geom_point() +
stat_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = success),
se = F) +
scale_x_continuous(breaks = seq(100,900,200)) +
facet_wrap(~spread)
mean(1,2,3)
mean(c(1,2,3))
first <- mean(c(1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0))
second <- mean(c(1,1,0,1,1,1,1,0,0,1,0,1,0,1,0,0))
second <- mean(c(1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,0))
second <- mean(c(1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,1))
second <- mean(c(1,0,1,1,1,1,0,0,1,0,1,0,0,0,1))
mean(first, second)
second <- mean(c(1,0,1,1,1,1,0,0,1,0,1,0,0,0,1,1))
mean(first, second)
(first + second)/2
mean(c(1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,0,1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,1))
mean(c(1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,0,1,0,1,0,0,0,1,1))
0.75
a <- 0.75
a <- 0.63
b <- 0.33
mean(a, b)
(a + b)/2
(0.3333333333333333333333 + 0.63333333333333333333333333333)/2
(0.3333333333333333333333 + 0.6666666666666666666666666)/2
rm(list = ls())
setwd("F:/Uni/Github/IndivDIffSearch/Manuscript/sup_mat")
knitr::opts_chunk$set(echo = TRUE)
# Packages
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(knitr)
# what data do we need?
# get line seg acc and rt
ls_acc_RT <- readRDS(file = "../../Scripts/lineseg/scratch/processedRTandAccData.Rda")
load("scratch/dat_ACS")
# filter out participants that were removed
dat_ACS <- dat_ACS %>%
filter(SubNo >= 5)
# probably want to work out things like accuracy etc?
# as in, exclude participants that are around chance level
# add in log2 RT
# there is a trial with RT 0 so make sure RT is greater than that too
dat_ACS <- dat_ACS %>%
mutate(log2_RT = log2(RT)) %>%
filter(RT > 0)
head(data_ACS)
head(da_ACS)
head(dat_ACS)
plt_ACS_mean_acc <- dat_ACS %>%
filter(Block_num > 0) %>%
mutate(sdev = sd(RT)) %>%
filter(RT > RT - 3*sdev,
RT < RT + 3*sdev,
RT > 300) %>%
group_by(SubNo) %>%
summarise(mean_acc = mean(Acc)) %>%
mutate(mean_acc_ov = mean(mean_acc)) %>%
ggplot(aes(SubNo, mean_acc)) +
geom_point() +
theme_bw()
plt_ACS_mean_acc$labels$x <- "Participant"
plt_ACS_mean_acc$labels$y <- "Mean Accuracy"
# plt3
plt_ACS_mean_acc
plt4 <- dat_ACS %>%
filter(Block_num > 0) %>%
mutate(sdev = sd(RT)) %>%
filter(RT > RT - 3*sdev,
RT < RT + 3*sdev,
RT > 300) %>%
group_by(SubNo) %>%
summarise(mean_RT = mean(RT),
Accuracy = mean(Acc)) %>%
ggplot(aes(mean_RT, Accuracy, label = SubNo)) +
geom_point() +
geom_text() +
theme_bw()
plt4
dev.off()
setwd("F:/Uni/Github/Breaking_symmetry/Analyses/Experiment_5_Unequal_Reward")
rm
rm(list = ls()
)
#### Gambling Study ####
# Plotting
# proportion of equal vs. unequal for each participant
# Accuracy data
# Standing positions
# Total earnings
#### Library ####
library(tidyverse)
# library(rstan)
library(gridExtra)
library(forcats)
#### Constants ####
slab_size <- 0.46
#### load in data ####
load("scratch/data/df_part2")
load("scratch/data/df_part1")
# relevel factors
#### Summaries and Plotting ####
# proportion of equal vs unequal
plt_prop_gamble_types <- df_part2 %>%
group_by(Participant, Gamble_Type) %>%
summarise(n = n()) %>%
ggplot(aes(Participant, n, fill = Gamble_Type)) +
geom_bar(stat = "identity", width = 0.5) +
theme_bw() +
scale_y_discrete(limits = seq(0,12,2)) +
theme(legend.position = "bottom")
plt_prop_gamble_types$labels$y <- "No. of each gamble type"
plt_prop_gamble_types
# probably want to save these as well
# add that in later
# choices made
plt_standing_pos <- df_part2 %>%
ggplot(aes(HoopDelta, Norm_Dist, colour = Gamble_Type)) +
geom_jitter() +
theme_bw() +
facet_wrap(~Participant, ncol = 4) +
theme(legend.position = "bottom",
strip.text.x = element_text(margin = margin(0.01,0,0.01,0, "mm")))
plt_standing_pos$labels$x <- "Delta (Metres)"
plt_standing_pos$labels$y <- "Nomalised Standing Position"
plt_standing_pos
# plot together
grid.arrange(plt_prop_gamble_types,plt_standing_pos, ncol = 2)
plt_together <- arrangeGrob(plt_prop_gamble_types, plt_standing_pos, ncol = 2)
# save this
ggsave(file = "../../Figures/Experiment_5_Unequal_Reward/prop_and_position.png", plt_together)
# just plot everything with equal and unequal gamebles
plt_everything <- df_part2 %>%
filter(Norm_Dist < 1.001) %>%
ggplot(aes(HoopDelta, Norm_Dist, colour = Gamble_Type)) +
geom_jitter() +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = FALSE) +
theme_bw() +
theme(legend.position = "bottom")
plt_everything$labels$x <- "Delta (Metres)"
plt_everything$labels$y <- "Normalised Standing Position"
plt_everything
plt_prop_gamble_types
rm(list = ls())
#### Gambling Study ####
# Plotting
# proportion of equal vs. unequal for each participant
# Accuracy data
# Standing positions
# Total earnings
#### Library ####
library(tidyverse)
# library(rstan)
library(gridExtra)
library(forcats)
#### Constants ####
slab_size <- 0.46
#### load in data ####
load("scratch/data/df_part2")
load("scratch/data/df_part1")
# relevel factors
#### Summaries and Plotting ####
# proportion of equal vs unequal
plt_prop_gamble_types <- df_part2 %>%
group_by(Participant, Gamble_Type) %>%
summarise(n = n()) %>%
ggplot(aes(Participant, n, fill = Gamble_Type)) +
geom_bar(stat = "identity", width = 0.5) +
theme_bw() +
scale_y_discrete(limits = seq(0,12,2)) +
theme(legend.position = "bottom")
plt_prop_gamble_types$labels$y <- "No. of each split"
plt_prop_gamble_types$labels$fill <- "Split"
plt_prop_gamble_types
# probably want to save these as well
# add that in later
# choices made
plt_standing_pos <- df_part2 %>%
ggplot(aes(HoopDelta, Norm_Dist, colour = Gamble_Type)) +
geom_jitter() +
theme_bw() +
facet_wrap(~Participant, ncol = 4) +
theme(legend.position = "bottom",
strip.text.x = element_text(margin = margin(0.01,0,0.01,0, "mm")))
plt_standing_pos$labels$x <- "Delta (Metres)"
plt_standing_pos$labels$y <- "Nomalised Standing Position"
plt_standing_pos$labels$colour <- "Split"
plt_standing_pos
# plot together
grid.arrange(plt_prop_gamble_types,plt_standing_pos, ncol = 2)
plt_together <- arrangeGrob(plt_prop_gamble_types, plt_standing_pos, ncol = 2)
ggsave(file = "../../Figures/Experiment_5_Unequal_Reward/prop_and_position.png", plt_together)
load("scratch/model_outputs/m_brms")
# get marginal effects
post <- marginal_effects(m_brms)
# make quick plots to show interaction
plot(post, plot = F)[[3]]
library(rstan)
library(brms)
# first one
load("scratch/model_outputs/m_brms")
# get marginal effects
post <- marginal_effects(m_brms)
# make quick plots to show interaction
plot(post, plot = F)[[3]]
plt_standing_pos
plt_prop_gamble_types
plt <- plot(post, plot = F)[[3]]
plt
plt$labels$x <- "Normalised Hoop Delta"
plt$labels$y <- "Normalised Standing Position"
plt$labels$colour <- "Split"
plt$labels$fill <- "Split"
PLT
plt
