fill = "red"),
alpha = .3) +
geom_ribbon(aes(x = sep_factor,
ymin = ymin_Best,
ymax = ymax_Best,
fill = "green"),
alpha = .3) +
scale_y_continuous("Expected Accuracy", labels = scales::percent_format(accuracy = 1)) +
scale_x_continuous("Slab Measures", breaks = c(1:6),
labels = c("~90%", "~50% - 1", "~50%", "~50% + 1", "~50% + 2", "~10%")) +
ggsci::scale_color_lancet() +
ggsci::scale_fill_lancet() +
geom_line(aes(group = interaction(Participant, Num_throws)), alpha = .5) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = .5)) +
facet_wrap(~Num_throws) +
guides(fill = F)
# save this
ggsave("../../Figures/Experiment_2_Two_throw/Accuracy_regions.png",
height = 3,
width = 5.6)
# plot this
df_acc %>%
group_by(Participant, slab_measures, Num_throws) %>%
summarise(Expected = mean(Expected),
Centre = mean(Centre),
Side = mean(Side)) %>%
ungroup() %>%
group_by(slab_measures) %>%
mutate(sep_factor = as.numeric(slab_measures),
Best = pmax(Expected, Centre, Side),
Worst = pmin(Expected, Centre, Side),
ymin_Best = min(Best)-.01,
ymax_Best = max(Best),
ymin_Worst = min(Worst),
ymax_Worst = max(Worst)) %>%
ggplot(aes(sep_factor, Expected)) +
geom_ribbon(aes(x = sep_factor,
ymin = ymin_Worst,
ymax = ymax_Worst,
fill = "red"),
alpha = .3) +
geom_ribbon(aes(x = sep_factor,
ymin = ymin_Best,
ymax = ymax_Best,
fill = "green"),
alpha = .3) +
scale_y_continuous("Expected Accuracy", labels = scales::percent_format(accuracy = 1)) +
scale_x_continuous("Slab Measures", breaks = c(1:6),
labels = c("~90%", "~50% - 1", "~50%", "~50% + 1", "~50% + 2", "~10%")) +
# ggsci::scale_color_lancet() +
# ggsci::scale_fill_lancet() +
scale_colour_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
geom_line(aes(group = interaction(Participant, Num_throws)), alpha = .5) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = .5)) +
facet_wrap(~Num_throws) +
guides(fill = F)
ggsave("../../Figures/Experiment_2_Two_throw/Accuracy_regions.png",
height = 3,
width = 5.6)
setwd("F:/Uni/Github/Breaking_symmetry/Analyses/Experiment_3_Hoop_size")
rm(list = ls())
#### Making figures ####
# For the two hoop size experiment
#### Library ####
library(tidyverse)
#### Load in data ####
load("scratch/df_part2_norm")
#### functions ####
mu <- function(a, b){
a/(a + b)
}
phi <- function(a, b){
1/((a*b)/(((a+b)^2)*(a+b+1)))
}
skew <- function(a, b){
((2*(b - a))*sqrt(a + b + 1))/((a + b + 2)*sqrt(a*b))
}
variance <- function(a, b){
(a*b)/(((a+b)^2)*(a+b+1))
}
# preprocessing
# check how much is removed by values greater than 1
norm_dat %>%
mutate(outside = ifelse(abs(norm_dist) > 1, 1, 0)) %>%
group_by(outside) %>%
summarise(n = n()/length(norm_dat$trial))
# filter out trials outside of the range (0.8% of trials)
# sort out some labels for distances
norm_dat %>%
group_by(participant) %>%
mutate(temp = as.numeric(as.factor(hoop_pos)),
slab_measures = factor(temp, labels = c("~90%", "~50% - 1", "~50%", "~50% + 1", "~50% + 2", "~10%"))) %>%
select(-temp) %>%
ungroup() %>%
filter(abs(norm_dist) <= 1) -> norm_dat
#### Plotting ####
#### box plots ####
# try making distance a factor so it's the same across participants
# kind of a nice plot...
plt_dst <- norm_dat %>%
# group_by(slab_measures, participant) %>%
group_by(slab_measures) %>%
mutate(mean_dist = mean(norm_dist)) %>%
ggplot(aes(norm_dist)) +
geom_histogram(aes(fill = slab_measures,
colour = slab_measures),
alpha = 0.3,
binwidth = .15) +
geom_vline(aes(xintercept = mean_dist),
linetype = "dashed",
alpha = 0.3) +
theme_bw() +
scale_x_continuous(breaks = c(-1, 0, 1),
labels = c("Big Hoop", "Centre", "Small Hoop")) +
theme(axis.text.x = element_text(angle = 45,
hjust = 1)) +
#facet_wrap(~slab_measures, scales = "free") +
facet_wrap(~slab_measures) +
see::scale_color_flat() +
see::scale_fill_flat()
plt_dst
# now do overall instead of by separation
plt_dst_overall <- norm_dat %>%
ggplot(aes(norm_dist)) +
geom_histogram() +
scale_x_continuous(breaks = c(-1, 0, 1),
labels = c("Big", "Centre", "Small")) +
theme_bw() +
theme(axis.title.x = element_blank())
plt_dst_overall
# new plot, looks kind of cool
# mean is a solid line, median is dashed
plt_dst2 <- norm_dat %>%
ggplot(aes(x = norm_dist,
y = slab_measures,
colour = slab_measures,
fill = slab_measures)) +
# ggridges::stat_density_ridges(quantile_fun = mean,
#                               quantile_lines = T,
#                               alpha = .15,
#                               linetype = "dashed") +
#jittered_points = T,position = "raincloud") +
ggridges::stat_density_ridges(quantile_lines = T,
quantiles = 2,
alpha = .15) +
see::scale_color_pizza() +
see::scale_fill_pizza() +
see::theme_blackboard() +
# see::scale_color_flat() +
# see::scale_fill_flat() +
# theme_bw() +
scale_x_continuous("Normalised Distance",
limits = c(-1, 1)) +
scale_y_discrete("")
plt_dst2$labels$colour <- "Hoop Delta"
plt_dst2$labels$fill <- "Hoop Delta"
plt_dst2
# try boxplot versions
plt_box <- norm_dat %>%
ggplot(aes(y = norm_dist,
x = slab_measures)) +
geom_boxplot(aes(fill = slab_measures,
colour = slab_measures),
alpha = .3) +
scale_y_continuous(labels = c("Big", "Centre", "Small"),
breaks = c(-1, 0, 1)) +
theme_bw() +
see::scale_color_flat() +
see::scale_fill_flat() +
theme(legend.position = "none",
axis.title.y = element_blank(),
axis.title.x = element_blank())
# see::theme_abyss() +
# see::scale_color_pizza() +
# see::scale_fill_pizza()
plt_box
# save
# ggsave("../../Figures/Experiment_3_Hoop_size/box_position.png",
#        width = 5.6,
#        height = 3.5)
# box plot sep measues with overall plot
box_sep <- plt_box[["data"]] %>%
select(norm_dist, slab_measures)
box_over <- plt_dst_overall[["data"]] %>%
select(norm_dist, slab_measures) %>%
mutate(slab_measures = "Overall") %>%
rbind(box_sep) %>%
ggplot(aes(slab_measures, norm_dist)) +
geom_boxplot(aes(fill = slab_measures,
colour = slab_measures),
alpha = .1) +
theme_bw() +
see::scale_color_flat() +
see::scale_fill_flat() +
scale_y_continuous(breaks = c(-1, 0, 1),
labels = c("Big", "Centre", "Small")) +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank())
box_over
# save
# ggsave("../../Figures/Experiment_3_Hoop_size/box_position_overall.png",
#        width = 5.6,
#        height = 3.5)
#### Fitting a distribution ####
# need to rescale things for a beta distribution
# to fit a beta dist
data_fitting <- norm_dat %>%
select(participant, slab_measures, norm_dist) %>%
mutate(rescaled = (norm_dist+1)/2,
rescaled = ifelse(rescaled == 1, 0.9999, rescaled)) %>%
group_by(slab_measures) %>%
summarise(ests = list(fitdistrplus::fitdist(rescaled,
"beta")$estimate)) %>%
unnest %>%
mutate(param = rep(letters[1:2], length(ests)/2)) %>%
spread(key = param, value = ests)
# lines to draw
x_vals <- seq(0,1,.05)
groups <- unique(data_fitting$slab_measures)
a <- data_fitting$a
b <- data_fitting$b
data_lines <- tibble(slab_measures = rep(groups, each = length(x_vals)),
a = rep(a, each = length(x_vals)),
b = rep(b, each = length(x_vals)),
x = rep(x_vals, length(groups)),
density = dbeta(x, a, b))
# plot this over the histograms?
norm_dat %>%
mutate(rescaled = (norm_dist + 1)/2,
rescaled = ifelse(rescaled == 1, 0.9999, rescaled)) %>%
ggplot(aes(rescaled,
# ggplot(aes(norm_dist,
fill = slab_measures,
colour = slab_measures)) +
# geom_segment(aes(x = 0.5, y = 0,
#                  xend = 0.5, yend = 4),
#              linetype = "dashed") +
geom_histogram(#aes(y = ..density..),
binwidth = .1,
alpha = .3) +
# geom_line(data = data_lines,
#           aes(x, density,
#           # aes(x, density*31,
#               colour = slab_measures)) +
facet_wrap(~slab_measures) +
scale_x_continuous(breaks = c(0, .5, 1),
labels = c("Big", "Centre", "Small")) +
# see::theme_modern() +
theme_bw() +
theme(legend.position = "none",
axis.title.y = element_blank(),
axis.title.x = element_blank()) +
# ggsci::scale_colour_lancet() +
# ggsci::scale_fill_lancet()
see::scale_color_flat() +
see::scale_fill_flat() # +
# geom_text(data = data_lines,
#           aes(1, 3.8,
#               label = paste("hat(mu)==", round(mu(a,b), 2))),
#           parse = T, hjust = 1,
#           size = 3) +
# geom_text(data = data_lines,
#           aes(1, 3.3,
#               label = paste("hat(phi)==", round(phi(a,b), 1))),
#           parse = T, hjust = 1,
#           size = 3) +
# scale_y_continuous("Density", sec.axis = sec_axis(trans = (~ . * 31), name = "Count")) # +
# stat_bin(binwidth= .1, geom="text", aes(label=..count..))
# save
ggsave("../../Figures/Experiment_3_Hoop_size/histogram_beta_fit.png",
width = 5.6,
height = 3)
# look at the mean and precision
data_lines %>%
group_by(slab_measures) %>%
summarise(a = mean(a),
b = mean(b)) %>%
mutate(mu = mu(a, b),
phi =  phi(a, b),
skew = skew(a, b))
# means are all above 0.5 which means they're more likely to move to
# the small hoop in this setup
# try a normal?
data_fitting_norm <- norm_dat %>%
group_by(slab_measures) %>%
summarise(ests = list(MASS::fitdistr(norm_dist,
"normal")$estimate)) %>%
unnest %>%
mutate(param = rep(c("mu", "sigma"), length(ests)/2)) %>%
spread(key = param,
value = ests)
# sort out data lines
x_vals <- seq(-1,1,.05)
groups <- unique(data_fitting_norm$slab_measures)
mu <- data_fitting_norm$mu
sigma <- data_fitting_norm$sigma
data_lines_norm <- tibble(slab_measures = rep(groups, each = length(x_vals)),
mu = rep(mu, each = length(x_vals)),
sigma = rep(sigma, each = length(x_vals)),
x = rep(x_vals, length(groups)),
density = dnorm(x, mu, sigma))
norm_dat %>%
ggplot(aes(norm_dist,
colour = slab_measures,
fill = slab_measures)) +
geom_histogram(binwidth = .15,
alpha = .3,
aes(y = ..density..)) +
geom_line(data = data_lines_norm,
aes(x, density)) +
theme_bw() +
theme(legend.position = "none") +
see::scale_color_flat() +
see::scale_fill_flat() +
facet_wrap(~slab_measures) +
geom_text(data = data_lines_norm,
aes(1, 2.5,
label = paste("hat(mu) ==", round(mu, 2))),
parse = T, hjust = 1) +
geom_text(data = data_lines_norm,
aes(1, 2,
label = paste("hat(sigma) ==", round(sigma, 2))),
parse = T, hjust = 1)
#### squared error ####
sq_dat <- norm_dat %>%
select(participant, hoop_pos, shift, subject_position, slab_measures) %>%
mutate(centre = 0,
error_centre = subject_position^2,
error_shift = (subject_position-shift)^2)
# box plot
sq_dat %>%
gather(c(error_centre, error_shift),
key = "Error_type",
value = "Error") %>%
ggplot(aes(slab_measures,
Error,
colour = Error_type,
fill = Error_type)) +
geom_boxplot(alpha = .3) +
see::scale_color_flat() +
see::scale_fill_flat()
# do the same again but with normalised data
sq_dat_norm <- norm_dat %>%
select(participant, hoop_pos, shift, subject_position, norm_dist, slab_measures) %>%
mutate(centre = 0,
norm_shift = shift/hoop_pos,
error_Centre = norm_dist^2,
error_Shift = (norm_dist - norm_shift)^2)
# make box plot
sq_dat_norm %>%
gather(c(error_Centre, error_Shift),
key = "Error_type",
value = "Error") %>%
separate(Error_type,
c("remove",
"Error_type"),
"_") %>%
select(-remove) %>%
ggplot(aes(slab_measures, Error,
colour = Error_type,
fill = Error_type)) +
geom_boxplot(alpha = .1) +
see::scale_color_flat() +
see::scale_fill_flat() +
theme_bw()
#### Expected Acc ####
# need to work out Expected acc and the regions for
# worst performance and best performance...
# shouldn't be too hard to do...
load("scratch/beanbagdat")
# get predictions for accuracy
m = glm(data=beanbagdat, acc~slab:hoop_size:participant, binomial)
# setting up dataframe
participants <- unique(beanbagdat$participant)
slabs <- seq(0, max(norm_dat$hoop_pos*2), .5)
hoop_sizes <- unique(beanbagdat$hoop_size)
acc_sep = tibble(participant = rep(participants, each = length(slabs) * length(hoop_sizes)),
slab = rep(slabs, length(participants) * length(hoop_sizes)),
hoop_size = rep(rep(hoop_sizes, each = length(slabs)), length(participants)))
#tidy
rm(participants, slabs, hoop_sizes)
# add in prediction
acc_sep <- acc_sep %>%
group_by(participant, hoop_size, slab) %>%
mutate(p = as.numeric(predict(m, data.frame(participant = participant,
slab = slab,
hoop_size = hoop_size),
type = "response")[1])) %>%
ungroup()
acc_small <- acc_sep %>%
filter(hoop_size == "small")
acc_large <- acc_sep %>%
filter(hoop_size == "large")
# getting expected, side(both), and centre acc
# expected
acc_small_exp <- acc_small %>%
mutate(small_dist = slab,
small_exp_acc = p) %>%
select(participant, small_dist, small_exp_acc)
acc_large_exp <- acc_large %>%
mutate(large_dist = slab,
large_exp_acc = p) %>%
select(participant, large_dist, large_exp_acc)
# centre
acc_small_centre <- acc_small %>%
mutate(c_sd = slab,
small_centre_acc = p) %>%
select(participant, small_centre_acc, c_sd)
acc_large_centre <- acc_large %>%
mutate(c_ld = slab,
large_centre_acc = p) %>%
select(participant, large_centre_acc, c_ld)
# side - small
acc_small_small <- acc_small %>%
mutate(sf_sd = slab,
sf_sd_acc = p) %>%
select(participant, sf_sd, sf_sd_acc)
acc_large_small <- acc_large %>%
mutate(sf_ld = slab,
sf_ld_acc = p) %>%
select(participant, sf_ld, sf_ld_acc)
# side - large
acc_small_large <- acc_small %>%
mutate(lf_sd = slab,
lf_sd_acc = p) %>%
select(participant, lf_sd, lf_sd_acc)
acc_large_large <- acc_large %>%
mutate(lf_ld = slab,
lf_ld_acc = p) %>%
select(participant, lf_ld, lf_ld_acc)
# combine all
df_acc <- norm_dat %>%
select(participant,trial, subject_position, hoop_pos, small_pos, large_pos, accuracy) %>%
mutate(small_dist = abs(small_pos - subject_position),
large_dist = abs(large_pos - subject_position),
c_sd = hoop_pos,
c_ld = hoop_pos,
sf_sd = 0,
sf_ld = 2 * hoop_pos,
lf_sd = 2 * hoop_pos,
lf_ld = 0) %>%
merge(acc_small_exp) %>%
merge(acc_large_exp) %>%
merge(acc_small_centre) %>%
merge(acc_large_centre) %>%
merge(acc_small_small) %>%
merge(acc_small_large) %>%
merge(acc_large_small) %>%
merge(acc_large_large) %>%
rowwise() %>%
mutate(Expected = mean(c(small_exp_acc, large_exp_acc)),
Centre = mean(c(small_centre_acc, large_centre_acc)),
Side_large = mean(c(lf_sd_acc, lf_ld_acc)),
Side_small = mean(c(sf_sd_acc, sf_ld_acc))) %>%
ungroup() %>%
select(participant, subject_position, hoop_pos, accuracy, Expected, Centre, Side_large, Side_small) %>%
group_by(participant) %>%
mutate(norm_dist = subject_position/hoop_pos,
slab_measures = factor(hoop_pos, labels = c("~90%", "~50% - 1", "~50%", "~50% + 1", "~50% + 2", "~10%")),
Side_large = ifelse(Side_large < .5, .5, Side_large),
Side_small = ifelse(Side_small < .5, .5, Side_small))
#### Plot accuracy ####
plt_acc_regions <- df_acc %>%
group_by(participant, slab_measures) %>%
summarise(# Actual = mean(accuracy),
Expected = mean(Expected),
Centre = mean(Centre),
Side_L = mean(Side_large),
Side_S = mean(Side_small),
Optimal = pmax(Centre, Side_L, Side_S)) %>%
ungroup() %>%
group_by(slab_measures) %>%
mutate(sep_factor = as.numeric(slab_measures),
Best = pmax(Expected, Centre, Side_S, Side_L),
Worst = pmin(Expected, Centre, Side_S, Side_S),
ymin_Best = min(Best)-.01,
ymax_Best = max(Best),
ymin_Worst = min(Worst),
ymax_Worst = max(Worst)) %>%
ggplot(aes(x = sep_factor, Expected)) +
geom_ribbon(aes(x = sep_factor,
ymin = ymin_Worst,
ymax = ymax_Worst,
fill = "red"),
alpha = .3) +
geom_ribbon(aes(x = sep_factor,
ymin = ymin_Best,
ymax = ymax_Best,
fill = "green"),
alpha = .3) +
geom_line(aes(group = participant), alpha = .3) +
scale_y_continuous("Expected Accuracy", labels = scales::percent_format(accuracy = 1)) +
scale_x_continuous("Slab Measures", breaks = c(1:6),
labels = c("~90%", "~50% - 1", "~50%", "~50% + 1", "~50% + 2", "~10%")) +
# see::scale_color_flat() +
# see::scale_fill_flat() +
# ggsci::scale_fill_lancet() +
# ggsci::scale_colour_lancet() +
scale_colour_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
# see::scale_color_pizza_d() +
# see::scale_fill_pizza() +
guides(fill = F) +
theme_bw()
plt_acc_regions
ggsave(plt_acc_regions, file = "../../Figures/Experiment_3_Hoop_size/plt_acc_regions.png",
width = 5.6,
height = 3)
