n = n,
iter = iter)
iter = 1
temp <- tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n),
n = n,
iter = iter)
head(temp)
df <- tibble(draws = numeric(),
group = character(),
n = numeric(),
iter = numeric())
#### simulation ####
for(iter in 1:n_sims){
for(n in n_subj){
df <- rbind(df, tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n),
n = n,
iter = iter)
}
}
for(iter in 1:n_sims){
for(n in n_subj){
df <- rbind(df, tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n),
n = n,
iter = iter))
}
}
df <- tibble(draws = numeric(),
group = character(),
n = numeric(),
iter = numeric())
#### simulation ####
for(iter in 1:n_sims){
print(paste(iter, "/", n_sims, ": ", (iter/n_sims)*100, "%", sep = ""))
for(n in n_subj){
df <- rbind(df, tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n),
n = n,
iter = iter))
}
}
group_a_mu <- 1
group_b_mu <- 2
group_a_sd <- 1
group_b_sd <- 1
# other parameters
n_subj <- seq(1, 30, 2) # gives use a list of n's
n_sims <- 1000     # how many times do we want to run the simulation
groups <- c("a","b") # label our groups
# data frame to keep track
df <- tibble(draws = numeric(),
group = character(),
n = numeric(),
iter = numeric())
#### simulation ####
for(iter in 1:n_sims){
print(paste(iter, "/", n_sims, ": ", (iter/n_sims)*100, "%", sep = ""))
for(n in n_subj){
df <- rbind(df, tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n),
n = n,
iter = iter))
}
}
head(df)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = mean(sd))
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = mean(draws))
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws))
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
na.omit()
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
na.omit() %>%
gather(mu:sd,
key = "measure",
value = "value")
n_subj <- seq(5, 30, 5) # gives use a list of n's
n_sims <- 1000     # how many times do we want to run the simulation
groups <- c("a","b") # label our groups
# data frame to keep track
df <- tibble(draws = numeric(),
group = character(),
n = numeric(),
iter = numeric())
#### simulation ####
for(iter in 1:n_sims){
print(paste(iter, "/", n_sims, ": ", (iter/n_sims)*100, "%", sep = ""))
for(n in n_subj){
df <- rbind(df, tibble(draws = c(rnorm(n, group_a_mu, group_a_sd),
rnorm(n, group_b_mu, group_b_sd)),
group = rep(groups, each = n),
n = n,
iter = iter))
}
}
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
gather(mu:sd,
key = "measure",
value = "value")
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
gather(mu:sd,
key = "measure",
value = "value") %>%
ggplot(aes(value,
fill = group,
colour = group)) +
geom_density(alpha = .3) +
facet_grid(measure, n)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
gather(mu:sd,
key = "measure",
value = "value") %>%
ggplot(aes(value,
fill = group,
colour = group)) +
geom_density(alpha = .3) +
facet_grid(measure ~ n)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
# gather(mu:sd,
#        key = "measure",
#        value = "value") %>%
ggplot(aes(mu,
fill = group,
colour = group)) +
geom_density(alpha = .3) +
facet_wrap(~n)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
# gather(mu:sd,
#        key = "measure",
#        value = "value") %>%
ggplot(aes(mu,
fill = m,
colour = n)) +
geom_density(alpha = .3) +
facet_wrap(~group)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
# gather(mu:sd,
#        key = "measure",
#        value = "value") %>%
ggplot(aes(mu,
fill = n,
colour = n)) +
geom_density(alpha = .3) +
facet_wrap(~group)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
# gather(mu:sd,
#        key = "measure",
#        value = "value") %>%
ggplot(aes(mu,
fill = as.factor(n),
colour = as.factor(n))) +
geom_density(alpha = .3) +
facet_wrap(~group)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
# gather(mu:sd,
#        key = "measure",
#        value = "value") %>%
ggplot(aes(mu,
fill = as.factor(n),
colour = as.factor(n))) +
geom_density(alpha = .2) +
facet_wrap(~group)
df %>%
group_by(iter, n, group) %>%
summarise(mu = mean(draws),
sd = sd(draws)) %>%
# gather(mu:sd,
#        key = "measure",
#        value = "value") %>%
ggplot(aes(mu,
fill = group,
colour = group)) +
geom_density(alpha = .2) +
facet_wrap(~n)
c(21, 23, 25, 22, 20, 22, 22, 30, 25, 22, 21, 20, 23, 22, 24, 23, 22, 22, 22)
a <- c(21, 23, 25, 22, 20, 22, 22, 30, 25, 22, 21, 20, 23, 22, 24, 23, 22, 22, 22)
mean(a)
range(a)
rm(list = ls())
setwd("F:/Uni/Github/Breaking_symmetry/Analyses/Experiment_3_Hoop_size")
#### Making figures ####
# For the two hoop size experiment
#### Library ####
library(tidyverse)
#### Load in data ####
load("scratch/df_part2_norm")
#### functions ####
mu <- function(a, b){
a/(a + b)
}
phi <- function(a, b){
1/((a*b)/(((a+b)^2)*(a+b+1)))
}
skew <- function(a, b){
((2*(b - a))*sqrt(a + b + 1))/((a + b + 2)*sqrt(a*b))
}
variance <- function(a, b){
(a*b)/(((a+b)^2)*(a+b+1))
}
# preprocessing
# check how much is removed by values greater than 1
norm_dat %>%
mutate(outside = ifelse(abs(norm_dist) > 1, 1, 0)) %>%
group_by(outside) %>%
summarise(n = n()/length(norm_dat$trial))
# filter out trials outside of the range (0.8% of trials)
# sort out some labels for distances
norm_dat %>%
group_by(participant) %>%
mutate(temp = as.numeric(as.factor(hoop_pos)),
slab_measures = factor(temp, labels = c("~90%", "~50% - 1", "~50%", "~50% + 1", "~50% + 2", "~10%"))) %>%
select(-temp) %>%
ungroup() %>%
filter(abs(norm_dist) <= 1) -> norm_dat
plt_dst2 <- norm_dat %>%
ggplot(aes(x = norm_dist,
y = slab_measures,
colour = slab_measures,
fill = slab_measures)) +
# ggridges::stat_density_ridges(quantile_fun = mean,
#                               quantile_lines = T,
#                               alpha = .15,
#                               linetype = "dashed") +
#jittered_points = T,position = "raincloud") +
ggridges::stat_density_ridges(quantile_lines = T,
quantiles = 2,
alpha = .15) +
see::scale_color_pizza() +
see::scale_fill_pizza() +
see::theme_blackboard() +
# see::scale_color_flat() +
# see::scale_fill_flat() +
# theme_bw() +
scale_x_continuous("Normalised Distance",
limits = c(-1, 1)) +
scale_y_discrete("")
plt_dst2$labels$colour <- "Hoop Delta"
plt_dst2$labels$fill <- "Hoop Delta"
plt_dst2
data_fitting <- norm_dat %>%
select(participant, slab_measures, norm_dist) %>%
mutate(rescaled = (norm_dist+1)/2,
rescaled = ifelse(rescaled == 1, 0.9999, rescaled)) %>%
group_by(slab_measures) %>%
summarise(ests = list(fitdistrplus::fitdist(rescaled,
"beta")$estimate)) %>%
unnest %>%
mutate(param = rep(letters[1:2], length(ests)/2)) %>%
spread(key = param, value = ests)
# lines to draw
x_vals <- seq(0,1,.05)
groups <- unique(data_fitting$slab_measures)
a <- data_fitting$a
b <- data_fitting$b
data_lines <- tibble(slab_measures = rep(groups, each = length(x_vals)),
a = rep(a, each = length(x_vals)),
b = rep(b, each = length(x_vals)),
x = rep(x_vals, length(groups)),
density = dbeta(x, a, b))
# plot this over the histograms?
norm_dat %>%
mutate(rescaled = (norm_dist + 1)/2,
rescaled = ifelse(rescaled == 1, 0.9999, rescaled)) %>%
ggplot(aes(rescaled,
# ggplot(aes(norm_dist,
fill = slab_measures,
colour = slab_measures)) +
geom_segment(aes(x = 0.5, y = 0,
xend = 0.5, yend = 4),
linetype = "dashed") +
geom_histogram(aes(y = ..density..),
binwidth = .1,
alpha = .3) +
geom_line(data = data_lines,
aes(x, density,
# aes(x, density*31,
colour = slab_measures)) +
facet_wrap(~slab_measures) +
scale_x_continuous(breaks = c(0, .5, 1),
labels = c("Big", "Centre", "Small")) +
# see::theme_modern() +
theme_bw() +
theme(legend.position = "none",
#       axis.title.y = element_blank(),
axis.title.x = element_blank()) +
see::scale_color_flat() +
see::scale_fill_flat() +
geom_text(data = data_lines,
aes(1, 3.8,
label = paste("hat(mu)==", round(mu(a,b), 2))),
parse = T, hjust = 1,
size = 3) +
geom_text(data = data_lines,
aes(1, 3.3,
label = paste("hat(phi)==", round(phi(a,b), 1))),
parse = T, hjust = 1,
size = 3) +
scale_y_continuous("Density", sec.axis = sec_axis(trans = (~ . * 31), name = "Count")) # +
# stat_bin(binwidth= .1, geom="text", aes(label=..count..))
norm_dat %>%
mutate(rescaled = (norm_dist + 1)/2,
rescaled = ifelse(rescaled == 1, 0.9999, rescaled)) %>%
ggplot(aes(rescaled,
# ggplot(aes(norm_dist,
fill = slab_measures,
colour = slab_measures)) +
geom_segment(aes(x = 0.5, y = 0,
xend = 0.5, yend = 4),
linetype = "dashed") +
geom_histogram(aes(y = ..density..),
binwidth = .1,
alpha = .3) +
geom_line(data = data_lines,
aes(x, density,
# aes(x, density*31,
colour = slab_measures)) +
facet_wrap(~slab_measures) +
scale_x_continuous(breaks = c(0, .5, 1),
labels = c("Big", "Centre", "Small")) +
# see::theme_modern() +
theme_bw() +
theme(legend.position = "none",
#       axis.title.y = element_blank(),
axis.title.x = element_blank()) +
see::scale_color_flat() +
see::scale_fill_flat()
norm_dat %>%
mutate(rescaled = (norm_dist + 1)/2,
rescaled = ifelse(rescaled == 1, 0.9999, rescaled)) %>%
ggplot(aes(rescaled,
# ggplot(aes(norm_dist,
fill = slab_measures,
colour = slab_measures)) +
# geom_segment(aes(x = 0.5, y = 0,
#                  xend = 0.5, yend = 4),
#              linetype = "dashed") +
geom_histogram(#aes(y = ..density..),
binwidth = .1,
alpha = .3) +
# geom_line(data = data_lines,
#           aes(x, density,
#           # aes(x, density*31,
#               colour = slab_measures)) +
facet_wrap(~slab_measures) +
scale_x_continuous(breaks = c(0, .5, 1),
labels = c("Big", "Centre", "Small")) +
# see::theme_modern() +
theme_bw() +
theme(legend.position = "none",
#       axis.title.y = element_blank(),
axis.title.x = element_blank()) +
see::scale_color_flat() +
see::scale_fill_flat()
# plot this over the histograms?
norm_dat %>%
mutate(rescaled = (norm_dist + 1)/2,
rescaled = ifelse(rescaled == 1, 0.9999, rescaled)) %>%
ggplot(aes(rescaled,
# ggplot(aes(norm_dist,
fill = slab_measures,
colour = slab_measures)) +
# geom_segment(aes(x = 0.5, y = 0,
#                  xend = 0.5, yend = 4),
#              linetype = "dashed") +
geom_histogram(#aes(y = ..density..),
binwidth = .1,
alpha = .3) +
# geom_line(data = data_lines,
#           aes(x, density,
#           # aes(x, density*31,
#               colour = slab_measures)) +
facet_wrap(~slab_measures) +
scale_x_continuous(breaks = c(0, .5, 1),
labels = c("Big", "Centre", "Small")) +
# see::theme_modern() +
theme_bw() +
theme(legend.position = "none",
axis.title.y = element_blank(),
axis.title.x = element_blank()) +
see::scale_color_flat() +
see::scale_fill_flat() # +
ggsave("../../Figures/Experiment_3_Hoop_size/histogram_beta_fit.png",
width = 5.6,
height = 5)
rm(list = ls())
#### Problem ####
# There are 10 prisoners numbered 1-10
# 10 playing cards (1:10) are placed in draws randomly labeled 1 to 10
# in order to escape, all 10 prisoners must find the card with their label
# however, they can only look in 5 draws
# how can they win?
#### Packages ####
library(tidyverse)
#### Random behaviour ####
# First of all, let's make some random choices and see how often they survive
# set some parameters for the simulation
n_prisoners <- 100 # NB should be divisible by 2
n_guesses <- n_prisoners/2
n_simulations <- 1000
# store results
df_rand <- tibble(iter = numeric(),
all_live = numeric())
# simulate random choices
for(ii in 1:n_simulations){
# generate a random order of cards
cards <- sample(seq(1,n_prisoners,1),n_prisoners, replace = F)
# keep track of how many find their card
count <- 0
for(prisoner in 1:n_prisoners){
# they pick their cards
picks <- sample(cards, n_guesses)
# did they find themselves?
if(prisoner %in% picks){
count <- count + 1
}
}
if(count == 10){
success <- 1
} else {
success <- 0
}
df_rand <- rbind(df_rand, tibble(iter = ii,
all_live = success))
}
#### Strategy ####
# can we do better?
# Strategy: pick the drawer of your number, if it's your number, you're set,
# if not, pick the draw of the number you just opened
# repeat until you've made 5 guesses
# let's setup data frame
df_strat <- tibble(iter = numeric(),
all_live = numeric())
possible_guesses <- seq(1,n_prisoners,1)
# now loop through
for(ii in 1:n_simulations){
# generate a random order of cards
cards <- sample(seq(1,n_prisoners,1),n_prisoners, replace = F)
# keep track of how many find their card
count <- 0
# now simulate participants doing the strategy
for(prisoner in 1:n_prisoners){
# initiate guessing val
guesses <- c()
guess <- prisoner
for(trial in 1:n_guesses){
card_drawn <- cards[guess]
if(card_drawn %in% guesses){
guess <- sample(possible_guesses[!possible_guesses %in% guesses], 1)
}
guesses <- c(guesses, card_drawn)
guess <- card_drawn
}
if(prisoner %in% guesses){
count <- count + 1
}
}
if(count == 10){
success <- 1
} else {
success <- 0
}
df_strat <- rbind(df_strat, tibble(iter = ii,
all_live = success))
}
# how many lived?
paste("Percent that won in Random: ", (sum(df_rand$all_live)/n_simulations)*100, "%", sep = "")
paste("Percent that won in Strat: ", (sum(df_strat$all_live)/n_simulations)*100, "%", sep = "")
