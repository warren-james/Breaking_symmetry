beanbagdat <- beanbagdat %>%
mutate(participant = paste(experimenter, participant, sep = "_")) %>%
group_by(participant, slab, hoop_size) %>%
summarise(inhoop = sum(inhoop)) %>%
mutate(acc = inhoop/18,
off_set = log((1-0.01)/0.01),
participant_num = as.numeric(participant))
#### level 3 - 2nd Semester 2017/18 ####
# Part 1 Accuracy measure script
# Script for the Hoop Size version of the throwing task
# This script reads in the data for participants' accuracy
# in the first session.
# Written by Warren James
#### Libraries needed ####
library(tidyverse)
#### Constants ####
Hoop_size <- 0.46
#### Created functions ####
# This is used to get average distance between large and small hoop
# accuracy.
get_avg <- function(df, index, participant){
sum(df[,index][df[,1] == participant])/2
}
#### read in dataset ####
beanbagdat <- read.csv("data/Part_1_measures.txt", sep = "\t")
#### collapse across directions ####
# sort data
beanbagdat <- beanbagdat %>%
mutate(participant = paste(experimenter, participant, sep = "_")) %>%
group_by(participant, slab, hoop_size) %>%
summarise(inhoop = sum(inhoop)) %>%
mutate(acc = inhoop/18,
off_set = log((1-0.01)/0.01),
participant_num = as.numeric(participant))
View(beanbagdat)
#### level 3 - 2nd Semester 2017/18 ####
# Part 1 Accuracy measure script
# Script for the Hoop Size version of the throwing task
# This script reads in the data for participants' accuracy
# in the first session.
# Written by Warren James
#### Libraries needed ####
library(tidyverse)
#### Constants ####
Hoop_size <- 0.46
#### Created functions ####
# This is used to get average distance between large and small hoop
# accuracy.
get_avg <- function(df, index, participant){
sum(df[,index][df[,1] == participant])/2
}
#### read in dataset ####
beanbagdat <- read.csv("data/Part_1_measures.txt", sep = "\t")
#### collapse across directions ####
# sort data
beanbagdat <- beanbagdat %>%
mutate(participant = paste(experimenter, participant, sep = "_")) %>%
group_by(participant, slab, hoop_size) %>%
summarise(inhoop = sum(inhoop)) %>%
ungroup() %>%
mutate(acc = inhoop/18,
off_set = log((1-0.01)/0.01),
participant_num = as.numeric(participant))
View(beanbagdat)
beanbagdat <- read.csv("data/Part_1_measures.txt", sep = "\t")
# num_particiapnts
num_particiapnts <- length(unique(beanbagdat$participant))
length(unique(beanbagdat$participant))
length(unique(paste(beanbagdat$experimenter,beanbagdat$participant))
)
num_particiapnts <- length(unique(paste(beanbagdat$experimenter,
beanbagdat$participant)))
# sort data
beanbagdat <- beanbagdat %>%
mutate(participant = paste(experimenter, participant, sep = "_")) %>%
group_by(participant, slab, hoop_size) %>%
summarise(inhoop = sum(inhoop)) %>%
ungroup() %>%
mutate(acc = inhoop/18,
off_set = log((1-0.01)/0.01),
participant_num = factor(particiapnt,
seq(1:num_particiapnts, 1)))
beanbagdat <- read.csv("data/Part_1_measures.txt", sep = "\t")
# num_particiapnts
num_particiapnts <- length(unique(paste(beanbagdat$experimenter,
beanbagdat$participant)))
#### collapse across directions ####
# sort data
beanbagdat <- beanbagdat %>%
mutate(participant = paste(experimenter, participant, sep = "_")) %>%
group_by(participant, slab, hoop_size) %>%
summarise(inhoop = sum(inhoop)) %>%
ungroup() %>%
mutate(acc = inhoop/18,
off_set = log((1-0.01)/0.01),
participant_num = factor(participant,
seq(1:num_particiapnts, 1)))
#### collapse across directions ####
7
# sort data
beanbagdat <- beanbagdat %>%
mutate(participant = paste(experimenter, participant, sep = "_")) %>%
group_by(participant, slab, hoop_size) %>%
summarise(inhoop = sum(inhoop)) %>%
ungroup() %>%
mutate(acc = inhoop/18,
off_set = log((1-0.01)/0.01),
participant_num = factor(participant,
seq(1, num_particiapnts, 1)))
View(beanbagdat)
beanbagdat <- read.csv("data/Part_1_measures.txt", sep = "\t")
# num_particiapnts
num_particiapnts <- length(unique(paste(beanbagdat$experimenter,
beanbagdat$participant)))
#### collapse across directions ####
# sort data
beanbagdat <- beanbagdat %>%
mutate(participant = paste(experimenter, participant, sep = "_")) %>%
group_by(participant, slab, hoop_size) %>%
summarise(inhoop = sum(inhoop)) %>%
ungroup() %>%
mutate(acc = inhoop/18,
off_set = log((1-0.01)/0.01),
participant_num = factor(participant,
labeles = c(seq(1, num_particiapnts, 1))))
beanbagdat <- read.csv("data/Part_1_measures.txt", sep = "\t")
# num_particiapnts
num_particiapnts <- length(unique(paste(beanbagdat$experimenter,
beanbagdat$participant)))
#### collapse across directions ####
# sort data
beanbagdat <- beanbagdat %>%
mutate(participant = paste(experimenter, participant, sep = "_")) %>%
group_by(participant, slab, hoop_size) %>%
summarise(inhoop = sum(inhoop)) %>%
ungroup() %>%
mutate(acc = inhoop/18,
off_set = log((1-0.01)/0.01),
participant_num = factor(participant,
labels = c(seq(1, num_particiapnts, 1))))
View(beanbagdat)
#### level 3 - 2nd Semester 2017/18 ####
# Part 1 Accuracy measure script
# Script for the Hoop Size version of the throwing task
# This script reads in the data for participants' accuracy
# in the first session.
# Written by Warren James
#### Libraries needed ####
library(tidyverse)
#### Constants ####
Hoop_size <- 0.46
#### Created functions ####
# This is used to get average distance between large and small hoop
# accuracy.
get_avg <- function(df, index, participant){
sum(df[,index][df[,1] == participant])/2
}
#### read in dataset ####
beanbagdat <- read.csv("data/Part_1_measures.txt", sep = "\t")
# num_particiapnts
num_particiapnts <- length(unique(paste(beanbagdat$experimenter,
beanbagdat$participant)))
#### collapse across directions ####
# sort data
beanbagdat <- beanbagdat %>%
mutate(participant = paste(experimenter, participant, sep = "_")) %>%
group_by(participant, slab, hoop_size) %>%
summarise(inhoop = sum(inhoop)) %>%
ungroup() %>%
mutate(acc = inhoop/18,
off_set = log((1-0.01)/0.01),
participant_num = factor(participant,
labels = c(seq(1, num_particiapnts, 1))))
#### get accuracy over distance, for each participant and hoop size ####
m = glm(data=beanbagdat, acc~slab:hoop_size:participant, binomial, offset=off_set)
beanbagdat$p = predict(m, type="response")
# tidy up
rm(m)
#### make the plots ####
plt <- ggplot(beanbagdat, aes(x=slab*Hoop_size,
y=acc,
colour = hoop_size))
plt <- plt + geom_point(position=position_jitter(width=.1,height=.0))
plt <- plt + theme_bw()
plt <- plt + scale_y_continuous(name="Accuracy")
plt <- plt + facet_wrap(~participant_num, nrow=4)
plt <- plt + scale_x_continuous(name="Delta (Metres)",
limit=c(0,12),
breaks = c(3,6,9,12))
plt <- plt + geom_smooth(method=glm,
method.args = list(family = "binomial"),
aes(y=p),
fullrange=T, se=F)
plt <- plt + scale_colour_discrete(name = "Hoop Size",
labels=c("Large", "Small"))
# plt <- plt + ggtitle("Session 1 accuracy measures")
# plt <- plt + theme(plot.title = element_text(hjust = 0.5))
plt <- plt + theme(legend.position = "bottom")
plt
beanbagdat %>%
ggplot(aes(slab*Hoop_size,
acc,
colour = hoop_size)) +
geom_point(position = position_jitter(width = .1, height = 0)) +
theme_bw() +
see::scale_color_flat("Hoop Size",
labels = c("Large", "Small")) +
facet_wrap(~participant, nrom = 4) +
geom_smooth(method = glm,
method.args = list(family = "binomial"),
fulraneg = T, se = F) +
theme(legend.position = "bottom")
beanbagdat %>%
ggplot(aes(slab*Hoop_size,
acc,
colour = hoop_size)) +
geom_point(position = position_jitter(width = .1, height = 0)) +
theme_bw() +
see::scale_color_flat("Hoop Size",
labels = c("Large", "Small")) +
facet_wrap(~participant, nrom = 4) +
geom_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = p),
fulraneg = T, se = F) +
theme(legend.position = "bottom")
beanbagdat %>%
ggplot(aes(slab*Hoop_size,
acc,
colour = hoop_size)) +
geom_point(position = position_jitter(width = .1, height = 0)) +
theme_bw() +
see::scale_color_flat() +
facet_wrap(~participant, nrom = 4) +
geom_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = p),
fulraneg = T, se = F) +
theme(legend.position = "bottom")
beanbagdat %>%
ggplot(aes(slab*Hoop_size,
acc,
colour = hoop_size)) +
geom_point(position = position_jitter(width = .1, height = 0)) +
theme_bw() +
see::scale_color_flat() +
facet_wrap(~participant, nrow = 4) +
geom_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = p),
fulraneg = T, se = F) +
theme(legend.position = "bottom")
beanbagdat %>%
ggplot(aes(slab*Hoop_size,
acc,
colour = hoop_size)) +
geom_point(position = position_jitter(width = .1, height = 0)) +
theme_bw() +
see::scale_color_flat() +
facet_wrap(~participant, nrow = 4) +
geom_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = p),
fulrange = T, se = F) +
theme(legend.position = "bottom")
beanbagdat %>%
ggplot(aes(slab*Hoop_size,
acc,
colour = hoop_size)) +
geom_point(position = position_jitter(width = .1, height = 0)) +
theme_bw() +
see::scale_color_flat() +
facet_wrap(~participant, nrow = 4) +
geom_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = p),
fullrange = T, se = F) +
theme(legend.position = "bottom")
beanbagdat %>%
ggplot(aes(slab*Hoop_size,
acc,
colour = hoop_size)) +
geom_point(position = position_jitter(width = .1, height = 0)) +
theme_bw() +
see::scale_color_flat() +
facet_wrap(~participant_num, nrow = 4) +
geom_smooth(method = glm,
method.args = list(family = "binomial"),
aes(y = p),
fullrange = T, se = F) +
theme(legend.position = "bottom")
??scale_colour_flat
test <- nplr(beanbagdat$inhoop, beanbagdat$slab)
test <- nplr(beanbagdat$slab, beanbagdat$inhoop)
range(beanbagdat$inhoop)
test <- nplr(beanbagdat$slab, beanbagdat$acc)
test
plot(test)
View(test)
plot(nlpr(beanbagdat$slab, beanbagdat$acc, npars = 4))
plot(nplr(beanbagdat$slab, beanbagdat$acc, npars = 4))
test2 <- nplr(beanbagdat$slab, beanbagdat$acc, npars = 4))
test2 <- nplr(beanbagdat$slab, beanbagdat$acc, npars = 4)
plot(test2)
plot(test)
p_list <- split(beanbagdat, beanbagdat$participant)
p_list
models <- lapply(p_list, function(tmp){
nplr(tmp$slab, tmp$acc, silent = T)
})
overlay(models)
h_list = split(beanbagdat, beanbagdat$hoop_size)
models <- lapply(h_list, function(tmp){
nplr(tmp$slab, tmp$acc, silent = T)
})
overlay(models)
models <- lapply(h_list, function(tmp){
nplr(tmp$slab/max(temp$slab), tmp$acc, silent = T)
})
models <- lapply(h_list, function(tmp){
nplr(tmp$slab/max(tmp$slab), tmp$acc, silent = T)
})
overlay(models)
log(0.8)
log(3)
log(18)
log10(18)
setwd("F:/Uni/Github/Breaking_symmetry/Analyses/Experiment_3_Hoop_size")
#### level 3 - 2nd Semester 2017/18 ####
# Part 1 Accuracy measure script
# Script for the Hoop Size version of the throwing task
# This script reads in the data for participants' accuracy
# in the first session.
# Written by Warren James
#### Libraries needed ####
library(tidyverse)
#### Constants ####
Hoop_size <- 0.46
#### Created functions ####
# This is used to get average distance between large and small hoop
# accuracy.
get_avg <- function(df, index, participant){
sum(df[,index][df[,1] == participant])/2
}
#### read in dataset ####
beanbagdat <- read.csv("data/Part_1_measures.txt", sep = "\t")
# num_particiapnts
num_particiapnts <- length(unique(paste(beanbagdat$experimenter,
beanbagdat$participant)))
#### collapse across directions ####
# sort data
beanbagdat <- beanbagdat %>%
mutate(participant = paste(experimenter, participant, sep = "_")) %>%
group_by(participant, slab, hoop_size) %>%
summarise(inhoop = sum(inhoop)) %>%
ungroup() %>%
mutate(acc = inhoop/18,
off_set = log((1-0.01)/0.01),
participant_num = factor(participant,
labels = c(seq(1, num_particiapnts, 1))))
exp(0.8)
log(2.22)
head(beanbagdat)
ss <- beanbagdat %>% filter(participant_num == 7)
head(ss)
h_list = split(ss, ss$hoop_size)
models <- lapply(h_list, function(temp){
nplr(temp$slab, temp$acc)
})
models <- lapply(h_list, function(temp){
nplr::nplr(temp$slab, temp$acc)
})
overlay(models)
nplr::overlay(models)
models <- lapply(h_list, function(temp){
nplr::nplr(temp$slab, temp$acc, npars = 4)
})
nplr::overlay(models)
1/3e6
rm(list =ls())
crash_chance <- 1/3e6
3e6
rbern(1, 0.4)
??rbern
rbinom(1, 100, crach_chance)
rbinom(1, 100, crash_chance)
rbinom(1, 100, crash_chance)
rbinom(1, 100, crash_chance)
rbinom(1, 100, crash_chance)
rbinom(1, 100, crash_chance)
rbinom(1, 1, crash_chance)
rbinom(1, 1, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(107, 1e6, crash_chance)
rbinom(100, 1e6, crash_chance)
rbinom(100, 1e6, crash_chance)
rbinom(100, 1e6, crash_chance)
rbinom(100, 1, crash_chance)
rbinom(100, 1, crash_chance)
rbinom(100, 1, crash_chance)
rbinom(100, 1, crash_chance)
rbinom(100, 1, crash_chance)
rbinom(100, 1, crash_chance)
rbinom(100, 1, crash_chance)
rbinom(100, 1, crash_chance)
rbinom(100, 1, crash_chance)
rbinom(100, 100, crash_chance)
rbinom(100, 100, crash_chance)
rbinom(100, 100, crash_chance)
rbinom(100, 2, crash_chance)
rbinom(100, 2, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
rbinom(1, 1e6, crash_chance)
crash_chance <- 1/3e6
crash_df <- data.frame(iter = numeric(),
succesful_flights = numeric(),
crash_time = numeric())
for(iter in seq(1,1e6,1)){
No_success <- 0
for(ii in seq(1, 1e6, 1)){
crash = rbinom(1, 1, crash_chance)
if(crash == 1){
crash_df = rbind(crash_df, data.frame(iter = iter,
successful_flights = No_success,
crash_time = ii))
} else {
No_success = No_success + 1
}
if(ii == 1e6){
crash_df = rbind(crash_df, data.frame(iter = iter,
successful_flights = No_success,
crash_time = NA))
}
}
}
View(crash_df)
crash_chance <- 1/3e6
crash_df <- data.frame(iter = numeric(),
succesful_flights = numeric(),
crash_time = numeric())
for(iter in seq(1,1e6,1)){
No_success <- 0
print(iter)
for(ii in seq(1, 1e6, 1)){
crash = rbinom(1, 1, crash_chance)
if(crash == 1){
crash_df = rbind(crash_df, data.frame(iter = iter,
successful_flights = No_success,
crash_time = ii))
} else {
No_success = No_success + 1
}
if(ii == 1e6){
crash_df = rbind(crash_df, data.frame(iter = iter,
successful_flights = No_success,
crash_time = NA))
}
}
}
for(iter in seq(1,1e6,1)){
No_success <- 0
print(iter)
for(ii in seq(1, 35000, 1)){
crash = rbinom(1, 1, crash_chance)
if(crash == 1){
crash_df = rbind(crash_df, data.frame(iter = iter,
successful_flights = No_success,
crash_time = ii))
} else {
No_success = No_success + 1
}
if(ii == 1e6){
crash_df = rbind(crash_df, data.frame(iter = iter,
successful_flights = No_success,
crash_time = NA))
}
}
}
