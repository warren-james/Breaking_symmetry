a/(a + b)
}
phi <- function(a, b){
1/((a*b)/(((a+b)^2)*(a+b+1)))
}
skew <- function(a, b){
((2*(b - a))*sqrt(a + b + 1))/((a + b + 2)*sqrt(a*b))
}
mu(1, 3)
data_lines %>%
group_by(slab_measures) %>%
summarise(a = mean(a),
b = mean(b)) %>%
mutate(mu = a/(a+b),
phi =  1/((a*b)/(((a+b)^2)*(a+b+1))),
skew = ((2*(b - a))*sqrt(a + b + 1))/
((a + b + 2)*sqrt(a*b)))
# look at the mean and precision
data_lines %>%
group_by(slab_measures) %>%
summarise(a = mean(a),
b = mean(b)) %>%
mutate(mu = mu(a, b),
phi =  phi(a, b),
skew = skew(a, b))
rm(list = ls())
setwd("F:/Uni/Github/Breaking_symmetry/Analyses/Experiment_4_Prob")
#### Making plots for the paper ####
# probability matching
#### Library ####
library(tidyverse)
#### Load data ####
load("scratch/new_data/df_part2")
load("scratch/new_data/AccMea")
#### Processing ####
df_part2 <- df_part2 %>%
mutate(dist_type = ifelse(separation < Switching_point,
"Close", "Far"),
bias_type = ifelse(bias_type == "biased", "Biased", "Symmetric")) %>%
select(participant,
block,
bias_type,
bias_left,
separation,
dist_type,
Switching_point,
lcr,
standard_boxes,
accuracy)
#### NB: Really close... one point isn't working for some reason.... ####
# Need to work on labels
# labels should reflect participants' own biases in the "symmetric" condition
check <- df_part2 %>%
select(participant, bias_type, lcr, standard_boxes, dist_type) %>%
group_by(participant, bias_type, lcr, standard_boxes, dist_type) %>%
summarise(n = n()) %>%
ungroup() %>%
complete(lcr, nesting(participant, bias_type, standard_boxes, dist_type), fill = list(n = 0)) %>%
ungroup() %>%
group_by(participant, bias_type, dist_type) %>%
spread(lcr, n) %>%
mutate(most = ifelse(sum(`-1`) > sum(`1`), -1, 1),
least = ifelse(sum(`-1`) < sum(`1`), -1, 1),
# need to make sure that the biased group does not change
# will need to do this in the main df
lcr2 = ifelse(standard_boxes == "centre", 0,
ifelse(standard_boxes == "most likely", most, least)),
n = ifelse(lcr2 == 0, max(`0`),
ifelse(lcr2 == 1, max(`1`), max(`-1`)))) %>%
select(participant, bias_type, standard_boxes, lcr2, most, least, dist_type) %>%
merge(df_part2) %>%
mutate(st_box = ifelse(bias_type == "Biased", standard_boxes,
ifelse(lcr == 0, "centre",
ifelse(lcr == most, "most likely", "least likely"))))
# make plot of this
plt_fix <- check %>%
ungroup() %>%
group_by(participant, bias_type, dist_type) %>%
mutate(centre = ifelse(st_box == "centre", 1, 0),
ML = ifelse(st_box == "most likely", 1, 0),
LL = ifelse(st_box == "least likely", 1, 0),
n = n()) %>%
summarise(centre = mean(centre),
ML = mean(ML),
LL = mean(LL)) %>%
gather(centre:LL,
key = "prop_type",
value = "proportion") %>%
mutate(prop_type = factor(prop_type, c("centre", "ML", "LL"),
labels = c("Centre", "Most Likely", "Least Likely"))) %>%
ggplot(aes(dist_type, proportion, fill = bias_type)) +
geom_boxplot() +
# ggplot(aes(proportion, fill = prop_type)) +
# geom_density(alpha = .3) +
# geom_histogram(position = "dodge") +
scale_y_continuous(element_blank(),
breaks = seq(0,1,.2),
labels = scales::percent_format(accuracy = 1)) +
facet_wrap(~prop_type) +
see::scale_fill_flat(name = "Condition") +
scale_x_discrete("Delta") +
theme_bw()
plt_fix
dir()
dir("../")
dir("../../")
dir("../../Figures")
ggsave("../../Figures/Experiment_4_Prob/boxes_prop_CML.png",
width = 5.6,
heigh = 3.5)
dir("../../Figures/Experiment_4_Prob/")
plt_fix <- check %>%
ungroup() %>%
group_by(participant, bias_type, dist_type) %>%
mutate(centre = ifelse(st_box == "centre", 1, 0),
ML = ifelse(st_box == "most likely", 1, 0),
LL = ifelse(st_box == "least likely", 1, 0),
n = n()) %>%
summarise(centre = mean(centre),
ML = mean(ML),
LL = mean(LL)) %>%
gather(centre:LL,
key = "prop_type",
value = "proportion") %>%
mutate(prop_type = factor(prop_type, c("centre", "ML", "LL"),
labels = c("Centre", "Most Likely", "Least Likely"))) %>%
ggplot(aes(dist_type, proportion,
fill = bias_type,
colour = bias_type)) +
geom_boxplot(alpha = .3) +
# ggplot(aes(proportion, fill = prop_type)) +
# geom_density(alpha = .3) +
# geom_histogram(position = "dodge") +
scale_y_continuous(element_blank(),
breaks = seq(0,1,.2),
labels = scales::percent_format(accuracy = 1)) +
facet_wrap(~prop_type) +
see::scale_fill_flat(name = "Condition") +
scale_x_discrete("Delta") +
theme_bw()
plt_fix
plt_fix <- check %>%
ungroup() %>%
group_by(participant, bias_type, dist_type) %>%
mutate(centre = ifelse(st_box == "centre", 1, 0),
ML = ifelse(st_box == "most likely", 1, 0),
LL = ifelse(st_box == "least likely", 1, 0),
n = n()) %>%
summarise(centre = mean(centre),
ML = mean(ML),
LL = mean(LL)) %>%
gather(centre:LL,
key = "prop_type",
value = "proportion") %>%
mutate(prop_type = factor(prop_type, c("centre", "ML", "LL"),
labels = c("Centre", "Most Likely", "Least Likely"))) %>%
ggplot(aes(dist_type, proportion,
fill = bias_type,
colour = bias_type)) +
geom_boxplot(alpha = .3) +
# ggplot(aes(proportion, fill = prop_type)) +
# geom_density(alpha = .3) +
# geom_histogram(position = "dodge") +
scale_y_continuous(element_blank(),
breaks = seq(0,1,.2),
labels = scales::percent_format(accuracy = 1)) +
facet_wrap(~prop_type) +
see::scale_fill_flat(name = "Condition") +
see::scale_color_flat(name = "Condition") +
scale_x_discrete("Delta") +
theme_bw()
plt_fix
ggsave("../../Figures/Experiment_4_Prob/boxes_prop_CML.png",
width = 5.6,
heigh = 3.5)
df_part2 %>%
mutate(centre = ifelse(lcr == 0, 1, 0)) %>%
group_by(participant, bias_type, dist_type) %>%
summarise(centre = mean(centre)) %>%
ggplot(aes(dist_type, centre, fill = bias_type)) +
geom_boxplot()
setwd("F:/Uni/Github/Breaking_symmetry/Analyses/Experiment_3_Hoop_size")
#### Making figures ####
# For the two hoop size experiment
#### Library ####
library(tidyverse)
#### Load in data ####
load("scratch/df_part2_norm")
#### functions ####
mu <- function(a, b){
a/(a + b)
}
phi <- function(a, b){
1/((a*b)/(((a+b)^2)*(a+b+1)))
}
skew <- function(a, b){
((2*(b - a))*sqrt(a + b + 1))/((a + b + 2)*sqrt(a*b))
}
# preprocessing
# check how much is removed by values greater than 1
norm_dat %>%
mutate(outside = ifelse(abs(norm_dist) > 1, 1, 0)) %>%
group_by(outside) %>%
summarise(n = n()/length(norm_dat$trial))
# filter out trials outside of the range (0.8% of trials)
# sort out some labels for distances
norm_dat %>%
group_by(participant) %>%
mutate(temp = as.numeric(as.factor(hoop_pos)),
slab_measures = factor(temp, labels = c("~90%", "~50% - 1", "~50%", "~50% + 1", "~50% + 2", "~10%"))) %>%
select(-temp) %>%
ungroup() %>%
filter(abs(norm_dist) <= 1) -> norm_dat
#### Plotting ####
#### box plots ####
# try making distance a factor so it's the same across participants
# kind of a nice plot...
plt_dst <- norm_dat %>%
# group_by(slab_measures, participant) %>%
group_by(slab_measures) %>%
mutate(mean_dist = mean(norm_dist)) %>%
ggplot(aes(norm_dist)) +
geom_histogram(aes(fill = slab_measures,
colour = slab_measures),
alpha = 0.3,
binwidth = .15) +
geom_vline(aes(xintercept = mean_dist),
linetype = "dashed",
alpha = 0.3) +
theme_bw() +
scale_x_continuous(breaks = c(-1, 0, 1),
labels = c("Big Hoop", "Centre", "Small Hoop")) +
theme(axis.text.x = element_text(angle = 45,
hjust = 1)) +
#facet_wrap(~slab_measures, scales = "free") +
facet_wrap(~slab_measures) +
see::scale_color_flat() +
see::scale_fill_flat()
plt_dst
# new plot, looks kind of cool
# mean is a solid line, median is dashed
plt_dst2 <- norm_dat %>%
ggplot(aes(x = norm_dist,
y = slab_measures,
colour = slab_measures,
fill = slab_measures)) +
# ggridges::stat_density_ridges(quantile_fun = mean,
#                               quantile_lines = T,
#                               alpha = .15,
#                               linetype = "dashed") +
#jittered_points = T,position = "raincloud") +
ggridges::stat_density_ridges(quantile_lines = T,
quantiles = 2,
alpha = .15) +
see::scale_color_pizza() +
see::scale_fill_pizza() +
see::theme_blackboard() +
# see::scale_color_flat() +
# see::scale_fill_flat() +
# theme_bw() +
scale_x_continuous("Normalised Distance",
limits = c(-1, 1)) +
scale_y_discrete("")
plt_dst2$labels$colour <- "Hoop Delta"
plt_dst2$labels$fill <- "Hoop Delta"
plt_dst2
# try boxplot versions
plt_box <- norm_dat %>%
ggplot(aes(y = norm_dist,
x = slab_measures)) +
geom_boxplot(aes(fill = slab_measures,
colour = slab_measures),
alpha = .3) +
theme_bw() +
see::scale_color_flat() +
see::scale_fill_flat()
# see::theme_abyss() +
# see::scale_color_pizza() +
# see::scale_fill_pizza()
plt_box
#### Fitting a distribution ####
# need to rescale things for a beta distribution
# to fit a beta dist
data_fitting <- norm_dat %>%
select(participant, slab_measures, norm_dist) %>%
mutate(rescaled = (norm_dist+1)/2,
rescaled = ifelse(rescaled == 1, 0.9999, rescaled)) %>%
group_by(slab_measures) %>%
summarise(ests = list(fitdistrplus::fitdist(rescaled,
"beta")$estimate)) %>%
unnest %>%
mutate(param = rep(letters[1:2], length(ests)/2)) %>%
spread(key = param, value = ests)
# lines to draw
x_vals <- seq(0,1,.05)
groups <- unique(data_fitting$slab_measures)
a <- data_fitting$a
b <- data_fitting$b
data_lines <- tibble(slab_measures = rep(groups, each = length(x_vals)),
a = rep(a, each = length(x_vals)),
b = rep(b, each = length(x_vals)),
x = rep(x_vals, length(groups)),
density = dbeta(x, a, b))
# plot this over the histograms?
norm_dat %>%
mutate(rescaled = (norm_dist + 1)/2,
rescaled = ifelse(rescaled == 1, 0.9999, rescaled)) %>%
ggplot(aes(rescaled,
# ggplot(aes(norm_dist,
fill = slab_measures,
colour = slab_measures)) +
geom_segment(aes(x = 0.5, y = 0,
xend = 0.5, yend = 4),
linetype = "dashed") +
# geom_vline(xintercept = 0,
#            linetype = "dashed",
#            aes(colour = slab_measures)) +
geom_histogram(aes(y = ..density..),
binwidth = .1,
alpha = .3) +
geom_line(data = data_lines,
aes(x, density,
colour = slab_measures)) +
facet_wrap(~slab_measures) +
scale_x_continuous(breaks = c(0, .5, 1),
labels = c("Big Hoop", "Centre", "Small Hoop")) +
# see::theme_modern() +
theme_bw() +
theme(legend.position = "none",
axis.text.x = element_text(angle = -30,
hjust = .2)) +
see::scale_color_flat() +
see::scale_fill_flat() +
geom_text(data = data_lines,
aes(1, 3.8,
# label = paste(expression(alpha), "==", round(a, 1))),
label = paste("hat(alpha)==", round(a, 1))),
parse = T, hjust = 1,
size = 3) +
geom_text(data = data_lines,
aes(1, 3.3,
# label = paste(expression(beta), "==", round(a, 1))),
label = paste("hat(beta)==", round(b, 1))),
parse = T, hjust = 1,
size = 3)
ggsave("../../Figures/Experiment_3_Hoop_size/histogram_beta_fit.png",
width = 5.6,
height = 3)
norm_dat %>%
mutate(rescaled = (norm_dist + 1)/2,
rescaled = ifelse(rescaled == 1, 0.9999, rescaled)) %>%
ggplot(aes(rescaled,
# ggplot(aes(norm_dist,
fill = slab_measures,
colour = slab_measures)) +
geom_segment(aes(x = 0.5, y = 0,
xend = 0.5, yend = 4),
linetype = "dashed") +
# geom_vline(xintercept = 0,
#            linetype = "dashed",
#            aes(colour = slab_measures)) +
geom_histogram(aes(y = ..density..),
binwidth = .1,
alpha = .3) +
geom_line(data = data_lines,
aes(x, density,
colour = slab_measures)) +
facet_wrap(~slab_measures) +
scale_x_continuous(breaks = c(0, .5, 1),
labels = c("Big Hoop", "Centre", "Small Hoop")) +
# see::theme_modern() +
theme_bw() +
theme(legend.position = "none",
axis.text.x = element_text(angle = -30,
hjust = .2),
axis.title.x = element_blank()) +
see::scale_color_flat() +
see::scale_fill_flat() +
geom_text(data = data_lines,
aes(1, 3.8,
# label = paste(expression(alpha), "==", round(a, 1))),
label = paste("hat(alpha)==", round(a, 1))),
parse = T, hjust = 1,
size = 3) +
geom_text(data = data_lines,
aes(1, 3.3,
# label = paste(expression(beta), "==", round(a, 1))),
label = paste("hat(beta)==", round(b, 1))),
parse = T, hjust = 1,
size = 3)
ggsave("../../Figures/Experiment_3_Hoop_size/histogram_beta_fit.png",
width = 5.6,
height = 5)
# plot this over the histograms?
norm_dat %>%
mutate(rescaled = (norm_dist + 1)/2,
rescaled = ifelse(rescaled == 1, 0.9999, rescaled)) %>%
ggplot(aes(rescaled,
# ggplot(aes(norm_dist,
fill = slab_measures,
colour = slab_measures)) +
geom_segment(aes(x = 0.5, y = 0,
xend = 0.5, yend = 4),
linetype = "dashed") +
# geom_vline(xintercept = 0,
#            linetype = "dashed",
#            aes(colour = slab_measures)) +
geom_histogram(aes(y = ..density..),
binwidth = .1,
alpha = .3) +
geom_line(data = data_lines,
aes(x, density,
colour = slab_measures)) +
facet_wrap(~slab_measures) +
scale_x_continuous(breaks = c(0, .5, 1),
labels = c("Big Hoop", "Centre", "Small Hoop")) +
# see::theme_modern() +
theme_bw() +
theme(legend.position = "none",
axis.text.x = element_text(angle = -30,
hjust = .2),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
see::scale_color_flat() +
see::scale_fill_flat() +
geom_text(data = data_lines,
aes(1, 3.8,
# label = paste(expression(alpha), "==", round(a, 1))),
label = paste("hat(alpha)==", round(a, 1))),
parse = T, hjust = 1,
size = 3) +
geom_text(data = data_lines,
aes(1, 3.3,
# label = paste(expression(beta), "==", round(a, 1))),
label = paste("hat(beta)==", round(b, 1))),
parse = T, hjust = 1,
size = 3)
norm_dat %>%
mutate(rescaled = (norm_dist + 1)/2,
rescaled = ifelse(rescaled == 1, 0.9999, rescaled)) %>%
ggplot(aes(rescaled,
# ggplot(aes(norm_dist,
fill = slab_measures,
colour = slab_measures)) +
geom_segment(aes(x = 0.5, y = 0,
xend = 0.5, yend = 4),
linetype = "dashed") +
# geom_vline(xintercept = 0,
#            linetype = "dashed",
#            aes(colour = slab_measures)) +
geom_histogram(aes(y = ..density..),
binwidth = .1,
alpha = .3) +
geom_line(data = data_lines,
aes(x, density,
colour = slab_measures)) +
facet_wrap(~slab_measures) +
scale_x_continuous(breaks = c(0, .5, 1),
labels = c("Big", "Centre", "Small")) +
# see::theme_modern() +
theme_bw()
norm_dat %>%
mutate(rescaled = (norm_dist + 1)/2,
rescaled = ifelse(rescaled == 1, 0.9999, rescaled)) %>%
ggplot(aes(rescaled,
# ggplot(aes(norm_dist,
fill = slab_measures,
colour = slab_measures)) +
geom_segment(aes(x = 0.5, y = 0,
xend = 0.5, yend = 4),
linetype = "dashed") +
# geom_vline(xintercept = 0,
#            linetype = "dashed",
#            aes(colour = slab_measures)) +
geom_histogram(aes(y = ..density..),
binwidth = .1,
alpha = .3) +
geom_line(data = data_lines,
aes(x, density,
colour = slab_measures)) +
facet_wrap(~slab_measures) +
scale_x_continuous(breaks = c(0, .5, 1),
labels = c("Big", "Centre", "Small")) +
# see::theme_modern() +
theme_bw() +
theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
see::scale_color_flat() +
see::scale_fill_flat() +
geom_text(data = data_lines,
aes(1, 3.8,
# label = paste(expression(alpha), "==", round(a, 1))),
label = paste("hat(alpha)==", round(a, 1))),
parse = T, hjust = 1,
size = 3) +
geom_text(data = data_lines,
aes(1, 3.3,
# label = paste(expression(beta), "==", round(a, 1))),
label = paste("hat(beta)==", round(b, 1))),
parse = T, hjust = 1,
size = 3)
ggsave("../../Figures/Experiment_3_Hoop_size/histogram_beta_fit.png",
width = 5.6,
height = 5)
data_lines %>%
group_by(slab_measures) %>%
summarise(a = mean(a),
b = mean(b)) %>%
mutate(mu = mu(a, b),
phi =  phi(a, b),
skew = skew(a, b))
